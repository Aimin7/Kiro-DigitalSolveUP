{"version":3,"file":"src/handlers/locationHandler.js","mappings":"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AY;AACrC,YAAY,mBAAO,CAAC,IAAO;AAC3B,iBAAiB,mBAAO,CAAC,GAAY;;AAErC;;;AAGA;;;AAGA,gBAAgB;;AAEhB;;AAEA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,wDAAwD,uBAAuB;AAC/E;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,oEAAoE;AACpE;AACA;;AAEA,uBAAuB;;AAEvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2DAA2D,aAAa;AACxE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA,iDAAiD;;AAEjD;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,oEAAoE;AACpE,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;;AAEA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD,aAAa;AACnE;;AAEA;AACA;;;AAGA,aAAa;;AAEb;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kEAAkE,aAAa;AAC/E;;AAEA;AACA;AACA;AACA;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA4B;;AAE5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,wFAAwF;AACxF;;AAEA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sDAAsD,aAAa;AACnE;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,yBAAyB,mBAAO,CAAC,IAAW;;AAE5C;AACA;;;;;;;;;AC3da;;AAEb;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;;;;;;;;AC37Ca;;AAEb,kBAAkB,mBAAO,CAAC,IAAa;;;AAGvC;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;;AAEA,wEAAwE;AACxE;AACA;AACA;AACA;;;;;;;;;;;;;ACzBA;;AAEA,MAAMA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gCAAgC,QAAQ;AACxC;;AAEA;AACA;;AAEA,oEAAoE;AACpE;;AAEA;;AAEA;AACA;;AAEA,4DAA4D,qCAAqC;AACjG;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,0GAA0G,oBAAoB;AAC9H;AACA;;AAEA,8DAA8D,qBAAqB;AACnF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,qCAAqC;AAC7G;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uEAAuE,8CAA8C;AACrH;AACA;AACA;;AAEA,wCAAwC;AACxC;AACA;;AAEA;;AAEA;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oEAAoE,qCAAqC;AACzG;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wEAAwE,qCAAqC;AAC7G;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,8DAA8D,qBAAqB;AACnF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA,SAAS;;AAET;AACA;;AAEA,wCAAwC,wBAAwB,OAAO,iBAAiB;AACxF,aAAa;AACb,uCAAuC,OAAO,IAAI,sBAAsB;;AAExE;AACA;AACA;;AAEA,wDAAwD,0BAA0B;AAClF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA,wCAAwC,uCAAuC,OAAO,kBAAkB;AACxG;AACA,SAAS;;AAET;AACA;;AAEA,wCAAwC,uCAAuC,OAAO,kBAAkB;AACxG;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;;AAEA,gCAAgC,oBAAoB;AACpD,2FAA2F,cAAc;AACzG;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA,+BAA+B;;AAE/B;;AAEA;AACA;AACA;;AAEA;AACA,4DAA4D,aAAa;AACzE;AACA;;AAEA,wCAAwC,sBAAsB,qBAAqB;AACnF,aAAa;AACb,8BAA8B,6BAA6B,IAAI,SAAS;;AAExE,wBAAwB,wBAAwB;AAChD;AACA;AACA;;AAEA,gCAAgC,kBAAkB;AAClD;AACA,qDAAqD,iEAAiE;AACtH;AACA;;AAEA;AACA,aAAa;AACb;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,wDAAwD,cAAc;AACtE;AACA,SAAS;;AAET;AACA,2CAA2C;;AAE3C;AACA;;AAEA,+BAA+B,wBAAwB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb,8BAA8B,sBAAsB,IAAI,0BAA0B,IAAI,kBAAkB;;AAExG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gCAAgC,kBAAkB;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA,KA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;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,kEAAkE,SAAS;AAC3E;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,+CAA+C,cAAc;AAC7D;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,4BAA4B,uBAAuB;AACnD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,4EAA4E;;AAE5E;AACA,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;;AAEA;;AAEA,4EAA4E;AAC5E;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,wBAAwB;AACxB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,qCAAqC,mBAAmB;AACxD;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,yCAAyC,cAAc;AACvD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,gEAAgE;;AAEhE;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,gCAAgC,gBAAgB;AAChD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,8BAA8B,yBAAyB;;AAEvD;AACA;AACA,8CAA8C,aAAa;AAC3D;AACA;;AAEA,wBAAwB,MAAM;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+BAA+B,cAAc,IAAI;;AAEjD;AACA,qCAAqC,KAAK;AAC1C;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,uCAAuC;;AAEvC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,wCAAwC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA,yDAAyD,eAAe;AACxE;AACA,wCAAwC;AACxC;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sCAAsC;;AAEtC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA,wBAAwB,+BAA+B;AACvD;;AAEA;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,kBAAkB;AAC9C,wBAAwB,sBAAsB;;AAE9C,kCAAkC,EAAE,EAAE,2BAA2B;AACjE,wDAAwD,OAAO;AAC/D;AACA,6EAA6E,OAAO;AACpF,gCAAgC,wBAAwB;AACxD;AACA,oCAAoC,OAAO,OAAO,SAAS,GAAG,QAAQ;AACtE;AACA;AACA;AACA;AACA,yEAAyE,OAAO;AAChF,4BAA4B,wBAAwB;AACpD;AACA,gCAAgC,OAAO,YAAY,SAAS,GAAG,QAAQ;AACvE;AACA;AACA;;AAEA;AACA,gDAAgD;;AAEhD;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA;;AAEA,qBAAqB;AACrB;;AAEA;;AAEA,oEAAoE;AACpE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,iBAAiB;AACjB;;AAEA,qCAAqC;;AAErC,iDAAiD,MAAM;;AAEvD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,kCAAkC;;AAElC;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA,4DAA4D;;;AAG5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;AC5iCA;;AAEA,MAAM2C,eAAe,GAAG,CACtB,OAAO,EACP,QAAQ,EACR,qBAAqB,CACtB;AAED,MAAMC,eAAe,GAAG,iDACtB,iBAAiB,EACjB,qBAAqB,EACrB,mBAAmB,EACnB,8BAA8B,EAC9B,4BAA4B,EAC5B,4BAA4B,CAC7B;;AAED;AACA,SAASC,mBAAmBA,CAAA,EAAG;EAC7B,MAAMC,OAAO,GAAGH,eAAe,CAACI,MAAM,CAAEC,MAAM,IAAK,CAACC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC,CAAC;EAExE,IAAIF,OAAO,CAACK,MAAM,GAAG,CAAC,EAAE;IACtB,MAAM,IAAIC,KAAK,CAAC,2CAA2CN,OAAO,CAACO,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;EAClF;AACF;;AAEA;AACA,MAAMvD,WAAW,GAAG;EAClB;EACAiB,KAAK,EAAEkC,OAAO,CAACC,GAAG,CAACI,KAAK;EACxBC,MAAM,EAAEN,OAAO,CAACC,GAAG,CAACM,MAAM;EAC1BC,OAAO,EAAER,YAAoB,IAAI,CAAY;EAE7C;EACAU,iBAAiB,EAAEV,OAAO,CAACC,GAAG,CAACU,mBAAmB;EAElD;EACAC,KAAK,EAAE;IACLC,QAAQ,EAAEb,OAAO,CAACC,GAAG,CAACa,eAAe;IACrCC,YAAY,EAAEf,OAAO,CAACC,GAAG,CAACe;EAC5B,CAAC;EAED;EACAC,QAAQ,EAAE;IACRC,OAAO,EAAElB,OAAO,CAACC,GAAG,CAACkB,iBAAiB,IAAI,2BAA2B;IACrEC,SAAS,EAAE;MACTC,UAAU,EAAErB,OAAO,CAACC,GAAG,CAACqB,4BAA4B,IAAI,2BAA2B;MACnFC,QAAQ,EAAEvB,OAAO,CAACC,GAAG,CAACuB,0BAA0B,IAAI,yDAAyD;MAC7GC,QAAQ,EAAEzB,OAAO,CAACC,GAAG,CAACyB,0BAA0B,IAAI;IACtD;EACF,CAAC;EAED;EACArE,aAAa,EAAE2C,YAAoB,KAAK,aAAa;EACrD2B,MAAM,EAAE3B,YAAoB,KAAK,MAAM;EACvC4B,YAAY,EAAE5B,YAAoB,KAAK,YAAY;EACnD6B,SAAS,EAAE7B,OAAO,CAACC,GAAG,CAAC6B,UAAU,KAAK;AACxC,CAAC;;AAED;AACA,IAAI,CAACjF,WAAW,CAAC8E,MAAM,EAAE;EACvB/B,mBAAmB,CAAC,CAAC;AACvB;AAEAJ,MAAM,CAACC,OAAO,GAAG5C,WAAW,C;;;;;;;;AChEf;;AAEb,cAAc,mBAAO,CAAC,IAAS;AAC/B,cAAc,mBAAO,CAAC,IAAS;AAC/B,cAAc,mBAAO,CAAC,IAAS;;;AAG/B;AACA;AACA;;;AAGA,8DAA8D;;AAE9D;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,wDAAwD;AACxD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4DAA4D;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8FAA8F;AACnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA,8BAA8B;AAC9B;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA,wDAAwD;AACxD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;AC/Ka;;AAEb,eAAe,mBAAO,CAAC,IAAuB;;AAE9C,aAAa,mBAAO,CAAC,IAAQ;;;AAG7B;;;AAGA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA,wCAAwC,uBAAuB,KAAK;AACpE,aAAa;AACb,uCAAuC,GAAG;;AAE1C;AACA;AACA;;AAEA,yDAAyD,GAAG;AAC5D;AACA,SAAS;;AAET;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA,yDAAyD,OAAO;AAChE;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA,wCAAwC,0BAA0B,KAAK;AACvE,aAAa;AACb,uCAAuC,GAAG;;AAE1C;AACA;AACA;;AAEA,4DAA4D,GAAG;AAC/D;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA,wCAAwC,0BAA0B,KAAK;AACvE,aAAa;AACb,uCAAuC,GAAG;;AAE1C;AACA;AACA;;AAEA,4DAA4D,GAAG;AAC/D;AACA;AACA,KAAK;;AAEL;AACA,6BAA6B,SAAS,wBAAwB,IAAI;AAClE,6BAA6B,SAAS;AACtC,gCAAgC,SAAS,wCAAwC,IAAI;AACrF,gCAAgC,SAAS,yCAAyC,IAAI;AACtF;AACA,CAAC;;;;;;;;;AC5FY;;AAEb,eAAe,mBAAO,CAAC,IAAuB;;AAE9C,YAAY,mBAAO,CAAC,GAAO;AAC3B,eAAe,mBAAO,CAAC,IAAW;;;AAGlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA,kBAAkB;AAClB,KAAK;;AAEL;AACA;AACA,wBAAwB,eAAe;;AAEvC;AACA;AACA;AACA;;AAEA;AACA,6BAA6B;;AAE7B;AACA,4CAA4C;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL,sBAAsB,sBAAsB;;AAE5C;AACA;;AAEA,qBAAqB;AACrB;;AAEA;AACA,qBAAqB;AACrB;;AAEA,yBAAyB;;AAEzB;AACA;AACA;AACA,oFAAoF;AACpF;AACA;AACA;;AAEA;AACA,wCAAwC;AACxC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,uCAAuC,OAAO,IAAI,sBAAsB;;AAExE;AACA;AACA;;AAEA,yDAAyD,0BAA0B;AACnF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA,wCAAwC,4CAA4C,OAAO,iBAAiB;AAC5G;AACA,SAAS;;AAET;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA,wCAAwC,yCAAyC,OAAO,iBAAiB;AACzG;AACA,SAAS;;AAET;AACA;;AAEA,wCAAwC,wCAAwC,OAAO,kBAAkB;AACzG;AACA,SAAS;;AAET;AACA;;AAEA,wCAAwC,wCAAwC,OAAO,kBAAkB;AACzG;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,uCAAuC,iCAAiC;;AAExE;;AAEA;AACA;AACA,8DAA8D,oCAAoC;AAClG;;AAEA;AACA;AACA,uDAAuD,oCAAoC;AAC3F,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA,wCAAwC,2BAA2B,SAAS;AAC5E,aAAa;AACb,uCAAuC,OAAO;;AAE9C;AACA;AACA;AACA;AACA;;AAEA,2DAA2D,cAAc;AACzE,aAAa;AACb;AACA,SA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,mBAAO,CAAC,EAAuB;AAC9C,cAAc,mBAAO,CAAC,IAAsB;;AAE5C,eAAe,mBAAO,CAAC,IAAU;AACjC,eAAe,mBAAO,CAAC,IAAU;AACjC,cAAc,mBAAO,CAAC,IAAS;;;AAG/B;AACA;AACA;;;AAGA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA,kBAAkB;;AAElB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iJAAiJ,UAAU;AAC3J,iBAAiB;;AAEjB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB,UAAU;AACnE;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D,sCAAsC,mBAAmB;;AAEzD;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;AACb;;;AAGA;;AAEA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA,iBAAiB;AACjB;;AAEA,aAAa;AACb;;;AAGA,gBAAgB,wDAAwD;;AAExE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG,UAAU;AAC7G;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wGAAwG;AACxG;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wGAAwG;AACxG;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qEAAqE,gCAAgC,eAAe,GAAG;AACvH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,wEAAwE,oCAAoC,eAAe,GAAG;AAC9H;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gFAAgF;AAChF;;AAEA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA,YAAY,uBAAuB;;AAEnC;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mCAAmC,6CAA6C;AAChF;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sEAAsE,2CAA2C;AACjH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,gFAAgF;;AAEhF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA,iBAAiB;AACjB;;AAEA,aAAa;AACb;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA,YAAY,uBAAuB;;AAEnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,4DAA4D;;AAE5D,qBAAqB,SAAS;AAC9B,4CAA4C,yEAAyE;AACrH;AACA;;AAEA;;AAEA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA,YAAY,uBAAuB;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oDAAoD,KAAK,WAAW,YAAY;AAChF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;;;;;;;;AC7uBa;;AAEb;;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA,oBAAoB,kBAAkB;;AAEtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA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AEA;AACA;AACA,oEAAoE,eAAe;AACnF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA,oEAAoE,eAAe;AACnF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,0BAA0B;AAC1B;AACA;AACA,iBAAiB;AACjB,KAAK;;AAEL;;AAEA;AACA;AACA,oEAAoE,eAAe;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,oEAAoE,eAAe;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA,oEAAoE,eAAe;AACnF;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0BAA0B;AAC1B;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B,4BAA4B;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,oFAAoF,mBAAmB;AACvG;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oFAAoF,mBAAmB;AACvG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA,4BAA4B,oCAAoC;AAChE;AACA;AACA;AACA,0EAA0E,EAAE;AAC5E;AACA;AACA;AACA;AACA;AACA,2FAA2F,EAAE;AAC7F;AACA;AACA;;AAEA;;AAEA,qEAAqE,2BAA2B;AAChG;AACA;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oEAAoE,iBAAiB;AACrF;AACA;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gEAAgE;;AAEhE;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2FAA2F,uBAAuB,uBAAuB,cAAc;AACvJ;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA6B;AAC7B;;AAEA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;AC1iCa;;AAEb,cAAc,mBAAO,CAAC,IAAS;;;AAG/B;AACA;AACA;;;AAGA;;AAEA,8BAA8B,iBAAiB;;AAE/C;AACA;;;AAGA;;AAEA,4EAA4E;AAC5E;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,4EAA4E;AAC5E;;AAEA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,QAAQ;AAC1C;AACA,4EAA4E;AAC5E;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA,YAAY,iDAAiD;AAC7D,YAAY,8BAA8B;;AAE1C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,oEAAoE;AACpE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;;;;;;;AC5Ta;;AAEb,eAAe,mBAAO,CAAC,IAAuB;;AAE9C,YAAY,mBAAO,CAAC,GAAO;AAC3B,eAAe,mBAAO,CAAC,IAAW;AAClC,gBAAgB,mBAAO,CAAC,IAAY;AACpC,eAAe,mBAAO,CAAC,IAAW;;;AAGlC;;;AAGA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA,gBAAgB;AAChB,KAAK;;AAEL;;AAEA;AACA,KAAK;;AAEL,sBAAsB,sBAAsB;;AAE5C;;AAEA;AACA;AACA,mEAAmE,YAAY,GAAG,YAAY;AAC9F,KAAK;;AAEL;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,qCAAqC,gBAAgB;AACrD;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,YAAY,oBAAoB;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA,qBAAqB,cAAc,iDAAiD;AACpF;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;;AAEA;AACA,iBAAiB;AACjB;;AAEA,aAAa;AACb;;;AAGA;;AAEA,oCAAoC;AACpC;AACA;;AAEA,sBAAsB,0CAA0C,6BAA6B,YAAY,IAAI,QAAQ;AACrH;;;;;;;;;ACvKa;;AAEb;;;AAGA,gBAAgB;;AAEhB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;ACpBa;;AAEb,eAAe,mBAAO,CAAC,IAAuB;;AAE9C,YAAY,mBAAO,CAAC,GAAO;AAC3B,eAAe,mBAAO,CAAC,IAAW;AAClC,eAAe,mBAAO,CAAC,IAAW;;;AAGlC;;;AAGA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA,qBAAqB;AACrB,KAAK;;AAEL;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,KAAK;;AAEL,oBAAoB,QAAQ;;AAE5B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB,KAAK;;AAEL,sBAAsB,OAAO;;AAE7B;AACA,qBAAqB;AACrB;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,gCAAgC,mBAAmB;AACnD;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;;AAEA,gCAAgC,mBAAmB;AACnD;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,2BAA2B,SAAS;AACpC;AACA,CAAC;;;;;;;;;ACrJY;;AAEb;;;AAGA,YAAY,8BAA8B;;AAE1C,gGAAgG;AAChG;;;;;;;;;ACRa;;AAEb,YAAY,mBAAO,CAAC,IAAS;;;AAG7B;;;AAGA;;AAEA;AACA;AACA;AACA;;;AAGA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;;;AAGA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gCAAgC;AACtE;AACA,mDAAmD,0CAA0C;AAC7F,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wBAAwB,iDAAiD;AACzE;AACA;AACA,qBAAqB,+FAA+F;AACpH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,CAAC;AACD;;;AAGA,kBAAkB;;;AAGlB;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,CAAC;AACD;;;;;;;;;AC7Sa;;AAEb,eAAe,mBAAO,CAAC,IAAuB;;;AAG9C;;;AAGA,cAAc;;AAEd;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,0DAA0D;;AAE1D,2EAA2E,MAAM;AACjF;AACA,yEAAyE,MAAM;AAC/E;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,sEAAsE,MAAM;AAC5E;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qDAAqD,eAAe;AACpE;AACA;AACA;;AAEA;;AAEA;AACA,wBAAwB,wBAAwB;AAChD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,4DAA4D;AAC5D;;AAEA;AACA,4DAA4D;AAC5D;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,wBAAwB,wBAAwB,gBAAgB;AAChE;;AAEA;AACA;AACA,gCAAgC,wBAAwB,QAAQ;AAChE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;;;;;;;;;AChOa;;AAEb,eAAe,mBAAO,CAAC,IAAuB;AAC9C,cAAc,mBAAO,CAAC,IAAsB;;AAE5C,cAAc,mBAAO,CAAC,IAAS;AAC/B,eAAe,mBAAO,CAAC,IAAU;AACjC,gBAAgB,mBAAO,CAAC,IAAW;AACnC,eAAe,mBAAO,CAAC,IAAU;AACjC,eAAe,mBAAO,CAAC,IAAU;AACjC,iBAAiB,mBAAO,CAAC,IAAY;AACrC,YAAY,mBAAO,CAAC,IAAO;AAC3B,iBAAiB,mBAAO,CAAC,GAAY;AACrC,cAAc,mBAAO,CAAC,IAAS;;AAE/B;;;AAGA;AACA;AACA,sBAAsB,mBAAO,CAAC,IAAsB;AACpD,aAAa,mBAAO,CAAC,GAAa;AAClC,eAAe,mBAAO,CAAC,IAAe;AACtC,iBAAiB,mBAAO,CAAC,IAAiB;AAC1C,cAAc,mBAAO,CAAC,IAAc;AACpC,kBAAkB,mBAAO,CAAC,IAAkB;AAC5C,cAAc,mBAAO,CAAC,IAAc;AACpC,gBAAgB,mBAAO,CAAC,IAAgB;AACxC,gBAAgB,mBAAO,CAAC,IAAgB;AACxC,gBAAgB,mBAAO,CAAC,IAAgB;AACxC,gBAAgB,mBAAO,CAAC,IAAgB;AACxC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;AAGA,wEAAwE;AACxE,6BAA6B,mBAAO,CAAC,GAAgB;AACrD;;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,gEAAgE;AAChE;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA,KAAK;;AAEL;;AAEA;;AAEA,oCAAoC;AACpC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA,KAAK;;AAEL;;AAEA;;AAEA,6BAA6B,mBAAO,CAAC,IAAW;;AAEhD;AACA;;AAEA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA,+DAA+D,UAAU,eAAe,eAAe;;AAEvG;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,iCAAiC,SAAS,EAAE,QAAQ;AACpD;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;;;;;;;;AC1Ra;;AAEb,eAAe,mBAAO,CAAC,IAAuB;AAC9C,eAAe,mBAAO,CAAC,IAA6B;AACpD,cAAc,mBAAO,CAAC,IAA4B;AAClD,WAAW,mBAAO,CAAC,IAAyB;AAC5C,oBAAoB,mBAAO,CAAC,IAA4B;AACxD,aAAa,mBAAO,CAAC,IAA2B;AAChD,YAAY,mBAAO,CAAC,IAA0B;;AAE9C,YAAY,mBAAO,CAAC,GAAO;AAC3B,eAAe,mBAAO,CAAC,IAAW;;;AAGlC;AACA,kCAAkC,QAAQ,4BAA4B;AACtE;AACA;AACA;AACA;AACA,8BAA8B,EAAE,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE;AACnE,uCAAuC,EAAE,eAAe,EAAE,oBAAoB,EAAE,kBAAkB,EAAE;AACpG,SAAS;AACT;AACA,8BAA8B,EAAE,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE;AACtE,uCAAuC,EAAE,eAAe,EAAE,oBAAoB,EAAE,qBAAqB,EAAE;AACvG;AACA,KAAK;AACL,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB,mBAAmB;AAC3C;;AAEA;AACA,UAAU,KAAK;AACf,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA,uBAAuB,gBAAgB;AACvC,oBAAoB;AACpB,KAAK;;AAEL;;AAEA,wBAAwB;AACxB,KAAK;;AAEL;AACA;AACA,wBAAwB,sBAAsB;;AAE9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA4B,MAAM;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wDAAwD,0EAA0E;AACvK;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA,KAAK;;AAEL,sBAAsB,eAAe;;AAErC;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,qBAAqB;AACrB;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA,+BAA+B;;AAE/B;;AAEA,4BAA4B;AAC5B;AACA;;AAEA,wCAAwC,wBAAwB,WAAW;AAC3E,aAAa;AACb,uCAAuC,SAAS;;AAEhD;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA,wCAAwC,sBAAsB,aAAa;AAC3E,aAAa;AACb,uCAAuC,WAAW;;AAElD;AACA;;AAEA;AACA;;AAEA,+CAA+C,UAAU;AACzD,aAAa;AACb;AACA,SAAS;;AAET;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA,+BAA+B;;AAE/B;;AAEA,4BAA4B;AAC5B;;AAEA,wCAAwC,yBAAyB,WAAW;AAC5E,aAAa;AACb,uCAAuC,SAAS;;AAEhD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wCAAwC,wBAAwB,SAAS,WAAW;AACpF,aAAa;AACb,6CAA6C,SAAS;;AAEtD;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA,+BAA+B;;AAE/B;AACA;;AAEA;AACA,iDAAiD,yDAAyD;;AAE1G,wCAAwC,uBAAuB,SAAS,kBAAkB;AAC1F,aAAa;AACb,uCAAuC,SAAS,IAAI,gBAAgB;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uDAAuD,iBAAiB;AACxE;AACA,SAAS;;AAET;AACA;AACA,+BAA+B;;AAE/B;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,oCAAoC,qBAAqB;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mEAAmE,kBAAkB;;AAErF,iDAAiD,eAAe,EAAE,GAAG,UAAU,UAAU,EAAE,OAAO,2BAA2B,UAAU,EAAE,OAAO,mCAAmC,UAAU,EAAE,aAAa,GAAG,MAAM;;AAErN,wCAAwC,sBAAsB,SAAS,SAAS;AAChF,aAAa;AACb,6CAA6C,OAAO;;AAEpD;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA,+BAA+B;;AAE/B;;AAEA,4BAA4B;AAC5B;AACA;;AAEA,wCAAwC,qBAAqB,WAAW;AACxE,aAAa;AACb,uCAAuC,SAAS;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,aAAa;AACb;;AAEA,4CAA4C,sBAAsB;AAClE;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA,+BAA+B;;AAE/B;;AAEA,wBAAwB,wBAAwB;AAChD;AACA,wCAAwC,oBAAoB,WAAW,iBAAiB,SAAS;AACjG,aAAa;AACb,uCAAuC,SAAS,IAAI,OAAO;;AAE3D;AACA;AACA;;AAEA;AACA,+DAA+D,qDAAqD;AACpH;;AAEA,oDAAoD,2BAA2B;AAC/E;AACA,SAAS;;AAET;AACA;;AAEA;AACA,aAAa;AACb,8BAA8B,OAAO;;AAErC;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,aAAa;AACb,uCAAuC,iBAAiB,IAAI,sBAAsB;;AAElF,4GAA4G;AAC5G;AACA;AACA;;AAEA,yDAAyD,oCAAoC;AAC7F,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,aAAa;AACb;AACA,SAAS;;AAET;AACA;;AAEA;AACA,aAAa;AACb;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA,wCAAwC,2BAA2B,QAAQ;AAC3E,aAAa;AACb,8BAA8B,OAAO,IAAI,MAAM;;AAE/C;AACA;AACA;;AAEA,mDAAmD,aAAa;AAChE,aAAa;AACb;AACA,SAAS;;AAET;AACA;AACA,sCAAsC;;AAEtC;AACA;;AAEA;AACA,gCAAgC;AAChC;;AAEA;;AAEA;AACA,wCAAwC,yBAAyB,gBAAgB,aAAa;AAC9F,aAAa;AACb,uCAAuC,gBAAgB,IAAI,WAAW;;AAEtE;;AAEA;AACA;AACA;;AAEA,kDAAkD,kCAAkC;AACpF,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,gDAAgD,sBAAsB;AACtE;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA,wCAAwC,sBAAsB,WAAW;AACzE,aAAa;AACb,uCAAuC,SAAS;;AAEhD;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;AACb;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA,+BAA+B;;AAE/B;;AAEA;AACA;AACA;;AAEA,wBAAwB,gBAAgB;AACxC;AACA,wCAAwC,qBAAqB,SAAS,yBAAyB;AAC/F,aAAa;AACb,uCAAuC,SAAS,IAAI,uBAAuB;;AAE3E,wEAAwE;AACxE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gEAAgE,gBAAgB;AAChF;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qEAAqE,eAAe;AACpF;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,8BAA8B,SAAS;AACvC,0BAA0B,SAAS;AACnC,4BAA4B,SAAS;AACrC,gCAAgC,SAAS;AACzC,6BAA6B,SAAS;AACtC,4BAA4B,SAAS;AACrC,2BAA2B,SAAS;AACpC,2BAA2B,SAAS;AACpC,0BAA0B,SAAS;AACnC,yBAAyB,SAAS;AAClC,8BAA8B,SAAS;AACvC,8BAA8B,SAAS;AACvC,wBAAwB,SAAS,oCAAoC,QAAQ;AAC7E,+BAA+B,SAAS,8DAA8D,WAAW,SAAS,QAAQ;AAClI,6BAA6B,SAAS;AACtC,iCAAiC,SAAS;AAC1C,4BAA4B,SAAS,iBAAiB,SAAS;AAC/D,+BAA+B,SAAS;AACxC,yBAAyB,SAAS,uCAAuC,SAAS;AAClF,yBAAyB,SAAS,0BAA0B,SAAS;AACrE,+BAA+B,SAAS,oCAAoC,QAAQ;AACpF,2BAA2B,SAAS;AACpC,kCAAkC,SAAS,YAAY,MAAM,uCAAuC,QAAQ;AAC5G,kCAAkC,SAAS,YAAY,MAAM,qBAAqB,QAAQ;AAC1F,yCAAyC,SAAS,YAAY,MAAM,gCAAgC,QAAQ;AAC5G,yCAAyC,SAAS,YAAY,MAAM,uBAAuB,QAAQ;AACnG,0BAA0B,SAAS;AACnC,yBAAyB,SAAS;AAClC,qCAAqC,SAAS,iDAAiD,UAAU;AACzG,qCAAqC,SAAS;AAC9C,+BAA+B,SAAS;AACxC;AACA,CAAC;;;AAGD;;AAEA;;AAEA;AACA,+CAA+C;AAC/C;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+BAA+B;AAC/B;;AAEA;;AAEA;AACA;AACA;AACA,sCAAsC,aAAa,QAAQ,uBAAuB;AAClF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA,kCAAkC,aAAa,QAAQ,yBAAyB;AAChF;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA,qCAAqC,4CAA4C,MAAM,QAAQ;AAC/F;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA,oGAAoG;;AAEpG,8BAA8B,gCAAgC,iBAAiB,YAAY;AAC3F;;;;;;;;;ACj1Ba;;AAEb,iBAAiB,mBAAO,CAAC,IAAY;AACrC,eAAe,mBAAO,CAAC,IAAU;AACjC,iBAAiB,mBAAO,CAAC,GAAY;;;AAGrC;;;AAGA,cAAc;;AAEd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,KAAK;AACvC;;AAEA;;AAEA,yFAAyF,2EAA2E;AACpK;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA,YAAY;;AAEZ;AACA;AACA,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC;AACA;;AAEA;AACA;;;AAGA,gBAAgB;;AAEhB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,eAAe;;AAEf;AACA;AACA;;AAEA,YAAY,6BAA6B;AACzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAe,iCAAiC;;AAEhD;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B;AAC3B,aAAa;;AAEb;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA,aAAa;AACb;;;AAGA,uBAAuB;;AAEvB;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA,uCAAuC;;AAEvC,sCAAsC;;AAEtC,0CAA0C;;;;;;;;AC9Q1C;AACA;;AAEA,MAAM;EAAEkF,OAAO;EAAE5D,KAAK,EAAE6D,aAAa;EAAEC;AAAgB,CAAC,GAAGnF,mBAAO,CAAC,IAAmB,CAAC;AACvF,MAAM;EAAE8B,UAAU;EAAEQ,WAAW;EAAEjB;AAAM,CAAC,GAAGrB,mBAAO,CAAC,IAAiB,CAAC;AACrE,MAAMoF,eAAe,GAAGpF,mBAAO,CAAC,IAA6B,CAAC;AAC9D,MAAMqF,GAAG,GAAGrF,mBAAO,CAAC,IAAK,CAAC;;AAE1B;AACA,MAAMsF,eAAe,GAAG,IAAIF,eAAe,CAAC,CAAC;;AAE7C;AACA;AACA;AACA;AACA,eAAeG,sBAAsBA,CAACxD,KAAK,EAAEyD,OAAO,EAAE;EACpD,MAAMC,SAAS,GAAG3E,IAAI,CAAC4E,GAAG,CAAC,CAAC;EAE5B,IAAI;IACF5D,UAAU,CAACC,KAAK,EAAE,wBAAwB,CAAC;;IAE3C;IACA,MAAM4D,WAAW,GAAG5D,KAAK,CAACK,qBAAqB,IAAI,CAAC,CAAC;IACrD,MAAMwD,gBAAgB,GAAGC,qBAAqB,CAACF,WAAW,CAAC;IAE3D,IAAIC,gBAAgB,CAACvE,KAAK,EAAE;MAC1B,MAAMkB,QAAQ,GAAG4C,eAAe,CAC9B,0BAA0B,EAC1BS,gBAAgB,CAACvE,KAAK,CAACyE,OACzB,CAAC;MACDxD,WAAW,CAACC,QAAQ,EAAE,wBAAwB,EAAEzB,IAAI,CAAC4E,GAAG,CAAC,CAAC,GAAGD,SAAS,CAAC;MACvE,OAAOlD,QAAQ;IACjB;IAEA,MAAM;MACJwD,QAAQ;MACRC,SAAS;MACTC,MAAM;MACNC,QAAQ;MACRC,SAAS;MACTC,KAAK;MACLC;IACF,CAAC,GAAGT,gBAAgB,CAACU,KAAK;;IAE1B;IACA,MAAMC,YAAY,GAAG,MAAMC,0BAA0B,CACnDT,QAAQ,EACRC,SAAS,EACTC,MAAM,EACN;MAAEC,QAAQ;MAAEC,SAAS;MAAEC,KAAK;MAAEC;IAAO,CACvC,CAAC;IAED,MAAM9D,QAAQ,GAAG0C,OAAO,CAACsB,YAAY,CAAC;IACtCjE,WAAW,CAACC,QAAQ,EAAE,wBAAwB,EAAEzB,IAAI,CAAC4E,GAAG,CAAC,CAAC,GAAGD,SAAS,CAAC;IACvE,OAAOlD,QAAQ;EAEjB,CAAC,CAAC,OAAOkE,GAAG,EAAE;IACZpF,KAAK,CAAC,sCAAsC,EAAEoF,GAAG,EAAE;MACjDd,WAAW,EAAE5D,KAAK,CAACK;IACrB,CAAC,CAAC;IAEF,MAAMG,QAAQ,GAAG2C,aAAa,CAC5B,8CAA8C,EAC9C,GAAG,EACH,sBACF,CAAC;IACD5C,WAAW,CAACC,QAAQ,EAAE,wBAAwB,EAAEzB,IAAI,CAAC4E,GAAG,CAAC,CAAC,GAAGD,SAAS,CAAC;IACvE,OAAOlD,QAAQ;EACjB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASsD,qBAAqBA,CAACF,WAAW,EAAE;EAC1C,MAAMe,MAAM,GAAGrB,GAAG,CAACsB,MAAM,CAAC;IACxBZ,QAAQ,EAAEV,GAAG,CAACuB,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC;IAClDf,SAAS,EAAEX,GAAG,CAACuB,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,GAAG,CAAC,CAACC,QAAQ,CAAC,CAAC;IACrDd,MAAM,EAAEZ,GAAG,CAACuB,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,KAAK,CAAC,CAACE,OAAO,CAAC,IAAI,CAAC;IAAE;IACxDd,QAAQ,EAAEb,GAAG,CAAC4B,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC;IACrDf,SAAS,EAAEd,GAAG,CAAC4B,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;IAChDd,KAAK,EAAEf,GAAG,CAACuB,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,GAAG,CAAC,CAACE,OAAO,CAAC,GAAG,CAAC;IAChDX,MAAM,EAAEhB,GAAG,CAACuB,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC,CAACG,OAAO,CAAC,CAAC;EACvC,CAAC,CAAC;EAEF,OAAON,MAAM,CAACS,QAAQ,CAACxB,WAAW,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAea,0BAA0BA,CAACT,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEmB,OAAO,GAAG,CAAC,CAAC,EAAE;EACnF,IAAI;IACF;IACA,MAAMC,OAAO,GAAG,MAAM/B,eAAe,CAACgC,gBAAgB,CAAC,QAAQ,EAAE;MAC/DlB,KAAK,EAAEgB,OAAO,CAAChB,KAAK,GAAG,CAAC,CAAE;IAC5B,CAAC,CAAC;;IAEF;IACA,MAAMmB,YAAY,GAAGF,OAAO,CAACG,KAAK,CAC/BxE,MAAM,CAACyE,IAAI,IAAI;MACd,IAAI,CAACA,IAAI,CAAC1B,QAAQ,IAAI,CAAC0B,IAAI,CAACzB,SAAS,EAAE,OAAO,KAAK;MAEnD,MAAM0B,QAAQ,GAAGC,iBAAiB,CAChC5B,QAAQ,EACRC,SAAS,EACTyB,IAAI,CAAC1B,QAAQ,EACb0B,IAAI,CAACzB,SACP,CAAC;MAED,OAAO0B,QAAQ,IAAIzB,MAAM;IAC3B,CAAC,CAAC,CACD2B,GAAG,CAACH,IAAI,KAAK;MACZI,EAAE,EAAEJ,IAAI,CAACI,EAAE;MACXC,UAAU,EAAEL,IAAI,CAACK,UAAU;MAC3B/B,QAAQ,EAAE0B,IAAI,CAAC1B,QAAQ;MACvBC,SAAS,EAAEyB,IAAI,CAACzB,SAAS;MACzBG,SAAS,EAAEsB,IAAI,CAACtB,SAAS;MACzBD,QAAQ,EAAEuB,IAAI,CAACvB,QAAQ;MACvBrF,SAAS,EAAE4G,IAAI,CAAC5G,SAAS;MACzBkH,MAAM,EAAEN,IAAI,CAACM,MAAM;MACnBC,OAAO,EAAEP,IAAI,CAACO,OAAO,IAAI,EAAE;MAC3BC,aAAa,EAAER,IAAI,CAACQ,aAAa,IAAI,EAAE;MACvCP,QAAQ,EAAEC,iBAAiB,CAAC5B,QAAQ,EAAEC,SAAS,EAAEyB,IAAI,CAAC1B,QAAQ,EAAE0B,IAAI,CAACzB,SAAS,CAAC;MAC/EkC,OAAO,EAAET,IAAI,CAACS;IAChB,CAAC,CAAC,CAAC;;IAEL;IACA,IAAIC,cAAc,GAAGZ,YAAY;IACjC,IAAIH,OAAO,CAAClB,QAAQ,EAAE;MACpBiC,cAAc,GAAGZ,YAAY,CAACvE,MAAM,CAACoF,KAAK,IAAIA,KAAK,CAAClC,QAAQ,KAAKkB,OAAO,CAAClB,QAAQ,CAAC;IACpF;;IAEA;IACA,IAAIkB,OAAO,CAACjB,SAAS,EAAE;MACrBgC,cAAc,GAAGA,cAAc,CAACnF,MAAM,CAACoF,KAAK,IAAIA,KAAK,CAACjC,SAAS,KAAKiB,OAAO,CAACjB,SAAS,CAAC;IACxF;;IAEA;IACAgC,cAAc,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACZ,QAAQ,GAAGa,CAAC,CAACb,QAAQ,CAAC;;IAEtD;IACA,MAAMrB,MAAM,GAAGe,OAAO,CAACf,MAAM,IAAI,CAAC;IAClC,MAAMD,KAAK,GAAGgB,OAAO,CAAChB,KAAK,IAAI,GAAG;IAClC,MAAMoC,eAAe,GAAGL,cAAc,CAACM,KAAK,CAACpC,MAAM,EAAEA,MAAM,GAAGD,KAAK,CAAC;;IAEpE;IACA,OAAO;MACLsC,MAAM,EAAE;QAAE3C,QAAQ;QAAEC;MAAU,CAAC;MAC/BC,MAAM;MACN0C,WAAW,EAAEH,eAAe;MAC5BI,UAAU,EAAET,cAAc,CAAC/E,MAAM;MACjCyF,UAAU,EAAE;QACVH,MAAM,EAAE;UAAE3C,QAAQ;UAAEC;QAAU,CAAC;QAC/BC,MAAM;QACN6C,IAAI,EAAE;MACR,CAAC;MACDC,UAAU,EAAE;QACV3C,KAAK;QACLC,MAAM;QACN2C,KAAK,EAAEb,cAAc,CAAC/E,MAAM;QAC5B6F,OAAO,EAAE5C,MAAM,GAAGD,KAAK,GAAG+B,cAAc,CAAC/E;MAC3C,CAAC;MACD8F,OAAO,EAAE;QACPC,WAAW,EAAEhB,cAAc,CAAC/E,MAAM;QAClCgG,aAAa,EAAEZ,eAAe,CAACpF,MAAM;QACrCiG,eAAe,EAAEb,eAAe,CAACpF,MAAM,GAAG,CAAC,GAAGoF,eAAe,CAAC,CAAC,CAAC,CAACd,QAAQ,GAAG,IAAI;QAChF4B,eAAe,EAAEnB,cAAc,CAAC/E,MAAM,GAAG,CAAC,GACxC+E,cAAc,CAACoB,MAAM,CAAC,CAACC,GAAG,EAAEpB,KAAK,KAAKoB,GAAG,GAAGpB,KAAK,CAACV,QAAQ,EAAE,CAAC,CAAC,GAAGS,cAAc,CAAC/E,MAAM,GAAG,CAAC;QAC5FqG,oBAAoB,EAAEC,6BAA6B,CAACvB,cAAc,CAAC;QACnEwB,qBAAqB,EAAEC,8BAA8B,CAACzB,cAAc;MACtE;IACF,CAAC;EACH,CAAC,CAAC,OAAO1B,GAAG,EAAE;IACZpF,KAAK,CAAC,0CAA0C,EAAEoF,GAAG,EAAE;MAAEV,QAAQ;MAAEC,SAAS;MAAEC;IAAO,CAAC,CAAC;IACvF,MAAMQ,GAAG;EACX;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkB,iBAAiBA,CAACkC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;EACjD,MAAMC,CAAC,GAAG,OAAO,CAAC,CAAC;EACnB,MAAMC,EAAE,GAAGL,IAAI,GAAGM,IAAI,CAACC,EAAE,GAAG,GAAG;EAC/B,MAAMC,EAAE,GAAGN,IAAI,GAAGI,IAAI,CAACC,EAAE,GAAG,GAAG;EAC/B,MAAME,EAAE,GAAG,CAACP,IAAI,GAAGF,IAAI,IAAIM,IAAI,CAACC,EAAE,GAAG,GAAG;EACxC,MAAMG,EAAE,GAAG,CAACP,IAAI,GAAGF,IAAI,IAAIK,IAAI,CAACC,EAAE,GAAG,GAAG;EAExC,MAAM9B,CAAC,GAAG6B,IAAI,CAACK,GAAG,CAACF,EAAE,GAAG,CAAC,CAAC,GAAGH,IAAI,CAACK,GAAG,CAACF,EAAE,GAAG,CAAC,CAAC,GACnCH,IAAI,CAACM,GAAG,CAACP,EAAE,CAAC,GAAGC,IAAI,CAACM,GAAG,CAACJ,EAAE,CAAC,GAC3BF,IAAI,CAACK,GAAG,CAACD,EAAE,GAAG,CAAC,CAAC,GAAGJ,IAAI,CAACK,GAAG,CAACD,EAAE,GAAG,CAAC,CAAC;EAC7C,MAAMG,CAAC,GAAG,CAAC,GAAGP,IAAI,CAACQ,KAAK,CAACR,IAAI,CAACS,IAAI,CAACtC,CAAC,CAAC,EAAE6B,IAAI,CAACS,IAAI,CAAC,CAAC,GAAGtC,CAAC,CAAC,CAAC;EAExD,OAAO2B,CAAC,GAAGS,CAAC;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAShB,6BAA6BA,CAACmB,MAAM,EAAE;EAC7C,MAAMC,YAAY,GAAG;IAAEC,GAAG,EAAE,CAAC;IAAEC,MAAM,EAAE,CAAC;IAAEC,IAAI,EAAE;EAAE,CAAC;EAEnDJ,MAAM,CAACK,OAAO,CAAC9C,KAAK,IAAI;IACtB,IAAI0C,YAAY,CAAC1C,KAAK,CAAClC,QAAQ,CAAC,KAAKiF,SAAS,EAAE;MAC9CL,YAAY,CAAC1C,KAAK,CAAClC,QAAQ,CAAC,EAAE;IAChC;EACF,CAAC,CAAC;EAEF,OAAO4E,YAAY;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASlB,8BAA8BA,CAACiB,MAAM,EAAE;EAC9C,MAAMC,YAAY,GAAG;IAAE,KAAK,EAAE,CAAC;IAAE,IAAI,EAAE,CAAC;IAAE,IAAI,EAAE;EAAE,CAAC;EAEnDD,MAAM,CAACK,OAAO,CAAC9C,KAAK,IAAI;IACtB,IAAI0C,YAAY,CAAC1C,KAAK,CAACjC,SAAS,CAAC,KAAKgF,SAAS,EAAE;MAC/CL,YAAY,CAAC1C,KAAK,CAACjC,SAAS,CAAC,EAAE;IACjC;EACF,CAAC,CAAC;EAEF,OAAO2E,YAAY;AACrB;AAEApI,MAAM,CAACC,OAAO,GAAG;EACf4C;AACF,CAAC,C;;;;;;;ACrPD,MAAM6F,GAAG,GAAGpL,mBAAO,CAAC,IAAS,CAAC;;AAE9B;AACA,MAAMqL,SAAS,GAAG;EAChB7H,MAAM,EAAEN,OAAO,CAACC,GAAG,CAACM,MAAM,IAAI;AAChC,CAAC;;AAED;AACA,IAAIP,MAAsC,IAAIA,OAAO,CAACC,GAAG,CAAC6B,UAAU,EAAE;EACpEqG,SAAS,CAACC,QAAQ,GAAG,uBAAuB;EAC5CD,SAAS,CAACE,WAAW,GAAG,OAAO;EAC/BF,SAAS,CAACG,eAAe,GAAG,OAAO;AACrC;AAEAJ,GAAG,CAACK,MAAM,CAACC,MAAM,CAACL,SAAS,CAAC;;AAE5B;AACA,MAAMM,QAAQ,GAAG,IAAIP,GAAG,CAACQ,QAAQ,CAACC,cAAc,CAAC,CAAC;;AAElD;AACA,MAAMC,EAAE,GAAG,IAAIV,GAAG,CAACW,EAAE,CAAC,CAAC;;AAEvB;AACA,MAAMC,MAAM,GAAG,IAAIZ,GAAG,CAACa,MAAM,CAAC,CAAC;AAE/BvJ,MAAM,CAACC,OAAO,GAAG;EACfyI,GAAG;EACHO,QAAQ;EACRG,EAAE;EACFE,MAAM;EACNX;AACF,CAAC,C;;;;;;;;AC/BY;;AAEb,eAAe,mBAAO,CAAC,IAAuB;AAC9C,cAAc,mBAAO,CAAC,IAAsB;;AAE5C,YAAY,mBAAO,CAAC,GAAO;AAC3B,eAAe,mBAAO,CAAC,IAAW;AAClC,gBAAgB,mBAAO,CAAC,IAAY;AACpC,eAAe,mBAAO,CAAC,IAAW;AAClC,YAAY,mBAAO,CAAC,IAAQ;;;AAG5B;;;AAGA;;AAEA;;AAEA;;AAEA,iBAAiB,iCAAiC;AAClD,KAAK;;AAEL;;AAEA,mBAAmB;AACnB,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA,gBAAgB,8BAA8B;;AAE9C;;AAEA;AACA;AACA;;AAEA,4BAA4B,mCAAmC;AAC/D;AACA,oEAAoE,EAAE;AACtE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mEAAmE,iBAAiB;AACpF;;AAEA,yBAAyB;AACzB;;AAEA;;AAEA;AACA,gDAAgD,oBAAoB,IAAI;AACxE;;AAEA;;AAEA;AACA;AACA,mEAAmE,iBAAiB;AACpF;;AAEA,yBAAyB;AACzB;;AAEA;;AAEA;;AAEA;AACA;AACA,iBAAiB;AACjB;;AAEA,wCAAwC,kDAAkD,oBAAoB,KAAK,IAAI;AACvH;;AAEA;;AAEA;AACA,wBAAwB,mCAAmC;AAC3D;;AAEA;;AAEA;AACA,oEAAoE,EAAE;AACtE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,6CAA6C;AAC3E;AACA;;AAEA;;AAEA;AACA;;AAEA,4BAA4B,kBAAkB;AAC9C;AACA,wBAAwB,sBAAsB;;AAE9C,oCAAoC,EAAE,EAAE,2BAA2B;AACnE,yDAAyD,GAAG;AAC5D;AACA,oFAAoF,GAAG;AACvF;AACA;AACA;AACA,sEAAsE,GAAG;AACzE;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,8DAA8D,cAAc;AAC5E;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,+CAA+C,+BAA+B;AAC9E;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,kCAAkC,kBAAkB;AACpD;AACA,KAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;;AAEA,wDAAwD,cAAc;AACtE;AACA;;AAEA,0BAA0B,MAAM;AAChC,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA,4BAA4B,wCAAwC;AACpE;AACA;AACA;AACA;AACA,qDAAqD,gDAAgD;AACrG;AACA;AACA,oDAAoD,iBAAiB;AACrE;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA,+BAA+B,SAAS;AACxC,+BAA+B,SAAS;AACxC,iCAAiC,SAAS;AAC1C,+BAA+B,SAAS;AACxC,iCAAiC,SAAS,iBAAiB,QAAQ;AACnE;AACA,CAAC;;;AAGD;;AAEA,yCAAyC,cAAc;;AAEvD;;AAEA;AACA,iBAAiB;AACjB;;AAEA;;AAEA;AACA,iBAAiB;AACjB;;AAEA;;AAEA;AACA;;AAEA,iBAAiB,kBAAkB;;AAEnC;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2BAA2B,2BAA2B;AACtD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iBAAiB,sCAAsC,oBAAoB;AAC3E;;AAEA;;AAEA;AACA,iBAAiB;AACjB;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa,6DAA6D,iBAAiB;AAC3F;;;;;;;;;AC3WA,gC;;;;;;;;ACAa;;AAEb,eAAe,mBAAO,CAAC,IAAuB;;AAE9C,eAAe,mBAAO,CAAC,IAAU;AACjC,YAAY,mBAAO,CAAC,IAAO;;;AAG3B;;;AAGA,cAAc,sCAAsC;;AAEpD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,aAAa,GAAG,SAAS;AACtD;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qEAAqE;;AAErE;AACA;;;AAGA,WAAW;;AAEX;AACA;;;AAGA,eAAe,uCAAuC;;AAEtD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,8CAA8C,kBAAkB,YAAY;AAC5E;;AAEA;;AAEA;AACA;AACA,8CAA8C,kBAAkB;AAChE;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;;AAEA,qEAAqE;;AAErE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;;AAGA,YAAY;;AAEZ;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,6CAA6C,uFAAuF;AACpI;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oDAAoD;AACpD;;AAEA,6CAA6C,gGAAgG;AAC7I;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,2BAA2B;AAC/C;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oDAAoD;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;AC1RA;AACA;;AAEA,MAAM;EAAEM;AAAS,CAAC,GAAG3L,mBAAO,CAAC,IAAe,CAAC;AAC7C,MAAM;EAAE4B,IAAI;EAAEP,KAAK;EAAEQ;AAAM,CAAC,GAAG7B,mBAAO,CAAC,IAAiB,CAAC;AACzD,MAAMD,WAAW,GAAGC,mBAAO,CAAC,IAAuB,CAAC;;AAEpD;AACA;AACA;AACA,MAAMoF,eAAe,CAAC;EACpB8G,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,SAAS,GAAGpM,WAAW,CAAC6D,iBAAiB;IAC9C,IAAI,CAACwI,MAAM,GAAGT,QAAQ;EACxB;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMU,OAAOA,CAAC5E,IAAI,EAAE;IAClB,IAAI;MACF5F,KAAK,CAAC,kBAAkB,EAAE;QAAEsK,SAAS,EAAE,IAAI,CAACA,SAAS;QAAEG,MAAM,EAAE7E,IAAI,CAACI;MAAG,CAAC,CAAC;MAEzE,MAAM0E,MAAM,GAAG;QACbC,SAAS,EAAE,IAAI,CAACL,SAAS;QACzBM,IAAI,EAAEhF,IAAI;QACViF,YAAY,EAAE;MAChB,CAAC;MAED,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACP,MAAM,CAACQ,GAAG,CAACL,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC;MAEtDjL,IAAI,CAAC,kCAAkC,EAAE;QACvC0K,MAAM,EAAE7E,IAAI,CAACI,EAAE;QACfiF,QAAQ,EAAE,CAAC,CAACH,MAAM,CAACI;MACrB,CAAC,CAAC;MAEF,OAAO;QACL9H,OAAO,EAAE,IAAI;QACb+H,IAAI,EAAEvF,IAAI;QACVqF,QAAQ,EAAE,CAAC,CAACH,MAAM,CAACI,UAAU;QAC7BE,YAAY,EAAEN,MAAM,CAACI;MACvB,CAAC;IACH,CAAC,CAAC,OAAOtG,GAAG,EAAE;MACZpF,KAAK,CAAC,gCAAgC,EAAEoF,GAAG,EAAE;QAC3C0F,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBG,MAAM,EAAE7E,IAAI,CAACI;MACf,CAAC,CAAC;MAEF,MAAM,IAAIxE,KAAK,CAAC,kCAAkCoD,GAAG,CAAC/F,OAAO,EAAE,CAAC;IAClE;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMwM,OAAOA,CAACrF,EAAE,EAAE;IAChB,IAAI;MACFhG,KAAK,CAAC,kBAAkB,EAAE;QAAEsK,SAAS,EAAE,IAAI,CAACA,SAAS;QAAEtE;MAAG,CAAC,CAAC;MAE5D,MAAM0E,MAAM,GAAG;QACbC,SAAS,EAAE,IAAI,CAACL,SAAS;QACzBgB,GAAG,EAAE;UAAEtF;QAAG;MACZ,CAAC;MAED,MAAM8E,MAAM,GAAG,MAAM,IAAI,CAACP,MAAM,CAACgB,GAAG,CAACb,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC;MAEtD,IAAI,CAACF,MAAM,CAACF,IAAI,EAAE;QAChB5K,KAAK,CAAC,gBAAgB,EAAE;UAAEgG;QAAG,CAAC,CAAC;QAC/B,OAAO,IAAI;MACb;MAEAjG,IAAI,CAAC,sCAAsC,EAAE;QAAEiG;MAAG,CAAC,CAAC;MACpD,OAAO8E,MAAM,CAACF,IAAI;IACpB,CAAC,CAAC,OAAOhG,GAAG,EAAE;MACZpF,KAAK,CAAC,kCAAkC,EAAEoF,GAAG,EAAE;QAC7C0F,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBtE;MACF,CAAC,CAAC;MAEF,MAAM,IAAIxE,KAAK,CAAC,kCAAkCoD,GAAG,CAAC/F,OAAO,EAAE,CAAC;IAClE;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAM2M,UAAUA,CAACxF,EAAE,EAAE;IACnB,IAAI;MACFhG,KAAK,CAAC,qBAAqB,EAAE;QAAEsK,SAAS,EAAE,IAAI,CAACA,SAAS;QAAEtE;MAAG,CAAC,CAAC;MAE/D,MAAM0E,MAAM,GAAG;QACbC,SAAS,EAAE,IAAI,CAACL,SAAS;QACzBgB,GAAG,EAAE;UAAEtF;QAAG,CAAC;QACX6E,YAAY,EAAE;MAChB,CAAC;MAED,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACP,MAAM,CAACkB,MAAM,CAACf,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC;MAEzDjL,IAAI,CAAC,oCAAoC,EAAE;QACzCiG,EAAE;QACF0F,OAAO,EAAE,CAAC,CAACZ,MAAM,CAACI;MACpB,CAAC,CAAC;MAEF,OAAO;QACL9H,OAAO,EAAE,IAAI;QACbsI,OAAO,EAAE,CAAC,CAACZ,MAAM,CAACI,UAAU;QAC5BS,WAAW,EAAEb,MAAM,CAACI;MACtB,CAAC;IACH,CAAC,CAAC,OAAOtG,GAAG,EAAE;MACZpF,KAAK,CAAC,qCAAqC,EAAEoF,GAAG,EAAE;QAChD0F,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBtE;MACF,CAAC,CAAC;MAEF,MAAM,IAAIxE,KAAK,CAAC,qCAAqCoD,GAAG,CAAC/F,OAAO,EAAE,CAAC;IACrE;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAM+M,kBAAkBA,CAAC3F,UAAU,EAAEV,OAAO,GAAG,CAAC,CAAC,EAAE;IACjD,IAAI;MACFvF,KAAK,CAAC,6BAA6B,EAAE;QACnCsK,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBrE,UAAU;QACVV;MACF,CAAC,CAAC;MAEF,MAAMmF,MAAM,GAAG;QACbC,SAAS,EAAE,IAAI,CAACL,SAAS;QACzBuB,SAAS,EAAE,eAAe;QAC1BC,sBAAsB,EAAE,0BAA0B;QAClDC,yBAAyB,EAAE;UACzB,aAAa,EAAE9F;QACjB;MACF,CAAC;;MAED;MACA,IAAIV,OAAO,CAACyG,cAAc,EAAE;QAC1BtB,MAAM,CAACuB,gBAAgB,GAAG,KAAK;MACjC;;MAEA;MACA,IAAI1G,OAAO,CAAChB,KAAK,EAAE;QACjBmG,MAAM,CAACwB,KAAK,GAAG3G,OAAO,CAAChB,KAAK;MAC9B;;MAEA;MACA,IAAIgB,OAAO,CAAC4G,iBAAiB,EAAE;QAC7BzB,MAAM,CAAC0B,iBAAiB,GAAG7G,OAAO,CAAC4G,iBAAiB;MACtD;;MAEA;MACA,IAAI5G,OAAO,CAACW,MAAM,EAAE;QAClBwE,MAAM,CAAC2B,gBAAgB,GAAG,mBAAmB;QAC7C3B,MAAM,CAAC4B,wBAAwB,GAAG;UAAE,SAAS,EAAE;QAAS,CAAC;QACzD5B,MAAM,CAACqB,yBAAyB,CAAC,SAAS,CAAC,GAAGxG,OAAO,CAACW,MAAM;MAC9D;MAEA,MAAM4E,MAAM,GAAG,MAAM,IAAI,CAACP,MAAM,CAACgC,KAAK,CAAC7B,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC;MAExDjL,IAAI,CAAC,mCAAmC,EAAE;QACxCkG,UAAU;QACVuG,SAAS,EAAE1B,MAAM,CAAC2B,KAAK,CAAClL,MAAM;QAC9B6F,OAAO,EAAE,CAAC,CAAC0D,MAAM,CAAC4B;MACpB,CAAC,CAAC;MAEF,OAAO;QACL/G,KAAK,EAAEmF,MAAM,CAAC2B,KAAK;QACnBE,gBAAgB,EAAE7B,MAAM,CAAC4B,gBAAgB;QACzCE,KAAK,EAAE9B,MAAM,CAAC+B,KAAK;QACnBC,YAAY,EAAEhC,MAAM,CAACiC;MACvB,CAAC;IACH,CAAC,CAAC,OAAOnI,GAAG,EAAE;MACZpF,KAAK,CAAC,mCAAmC,EAAEoF,GAAG,EAAE;QAC9C0F,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBrE;MACF,CAAC,CAAC;MAEF,MAAM,IAAIzE,KAAK,CAAC,mCAAmCoD,GAAG,CAAC/F,OAAO,EAAE,CAAC;IACnE;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMmO,iBAAiBA,CAACC,OAAO,EAAE1H,OAAO,GAAG,CAAC,CAAC,EAAE;IAC7C,IAAI;MACFvF,KAAK,CAAC,4BAA4B,EAAE;QAClCsK,SAAS,EAAE,IAAI,CAACA,SAAS;QACzB2C,OAAO;QACP1H;MACF,CAAC,CAAC;MAEF,MAAMmF,MAAM,GAAG;QACbC,SAAS,EAAE,IAAI,CAACL,SAAS;QACzBuB,SAAS,EAAE,cAAc;QACzBC,sBAAsB,EAAE,oBAAoB;QAC5CC,yBAAyB,EAAE;UACzB,UAAU,EAAEkB;QACd;MACF,CAAC;;MAED;MACA,IAAI1H,OAAO,CAAC2H,QAAQ,EAAE;QACpBxC,MAAM,CAACoB,sBAAsB,IAAI,8BAA8B;QAC/DpB,MAAM,CAAC4B,wBAAwB,GAAG;UAAE,YAAY,EAAE;QAAY,CAAC;QAC/D5B,MAAM,CAACqB,yBAAyB,CAAC,WAAW,CAAC,GAAGxG,OAAO,CAAC2H,QAAQ;MAClE;MAEA,IAAI3H,OAAO,CAAC4H,MAAM,EAAE;QAClB,IAAI5H,OAAO,CAAC2H,QAAQ,EAAE;UACpBxC,MAAM,CAACoB,sBAAsB,IAAI,4BAA4B;QAC/D,CAAC,MAAM;UACLpB,MAAM,CAACoB,sBAAsB,IAAI,4BAA4B;UAC7DpB,MAAM,CAAC4B,wBAAwB,GAAG;YAAE,YAAY,EAAE;UAAY,CAAC;QACjE;QACA5B,MAAM,CAACqB,yBAAyB,CAAC,SAAS,CAAC,GAAGxG,OAAO,CAAC4H,MAAM;MAC9D;;MAEA;MACA,IAAI5H,OAAO,CAACyG,cAAc,EAAE;QAC1BtB,MAAM,CAACuB,gBAAgB,GAAG,KAAK;MACjC;MAEA,IAAI1G,OAAO,CAAChB,KAAK,EAAE;QACjBmG,MAAM,CAACwB,KAAK,GAAG3G,OAAO,CAAChB,KAAK;MAC9B;MAEA,MAAMuG,MAAM,GAAG,MAAM,IAAI,CAACP,MAAM,CAACgC,KAAK,CAAC7B,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC;MAExDjL,IAAI,CAAC,mCAAmC,EAAE;QACxCkN,OAAO;QACPT,SAAS,EAAE1B,MAAM,CAAC2B,KAAK,CAAClL;MAC1B,CAAC,CAAC;MAEF,OAAO;QACLoE,KAAK,EAAEmF,MAAM,CAAC2B,KAAK;QACnBE,gBAAgB,EAAE7B,MAAM,CAAC4B,gBAAgB;QACzCE,KAAK,EAAE9B,MAAM,CAAC+B;MAChB,CAAC;IACH,CAAC,CAAC,OAAOjI,GAAG,EAAE;MACZpF,KAAK,CAAC,mCAAmC,EAAEoF,GAAG,EAAE;QAC9C0F,SAAS,EAAE,IAAI,CAACA,SAAS;QACzB2C;MACF,CAAC,CAAC;MAEF,MAAM,IAAIzL,KAAK,CAAC,mCAAmCoD,GAAG,CAAC/F,OAAO,EAAE,CAAC;IACnE;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAM4G,gBAAgBA,CAACS,MAAM,EAAEX,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3C,IAAI;MACFvF,KAAK,CAAC,2BAA2B,EAAE;QACjCsK,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBpE,MAAM;QACNX;MACF,CAAC,CAAC;MAEF,MAAMmF,MAAM,GAAG;QACbC,SAAS,EAAE,IAAI,CAACL,SAAS;QACzBuB,SAAS,EAAE,aAAa;QACxBC,sBAAsB,EAAE,mBAAmB;QAC3CQ,wBAAwB,EAAE;UACxB,SAAS,EAAE;QACb,CAAC;QACDP,yBAAyB,EAAE;UACzB,SAAS,EAAE7F;QACb;MACF,CAAC;;MAED;MACA,IAAIX,OAAO,CAAC2H,QAAQ,IAAI3H,OAAO,CAAC4H,MAAM,EAAE;QACtCzC,MAAM,CAAC4B,wBAAwB,CAAC,YAAY,CAAC,GAAG,WAAW;QAE3D,IAAI/G,OAAO,CAAC2H,QAAQ,IAAI3H,OAAO,CAAC4H,MAAM,EAAE;UACtCzC,MAAM,CAACoB,sBAAsB,IAAI,+CAA+C;UAChFpB,MAAM,CAACqB,yBAAyB,CAAC,WAAW,CAAC,GAAGxG,OAAO,CAAC2H,QAAQ;UAChExC,MAAM,CAACqB,yBAAyB,CAAC,SAAS,CAAC,GAAGxG,OAAO,CAAC4H,MAAM;QAC9D,CAAC,MAAM,IAAI5H,OAAO,CAAC2H,QAAQ,EAAE;UAC3BxC,MAAM,CAACoB,sBAAsB,IAAI,8BAA8B;UAC/DpB,MAAM,CAACqB,yBAAyB,CAAC,WAAW,CAAC,GAAGxG,OAAO,CAAC2H,QAAQ;QAClE,CAAC,MAAM,IAAI3H,OAAO,CAAC4H,MAAM,EAAE;UACzBzC,MAAM,CAACoB,sBAAsB,IAAI,4BAA4B;UAC7DpB,MAAM,CAACqB,yBAAyB,CAAC,SAAS,CAAC,GAAGxG,OAAO,CAAC4H,MAAM;QAC9D;MACF;MAEA,IAAI5H,OAAO,CAAChB,KAAK,EAAE;QACjBmG,MAAM,CAACwB,KAAK,GAAG3G,OAAO,CAAChB,KAAK;MAC9B;MAEA,MAAMuG,MAAM,GAAG,MAAM,IAAI,CAACP,MAAM,CAACgC,KAAK,CAAC7B,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC;MAExDjL,IAAI,CAAC,iCAAiC,EAAE;QACtCmG,MAAM;QACNsG,SAAS,EAAE1B,MAAM,CAAC2B,KAAK,CAAClL;MAC1B,CAAC,CAAC;MAEF,OAAO;QACLoE,KAAK,EAAEmF,MAAM,CAAC2B,KAAK;QACnBE,gBAAgB,EAAE7B,MAAM,CAAC4B,gBAAgB;QACzCE,KAAK,EAAE9B,MAAM,CAAC+B;MAChB,CAAC;IACH,CAAC,CAAC,OAAOjI,GAAG,EAAE;MACZpF,KAAK,CAAC,iCAAiC,EAAEoF,GAAG,EAAE;QAC5C0F,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBpE;MACF,CAAC,CAAC;MAEF,MAAM,IAAI1E,KAAK,CAAC,iCAAiCoD,GAAG,CAAC/F,OAAO,EAAE,CAAC;IACjE;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMuO,eAAeA,CAACzH,KAAK,EAAE;IAC3B,IAAI;MACF3F,KAAK,CAAC,0BAA0B,EAAE;QAChCsK,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBkC,SAAS,EAAE7G,KAAK,CAACpE;MACnB,CAAC,CAAC;MAEF,IAAI,CAACoE,KAAK,IAAIA,KAAK,CAACpE,MAAM,KAAK,CAAC,EAAE;QAChC,OAAO;UAAE6B,OAAO,EAAE,IAAI;UAAEiK,cAAc,EAAE,CAAC;UAAEC,gBAAgB,EAAE;QAAG,CAAC;MACnE;;MAEA;MACA,MAAMC,OAAO,GAAG,EAAE;MAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7H,KAAK,CAACpE,MAAM,EAAEiM,CAAC,IAAI,EAAE,EAAE;QACzCD,OAAO,CAACE,IAAI,CAAC9H,KAAK,CAACiB,KAAK,CAAC4G,CAAC,EAAEA,CAAC,GAAG,EAAE,CAAC,CAAC;MACtC;MAEA,IAAIH,cAAc,GAAG,CAAC;MACtB,IAAIC,gBAAgB,GAAG,EAAE;MAEzB,KAAK,MAAMI,KAAK,IAAIH,OAAO,EAAE;QAC3B,MAAM7C,MAAM,GAAG;UACbiD,YAAY,EAAE;YACZ,CAAC,IAAI,CAACrD,SAAS,GAAGoD,KAAK,CAAC3H,GAAG,CAACH,IAAI,KAAK;cACnCgI,UAAU,EAAE;gBACVhD,IAAI,EAAEhF;cACR;YACF,CAAC,CAAC;UACJ;QACF,CAAC;QAED,MAAMkF,MAAM,GAAG,MAAM,IAAI,CAACP,MAAM,CAACsD,UAAU,CAACnD,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC;QAE7DqC,cAAc,IAAIK,KAAK,CAACnM,MAAM;;QAE9B;QACA,IAAIuJ,MAAM,CAACgD,gBAAgB,IAAIhD,MAAM,CAACgD,gBAAgB,CAAC,IAAI,CAACxD,SAAS,CAAC,EAAE;UACtEgD,gBAAgB,CAACG,IAAI,CAAC,GAAG3C,MAAM,CAACgD,gBAAgB,CAAC,IAAI,CAACxD,SAAS,CAAC,CAAC;QACnE;MACF;MAEAvK,IAAI,CAAC,gCAAgC,EAAE;QACrCgO,UAAU,EAAEpI,KAAK,CAACpE,MAAM;QACxB8L,cAAc;QACdC,gBAAgB,EAAEA,gBAAgB,CAAC/L;MACrC,CAAC,CAAC;MAEF,OAAO;QACL6B,OAAO,EAAE,IAAI;QACbiK,cAAc;QACdC,gBAAgB;QAChBS,UAAU,EAAEpI,KAAK,CAACpE;MACpB,CAAC;IACH,CAAC,CAAC,OAAOqD,GAAG,EAAE;MACZpF,KAAK,CAAC,6BAA6B,EAAEoF,GAAG,EAAE;QACxC0F,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBkC,SAAS,EAAE7G,KAAK,CAACpE;MACnB,CAAC,CAAC;MAEF,MAAM,IAAIC,KAAK,CAAC,gCAAgCoD,GAAG,CAAC/F,OAAO,EAAE,CAAC;IAChE;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMmP,gBAAgBA,CAACC,GAAG,EAAE;IAC1B,IAAI;MACFjO,KAAK,CAAC,2BAA2B,EAAE;QACjCsK,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBkC,SAAS,EAAEyB,GAAG,CAAC1M;MACjB,CAAC,CAAC;MAEF,IAAI,CAAC0M,GAAG,IAAIA,GAAG,CAAC1M,MAAM,KAAK,CAAC,EAAE;QAC5B,OAAO;UAAE6B,OAAO,EAAE,IAAI;UAAE8K,YAAY,EAAE,CAAC;UAAEZ,gBAAgB,EAAE;QAAG,CAAC;MACjE;;MAEA;MACA,MAAMC,OAAO,GAAG,EAAE;MAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,GAAG,CAAC1M,MAAM,EAAEiM,CAAC,IAAI,EAAE,EAAE;QACvCD,OAAO,CAACE,IAAI,CAACQ,GAAG,CAACrH,KAAK,CAAC4G,CAAC,EAAEA,CAAC,GAAG,EAAE,CAAC,CAAC;MACpC;MAEA,IAAIU,YAAY,GAAG,CAAC;MACpB,IAAIZ,gBAAgB,GAAG,EAAE;MAEzB,KAAK,MAAMI,KAAK,IAAIH,OAAO,EAAE;QAC3B,MAAM7C,MAAM,GAAG;UACbiD,YAAY,EAAE;YACZ,CAAC,IAAI,CAACrD,SAAS,GAAGoD,KAAK,CAAC3H,GAAG,CAACC,EAAE,KAAK;cACjCmI,aAAa,EAAE;gBACb7C,GAAG,EAAE;kBAAEtF;gBAAG;cACZ;YACF,CAAC,CAAC;UACJ;QACF,CAAC;QAED,MAAM8E,MAAM,GAAG,MAAM,IAAI,CAACP,MAAM,CAACsD,UAAU,CAACnD,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC;QAE7DkD,YAAY,IAAIR,KAAK,CAACnM,MAAM;;QAE5B;QACA,IAAIuJ,MAAM,CAACgD,gBAAgB,IAAIhD,MAAM,CAACgD,gBAAgB,CAAC,IAAI,CAACxD,SAAS,CAAC,EAAE;UACtEgD,gBAAgB,CAACG,IAAI,CAAC,GAAG3C,MAAM,CAACgD,gBAAgB,CAAC,IAAI,CAACxD,SAAS,CAAC,CAAC;QACnE;MACF;MAEAvK,IAAI,CAAC,iCAAiC,EAAE;QACtCgO,UAAU,EAAEE,GAAG,CAAC1M,MAAM;QACtB2M,YAAY;QACZZ,gBAAgB,EAAEA,gBAAgB,CAAC/L;MACrC,CAAC,CAAC;MAEF,OAAO;QACL6B,OAAO,EAAE,IAAI;QACb8K,YAAY;QACZZ,gBAAgB;QAChBS,UAAU,EAAEE,GAAG,CAAC1M;MAClB,CAAC;IACH,CAAC,CAAC,OAAOqD,GAAG,EAAE;MACZpF,KAAK,CAAC,8BAA8B,EAAEoF,GAAG,EAAE;QACzC0F,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBkC,SAAS,EAAEyB,GAAG,CAAC1M;MACjB,CAAC,CAAC;MAEF,MAAM,IAAIC,KAAK,CAAC,iCAAiCoD,GAAG,CAAC/F,OAAO,EAAE,CAAC;IACjE;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMuP,SAASA,CAAC7I,OAAO,GAAG,CAAC,CAAC,EAAE;IAC5B,IAAI;MACFvF,KAAK,CAAC,oBAAoB,EAAE;QAC1BsK,SAAS,EAAE,IAAI,CAACA,SAAS;QACzB/E;MACF,CAAC,CAAC;MAEF,MAAMmF,MAAM,GAAG;QACbC,SAAS,EAAE,IAAI,CAACL;MAClB,CAAC;;MAED;MACA,IAAI/E,OAAO,CAAC8I,gBAAgB,EAAE;QAC5B3D,MAAM,CAAC2B,gBAAgB,GAAG9G,OAAO,CAAC8I,gBAAgB;MACpD;MAEA,IAAI9I,OAAO,CAAC+I,wBAAwB,EAAE;QACpC5D,MAAM,CAAC4B,wBAAwB,GAAG/G,OAAO,CAAC+I,wBAAwB;MACpE;MAEA,IAAI/I,OAAO,CAACgJ,yBAAyB,EAAE;QACrC7D,MAAM,CAACqB,yBAAyB,GAAGxG,OAAO,CAACgJ,yBAAyB;MACtE;;MAEA;MACA,IAAIhJ,OAAO,CAAChB,KAAK,EAAE;QACjBmG,MAAM,CAACwB,KAAK,GAAG3G,OAAO,CAAChB,KAAK;MAC9B;;MAEA;MACA,IAAIgB,OAAO,CAAC4G,iBAAiB,EAAE;QAC7BzB,MAAM,CAAC0B,iBAAiB,GAAG7G,OAAO,CAAC4G,iBAAiB;MACtD;MAEA,MAAMrB,MAAM,GAAG,MAAM,IAAI,CAACP,MAAM,CAACiE,IAAI,CAAC9D,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC;MAEvDjL,IAAI,CAAC,yBAAyB,EAAE;QAC9ByM,SAAS,EAAE1B,MAAM,CAAC2B,KAAK,CAAClL,MAAM;QAC9BuL,YAAY,EAAEhC,MAAM,CAACiC,YAAY;QACjC3F,OAAO,EAAE,CAAC,CAAC0D,MAAM,CAAC4B;MACpB,CAAC,CAAC;MAEF,OAAO;QACL/G,KAAK,EAAEmF,MAAM,CAAC2B,KAAK;QACnBE,gBAAgB,EAAE7B,MAAM,CAAC4B,gBAAgB;QACzCE,KAAK,EAAE9B,MAAM,CAAC+B,KAAK;QACnBC,YAAY,EAAEhC,MAAM,CAACiC;MACvB,CAAC;IACH,CAAC,CAAC,OAAOnI,GAAG,EAAE;MACZpF,KAAK,CAAC,sBAAsB,EAAEoF,GAAG,EAAE;QACjC0F,SAAS,EAAE,IAAI,CAACA;MAClB,CAAC,CAAC;MAEF,MAAM,IAAI9I,KAAK,CAAC,yBAAyBoD,GAAG,CAAC/F,OAAO,EAAE,CAAC;IACzD;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAM4P,iBAAiBA,CAACzI,EAAE,EAAE0I,gBAAgB,EAAEC,mBAAmB,GAAG,IAAI,EAAE;IACxE,IAAI;MACF3O,KAAK,CAAC,4BAA4B,EAAE;QAClCsK,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBtE,EAAE;QACF0I,gBAAgB;QAChBC;MACF,CAAC,CAAC;MAEF,MAAMjE,MAAM,GAAG;QACbC,SAAS,EAAE,IAAI,CAACL,SAAS;QACzBgB,GAAG,EAAE;UAAEtF;QAAG,CAAC;QACX4I,gBAAgB,EAAEF,gBAAgB,CAACG,UAAU;QAC7C9C,yBAAyB,EAAE2C,gBAAgB,CAACI,MAAM;QAClDjE,YAAY,EAAE;MAChB,CAAC;MAED,IAAI6D,gBAAgB,CAACK,KAAK,EAAE;QAC1BrE,MAAM,CAAC4B,wBAAwB,GAAGoC,gBAAgB,CAACK,KAAK;MAC1D;MAEA,IAAIJ,mBAAmB,EAAE;QACvBjE,MAAM,CAACsE,mBAAmB,GAAGL,mBAAmB,CAACE,UAAU;QAC3D,IAAIF,mBAAmB,CAACG,MAAM,EAAE;UAC9BpE,MAAM,CAACqB,yBAAyB,GAAAhN,aAAA,CAAAA,aAAA,KAC3B2L,MAAM,CAACqB,yBAAyB,GAChC4C,mBAAmB,CAACG,MAAM,CAC9B;QACH;QACA,IAAIH,mBAAmB,CAACI,KAAK,EAAE;UAC7BrE,MAAM,CAAC4B,wBAAwB,GAAAvN,aAAA,CAAAA,aAAA,KAC1B2L,MAAM,CAAC4B,wBAAwB,GAC/BqC,mBAAmB,CAACI,KAAK,CAC7B;QACH;MACF;MAEA,MAAMjE,MAAM,GAAG,MAAM,IAAI,CAACP,MAAM,CAACV,MAAM,CAACa,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC;MAEzDjL,IAAI,CAAC,uCAAuC,EAAE;QAC5CiG,EAAE;QACFiJ,OAAO,EAAE,CAAC,CAACnE,MAAM,CAACI;MACpB,CAAC,CAAC;MAEF,OAAO;QACL9H,OAAO,EAAE,IAAI;QACb+H,IAAI,EAAEL,MAAM,CAACI;MACf,CAAC;IACH,CAAC,CAAC,OAAOtG,GAAG,EAAE;MACZ,IAAIA,GAAG,CAACsK,IAAI,KAAK,iCAAiC,EAAE;QAClDnP,IAAI,CAAC,wDAAwD,EAAE;UAAEiG;QAAG,CAAC,CAAC;QACtE,OAAO;UACL5C,OAAO,EAAE,KAAK;UACd+L,MAAM,EAAE,mBAAmB;UAC3B3P,KAAK,EAAEoF,GAAG,CAAC/F;QACb,CAAC;MACH;MAEAW,KAAK,CAAC,qCAAqC,EAAEoF,GAAG,EAAE;QAChD0F,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBtE;MACF,CAAC,CAAC;MAEF,MAAM,IAAIxE,KAAK,CAAC,uCAAuCoD,GAAG,CAAC/F,OAAO,EAAE,CAAC;IACvE;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMuQ,aAAaA,CAACC,aAAa,EAAE;IACjC,IAAI;MACFrP,KAAK,CAAC,wBAAwB,EAAE;QAC9BsK,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBkC,SAAS,EAAE6C,aAAa,CAAC9N;MAC3B,CAAC,CAAC;MAEF,MAAMmJ,MAAM,GAAG;QACb4E,aAAa,EAAED,aAAa,CAACtJ,GAAG,CAACH,IAAI,IAAI;UACvC,IAAIA,IAAI,CAAC2J,GAAG,EAAE;YACZ,OAAO;cACLA,GAAG,EAAAxQ,aAAA;gBACD4L,SAAS,EAAE,IAAI,CAACL;cAAS,GACtB1E,IAAI,CAAC2J,GAAG;YAEf,CAAC;UACH;UACA,IAAI3J,IAAI,CAAC4J,MAAM,EAAE;YACf,OAAO;cACLA,MAAM,EAAAzQ,aAAA;gBACJ4L,SAAS,EAAE,IAAI,CAACL;cAAS,GACtB1E,IAAI,CAAC4J,MAAM;YAElB,CAAC;UACH;UACA,IAAI5J,IAAI,CAAC6J,MAAM,EAAE;YACf,OAAO;cACLA,MAAM,EAAA1Q,aAAA;gBACJ4L,SAAS,EAAE,IAAI,CAACL;cAAS,GACtB1E,IAAI,CAAC6J,MAAM;YAElB,CAAC;UACH;UACA,OAAO7J,IAAI;QACb,CAAC;MACH,CAAC;MAED,MAAM,IAAI,CAAC2E,MAAM,CAAC6E,aAAa,CAAC1E,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC;MAEjDjL,IAAI,CAAC,sCAAsC,EAAE;QAC3CyM,SAAS,EAAE6C,aAAa,CAAC9N;MAC3B,CAAC,CAAC;MAEF,OAAO;QACL6B,OAAO,EAAE,IAAI;QACbiK,cAAc,EAAEgC,aAAa,CAAC9N;MAChC,CAAC;IACH,CAAC,CAAC,OAAOqD,GAAG,EAAE;MACZpF,KAAK,CAAC,qCAAqC,EAAEoF,GAAG,EAAE;QAChD0F,SAAS,EAAE,IAAI,CAACA,SAAS;QACzBkC,SAAS,EAAE6C,aAAa,CAAC9N;MAC3B,CAAC,CAAC;MAEF,MAAM,IAAIC,KAAK,CAAC,sCAAsCoD,GAAG,CAAC/F,OAAO,EAAE,CAAC;IACtE;EACF;;EAEA;AACF;AACA;AACA;EACE,MAAM6Q,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF,MAAMhF,MAAM,GAAG;QACbC,SAAS,EAAE,IAAI,CAACL;MAClB,CAAC;MAED,MAAMQ,MAAM,GAAG,MAAM,IAAI,CAACP,MAAM,CAACoF,aAAa,CAACjF,MAAM,CAAC,CAACM,OAAO,CAAC,CAAC;MAEhE,OAAO;QACLV,SAAS,EAAEQ,MAAM,CAAC8E,KAAK,CAACjF,SAAS;QACjCzE,MAAM,EAAE4E,MAAM,CAAC8E,KAAK,CAACC,WAAW;QAChCrD,SAAS,EAAE1B,MAAM,CAAC8E,KAAK,CAACE,SAAS;QACjCC,SAAS,EAAEjF,MAAM,CAAC8E,KAAK,CAACI,cAAc;QACtCC,gBAAgB,EAAEnF,MAAM,CAAC8E,KAAK,CAACM,gBAAgB;QAC/CC,WAAW,EAAErF,MAAM,CAAC8E,KAAK,CAACQ,kBAAkB,EAAEC,WAAW;QACzDC,OAAO,EAAExF,MAAM,CAAC8E,KAAK,CAACW,sBAAsB,EAAExK,GAAG,CAACyK,KAAK,KAAK;UAC1D3Q,IAAI,EAAE2Q,KAAK,CAAC3E,SAAS;UACrB3F,MAAM,EAAEsK,KAAK,CAACC,WAAW;UACzBjE,SAAS,EAAEgE,KAAK,CAACV;QACnB,CAAC,CAAC;MACJ,CAAC;IACH,CAAC,CAAC,OAAOlL,GAAG,EAAE;MACZpF,KAAK,CAAC,4BAA4B,EAAEoF,GAAG,EAAE;QACvC0F,SAAS,EAAE,IAAI,CAACA;MAClB,CAAC,CAAC;MAEF,MAAM,IAAI9I,KAAK,CAAC,+BAA+BoD,GAAG,CAAC/F,OAAO,EAAE,CAAC;IAC/D;EACF;AACF;AAEAgC,MAAM,CAACC,OAAO,GAAGyC,eAAe,C;;;;;;;;AC9rBnB;;AAEb,eAAe,mBAAO,CAAC,IAAU;;;AAGjC;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;;AAEA;;AAEA;;AAEA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;AC3Ea;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,sCAAsC,EAAE;AACxC,8BAA8B,EAAE;;AAEhC;AACA;AACA;;;AAGA,cAAc;;AAEd,oCAAoC;;AAEpC;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wDAAwD,UAAU,mBAAmB,cAAc;AACnG;AACA;AACA;;AAEA,gFAAgF,yCAAyC,iBAAiB;AAC1I;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gGAAgG;;AAEhG;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA,6BAA6B,6BAA6B;AAC1D;AACA;AACA,gGAAgG;AAChG,iCAAiC,mCAAmC;AACpE;AACA;AACA;;AAEA,6BAA6B,iCAAiC,kCAAkC;AAChG;AACA,gGAAgG;AAChG;AACA;AACA,gGAAgG;;AAEhG;AACA;AACA;AACA,iCAAiC,kCAAkC;AACnE;AACA;AACA,gGAAgG;AAChG,6BAA6B,8CAA8C;AAC3E;AACA,gGAAgG;AAChG,6BAA6B,2DAA2D;AACxF;AACA,gGAAgG;AAChG;AACA,uEAAuE,QAAQ;AAC/E;;AAEA,6BAA6B,mCAAmC;AAChE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,qBAAqB;AACrB,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4EAA4E,WAAW;AACvF;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,4BAA4B;AAC5B;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,sEAAsE,WAAW;AACjF;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA,iEAAiE,KAAK;AACtE;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,iEAAiE,MAAM,yBAAyB,OAAO;AACvG;;AAEA;AACA;AACA;;AAEA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,QAAQ;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;;AAGA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,gCAAgC;AAChC;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;;;;;;;;ACvca;;AAEb;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,wBAAwB;;AAExB;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;ACtDa;;AAEb,eAAe,mBAAO,CAAC,IAAuB;AAC9C,oBAAoB,mBAAO,CAAC,IAAsB;;AAElD,YAAY,mBAAO,CAAC,GAAiB;;A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","sources":["webpack://flood-info-backend/./node_modules/@hapi/hoek/lib/ignore.js","webpack://flood-info-backend/./node_modules/joi/lib/types/binary.js","webpack://flood-info-backend/./node_modules/joi/lib/types/any.js","webpack://flood-info-backend/./node_modules/joi/lib/template.js","webpack://flood-info-backend/./node_modules/@hapi/hoek/lib/assert.js","webpack://flood-info-backend/./node_modules/joi/lib/manifest.js","webpack://flood-info-backend/./node_modules/@sideway/address/lib/tlds.js","webpack://flood-info-backend/./node_modules/@hapi/hoek/lib/error.js","webpack://flood-info-backend/./src/utils/logger.js","webpack://flood-info-backend/./node_modules/joi/lib/types/array.js","webpack://flood-info-backend/./node_modules/@sideway/address/lib/errors.js","webpack://flood-info-backend/./node_modules/joi/lib/trace.js","webpack://flood-info-backend/./node_modules/joi/lib/cache.js","webpack://flood-info-backend/./node_modules/@sideway/address/lib/domain.js","webpack://flood-info-backend/./node_modules/@hapi/hoek/lib/escapeRegex.js","webpack://flood-info-backend/./node_modules/joi/lib/base.js","webpack://flood-info-backend/./src/config/environment.js","webpack://flood-info-backend/./node_modules/@hapi/hoek/lib/clone.js","webpack://flood-info-backend/./node_modules/joi/lib/types/function.js","webpack://flood-info-backend/./node_modules/joi/lib/types/number.js","webpack://flood-info-backend/./node_modules/@sideway/address/lib/uri.js","webpack://flood-info-backend/./node_modules/joi/lib/values.js","webpack://flood-info-backend/./node_modules/@hapi/hoek/lib/stringify.js","webpack://flood-info-backend/external commonjs2 \"aws-sdk\"","webpack://flood-info-backend/./node_modules/joi/lib/extend.js","webpack://flood-info-backend/./node_modules/joi/lib/validator.js","webpack://flood-info-backend/./node_modules/@hapi/hoek/lib/escapeHtml.js","webpack://flood-info-backend/./node_modules/@hapi/hoek/lib/merge.js","webpack://flood-info-backend/./node_modules/@hapi/hoek/lib/applyToDefaults.js","webpack://flood-info-backend/./node_modules/joi/lib/types/object.js","webpack://flood-info-backend/./node_modules/joi/lib/types/keys.js","webpack://flood-info-backend/./node_modules/@hapi/hoek/lib/deepEqual.js","webpack://flood-info-backend/./node_modules/joi/lib/types/link.js","webpack://flood-info-backend/./node_modules/@sideway/pinpoint/lib/index.js","webpack://flood-info-backend/./node_modules/joi/lib/types/boolean.js","webpack://flood-info-backend/./node_modules/@hapi/hoek/lib/utils.js","webpack://flood-info-backend/./node_modules/joi/lib/schemas.js","webpack://flood-info-backend/./node_modules/@hapi/topo/lib/index.js","webpack://flood-info-backend/./node_modules/joi/lib/index.js","webpack://flood-info-backend/./node_modules/joi/lib/types/string.js","webpack://flood-info-backend/./node_modules/joi/lib/errors.js","webpack://flood-info-backend/./src/handlers/locationHandler.js","webpack://flood-info-backend/./src/config/aws.js","webpack://flood-info-backend/./node_modules/joi/lib/types/alternatives.js","webpack://flood-info-backend/external node-commonjs \"url\"","webpack://flood-info-backend/./node_modules/joi/lib/compile.js","webpack://flood-info-backend/./src/services/DynamoDBService.js","webpack://flood-info-backend/./node_modules/@hapi/hoek/lib/reach.js","webpack://flood-info-backend/./node_modules/@sideway/formula/lib/index.js","webpack://flood-info-backend/./node_modules/@hapi/hoek/lib/types.js","webpack://flood-info-backend/./node_modules/joi/lib/common.js","webpack://flood-info-backend/./node_modules/joi/lib/messages.js","webpack://flood-info-backend/./node_modules/joi/lib/modify.js","webpack://flood-info-backend/./node_modules/joi/lib/annotate.js","webpack://flood-info-backend/./node_modules/joi/lib/state.js","webpack://flood-info-backend/./node_modules/joi/lib/ref.js","webpack://flood-info-backend/./src/utils/response.js","webpack://flood-info-backend/external node-commonjs \"util\"","webpack://flood-info-backend/./node_modules/joi/lib/types/symbol.js","webpack://flood-info-backend/./node_modules/joi/lib/types/date.js","webpack://flood-info-backend/./node_modules/@sideway/address/lib/email.js","webpack://flood-info-backend/./node_modules/@sideway/address/lib/ip.js","webpack://flood-info-backend/webpack/bootstrap","webpack://flood-info-backend/webpack/before-startup","webpack://flood-info-backend/webpack/startup","webpack://flood-info-backend/webpack/after-startup"],"sourcesContent":["'use strict';\n\nconst internals = {};\n\n\nmodule.exports = function () { };\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Any = require('./any');\nconst Common = require('../common');\n\n\nconst internals = {};\n\n\nmodule.exports = Any.extend({\n\n    type: 'binary',\n\n    coerce: {\n        from: ['string', 'object'],\n        method(value, { schema }) {\n\n            if (typeof value === 'string' || (value !== null && value.type === 'Buffer')) {\n                try {\n                    return { value: Buffer.from(value, schema._flags.encoding) };\n                }\n                catch (ignoreErr) { }\n            }\n        }\n    },\n\n    validate(value, { error }) {\n\n        if (!Buffer.isBuffer(value)) {\n            return { value, errors: error('binary.base') };\n        }\n    },\n\n    rules: {\n        encoding: {\n            method(encoding) {\n\n                Assert(Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);\n\n                return this.$_setFlag('encoding', encoding);\n            }\n        },\n\n        length: {\n            method(limit) {\n\n                return this.$_addRule({ name: 'length', method: 'length', args: { limit }, operator: '=' });\n            },\n            validate(value, helpers, { limit }, { name, operator, args }) {\n\n                if (Common.compare(value.length, limit, operator)) {\n                    return value;\n                }\n\n                return helpers.error('binary.' + name, { limit: args.limit, value });\n            },\n            args: [\n                {\n                    name: 'limit',\n                    ref: true,\n                    assert: Common.limit,\n                    message: 'must be a positive integer'\n                }\n            ]\n        },\n\n        max: {\n            method(limit) {\n\n                return this.$_addRule({ name: 'max', method: 'length', args: { limit }, operator: '<=' });\n            }\n        },\n\n        min: {\n            method(limit) {\n\n                return this.$_addRule({ name: 'min', method: 'length', args: { limit }, operator: '>=' });\n            }\n        }\n    },\n\n    cast: {\n        string: {\n            from: (value) => Buffer.isBuffer(value),\n            to(value, helpers) {\n\n                return value.toString();\n            }\n        }\n    },\n\n    messages: {\n        'binary.base': '{{#label}} must be a buffer or a string',\n        'binary.length': '{{#label}} must be {{#limit}} bytes',\n        'binary.max': '{{#label}} must be less than or equal to {{#limit}} bytes',\n        'binary.min': '{{#label}} must be at least {{#limit}} bytes'\n    }\n});\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Base = require('../base');\nconst Common = require('../common');\nconst Messages = require('../messages');\n\n\nconst internals = {};\n\n\nmodule.exports = Base.extend({\n\n    type: 'any',\n\n    flags: {\n\n        only: { default: false }\n    },\n\n    terms: {\n\n        alterations: { init: null },\n        examples: { init: null },\n        externals: { init: null },\n        metas: { init: [] },\n        notes: { init: [] },\n        shared: { init: null },\n        tags: { init: [] },\n        whens: { init: null }\n    },\n\n    rules: {\n\n        custom: {\n            method(method, description) {\n\n                Assert(typeof method === 'function', 'Method must be a function');\n                Assert(description === undefined || description && typeof description === 'string', 'Description must be a non-empty string');\n\n                return this.$_addRule({ name: 'custom', args: { method, description } });\n            },\n            validate(value, helpers, { method }) {\n\n                try {\n                    return method(value, helpers);\n                }\n                catch (err) {\n                    return helpers.error('any.custom', { error: err });\n                }\n            },\n            args: ['method', 'description'],\n            multi: true\n        },\n\n        messages: {\n            method(messages) {\n\n                return this.prefs({ messages });\n            }\n        },\n\n        shared: {\n            method(schema) {\n\n                Assert(Common.isSchema(schema) && schema._flags.id, 'Schema must be a schema with an id');\n\n                const obj = this.clone();\n                obj.$_terms.shared = obj.$_terms.shared || [];\n                obj.$_terms.shared.push(schema);\n                obj.$_mutateRegister(schema);\n                return obj;\n            }\n        },\n\n        warning: {\n            method(code, local) {\n\n                Assert(code && typeof code === 'string', 'Invalid warning code');\n\n                return this.$_addRule({ name: 'warning', args: { code, local }, warn: true });\n            },\n            validate(value, helpers, { code, local }) {\n\n                return helpers.error(code, local);\n            },\n            args: ['code', 'local'],\n            multi: true\n        }\n    },\n\n    modifiers: {\n\n        keep(rule, enabled = true) {\n\n            rule.keep = enabled;\n        },\n\n        message(rule, message) {\n\n            rule.message = Messages.compile(message);\n        },\n\n        warn(rule, enabled = true) {\n\n            rule.warn = enabled;\n        }\n    },\n\n    manifest: {\n\n        build(obj, desc) {\n\n            for (const key in desc) {\n                const values = desc[key];\n\n                if (['examples', 'externals', 'metas', 'notes', 'tags'].includes(key)) {\n                    for (const value of values) {\n                        obj = obj[key.slice(0, -1)](value);\n                    }\n\n                    continue;\n                }\n\n                if (key === 'alterations') {\n                    const alter = {};\n                    for (const { target, adjuster } of values) {\n                        alter[target] = adjuster;\n                    }\n\n                    obj = obj.alter(alter);\n                    continue;\n                }\n\n                if (key === 'whens') {\n                    for (const value of values) {\n                        const { ref, is, not, then, otherwise, concat } = value;\n                        if (concat) {\n                            obj = obj.concat(concat);\n                        }\n                        else if (ref) {\n                            obj = obj.when(ref, { is, not, then, otherwise, switch: value.switch, break: value.break });\n                        }\n                        else {\n                            obj = obj.when(is, { then, otherwise, break: value.break });\n                        }\n                    }\n\n                    continue;\n                }\n\n                if (key === 'shared') {\n                    for (const value of values) {\n                        obj = obj.shared(value);\n                    }\n                }\n            }\n\n            return obj;\n        }\n    },\n\n    messages: {\n        'any.custom': '{{#label}} failed custom validation because {{#error.message}}',\n        'any.default': '{{#label}} threw an error when running default method',\n        'any.failover': '{{#label}} threw an error when running failover method',\n        'any.invalid': '{{#label}} contains an invalid value',\n        'any.only': '{{#label}} must be {if(#valids.length == 1, \"\", \"one of \")}{{#valids}}',\n        'any.ref': '{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}',\n        'any.required': '{{#label}} is required',\n        'any.unknown': '{{#label}} is not allowed'\n    }\n});\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst Clone = require('@hapi/hoek/lib/clone');\nconst EscapeHtml = require('@hapi/hoek/lib/escapeHtml');\nconst Formula = require('@sideway/formula');\n\nconst Common = require('./common');\nconst Errors = require('./errors');\nconst Ref = require('./ref');\n\n\nconst internals = {\n    symbol: Symbol('template'),\n\n    opens: new Array(1000).join('\\u0000'),\n    closes: new Array(1000).join('\\u0001'),\n\n    dateFormat: {\n        date: Date.prototype.toDateString,\n        iso: Date.prototype.toISOString,\n        string: Date.prototype.toString,\n        time: Date.prototype.toTimeString,\n        utc: Date.prototype.toUTCString\n    }\n};\n\n\nmodule.exports = exports = internals.Template = class {\n\n    constructor(source, options) {\n\n        Assert(typeof source === 'string', 'Template source must be a string');\n        Assert(!source.includes('\\u0000') && !source.includes('\\u0001'), 'Template source cannot contain reserved control characters');\n\n        this.source = source;\n        this.rendered = source;\n\n        this._template = null;\n\n        if (options) {\n            const { functions, ...opts } = options;\n            this._settings = Object.keys(opts).length ? Clone(opts) : undefined;\n            this._functions = functions;\n            if (this._functions) {\n                Assert(Object.keys(this._functions).every((key) => typeof key === 'string'), 'Functions keys must be strings');\n                Assert(Object.values(this._functions).every((key) => typeof key === 'function'), 'Functions values must be functions');\n            }\n        }\n        else {\n            this._settings = undefined;\n            this._functions = undefined;\n        }\n\n        this._parse();\n    }\n\n    _parse() {\n\n        // 'text {raw} {{ref}} \\\\{{ignore}} {{ignore\\\\}} {{ignore {{ignore}'\n\n        if (!this.source.includes('{')) {\n            return;\n        }\n\n        // Encode escaped \\\\{{{{{\n\n        const encoded = internals.encode(this.source);\n\n        // Split on first { in each set\n\n        const parts = internals.split(encoded);\n\n        // Process parts\n\n        let refs = false;\n        const processed = [];\n        const head = parts.shift();\n        if (head) {\n            processed.push(head);\n        }\n\n        for (const part of parts) {\n            const raw = part[0] !== '{';\n            const ender = raw ? '}' : '}}';\n            const end = part.indexOf(ender);\n            if (end === -1 ||                               // Ignore non-matching closing\n                part[1] === '{') {                          // Ignore more than two {\n\n                processed.push(`{${internals.decode(part)}`);\n                continue;\n            }\n\n            let variable = part.slice(raw ? 0 : 1, end);\n            const wrapped = variable[0] === ':';\n            if (wrapped) {\n                variable = variable.slice(1);\n            }\n\n            const dynamic = this._ref(internals.decode(variable), { raw, wrapped });\n            processed.push(dynamic);\n            if (typeof dynamic !== 'string') {\n                refs = true;\n            }\n\n            const rest = part.slice(end + ender.length);\n            if (rest) {\n                processed.push(internals.decode(rest));\n            }\n        }\n\n        if (!refs) {\n            this.rendered = processed.join('');\n            return;\n        }\n\n        this._template = processed;\n    }\n\n    static date(date, prefs) {\n\n        return internals.dateFormat[prefs.dateFormat].call(date);\n    }\n\n    describe(options = {}) {\n\n        if (!this._settings &&\n            options.compact) {\n\n            return this.source;\n        }\n\n        const desc = { template: this.source };\n        if (this._settings) {\n            desc.options = this._settings;\n        }\n\n        if (this._functions) {\n            desc.functions = this._functions;\n        }\n\n        return desc;\n    }\n\n    static build(desc) {\n\n        return new internals.Template(desc.template, desc.options || desc.functions ? { ...desc.options, functions: desc.functions } : undefined);\n    }\n\n    isDynamic() {\n\n        return !!this._template;\n    }\n\n    static isTemplate(template) {\n\n        return template ? !!template[Common.symbols.template] : false;\n    }\n\n    refs() {\n\n        if (!this._template) {\n            return;\n        }\n\n        const refs = [];\n        for (const part of this._template) {\n            if (typeof part !== 'string') {\n                refs.push(...part.refs);\n            }\n        }\n\n        return refs;\n    }\n\n    resolve(value, state, prefs, local) {\n\n        if (this._template &&\n            this._template.length === 1) {\n\n            return this._part(this._template[0], /* context -> [*/ value, state, prefs, local, {} /*] */);\n        }\n\n        return this.render(value, state, prefs, local);\n    }\n\n    _part(part, ...args) {\n\n        if (part.ref) {\n            return part.ref.resolve(...args);\n        }\n\n        return part.formula.evaluate(args);\n    }\n\n    render(value, state, prefs, local, options = {}) {\n\n        if (!this.isDynamic()) {\n            return this.rendered;\n        }\n\n        const parts = [];\n        for (const part of this._template) {\n            if (typeof part === 'string') {\n                parts.push(part);\n            }\n            else {\n                const rendered = this._part(part, /* context -> [*/ value, state, prefs, local, options /*] */);\n                const string = internals.stringify(rendered, value, state, prefs, local, options);\n                if (string !== undefined) {\n                    const result = part.raw || (options.errors && options.errors.escapeHtml) === false ? string : EscapeHtml(string);\n                    parts.push(internals.wrap(result, part.wrapped && prefs.errors.wrap.label));\n                }\n            }\n        }\n\n        return parts.join('');\n    }\n\n    _ref(content, { raw, wrapped }) {\n\n        const refs = [];\n        const reference = (variable) => {\n\n            const ref = Ref.create(variable, this._settings);\n            refs.push(ref);\n            return (context) => {\n\n                const resolved = ref.resolve(...context);\n                return resolved !== undefined ? resolved : null;\n            };\n        };\n\n        try {\n            const functions = this._functions ? { ...internals.functions, ...this._functions } : internals.functions;\n            var formula = new Formula.Parser(content, { reference, functions, constants: internals.constants });\n        }\n        catch (err) {\n            err.message = `Invalid template variable \"${content}\" fails due to: ${err.message}`;\n            throw err;\n        }\n\n        if (formula.single) {\n            if (formula.single.type === 'reference') {\n                const ref = refs[0];\n                return { ref, raw, refs, wrapped: wrapped || ref.type === 'local' && ref.key === 'label' };\n            }\n\n            return internals.stringify(formula.single.value);\n        }\n\n        return { formula, raw, refs };\n    }\n\n    toString() {\n\n        return this.source;\n    }\n};\n\n\ninternals.Template.prototype[Common.symbols.template] = true;\ninternals.Template.prototype.isImmutable = true;                // Prevents Hoek from deep cloning schema objects\n\n\ninternals.encode = function (string) {\n\n    return string\n        .replace(/\\\\(\\{+)/g, ($0, $1) => {\n\n            return internals.opens.slice(0, $1.length);\n        })\n        .replace(/\\\\(\\}+)/g, ($0, $1) => {\n\n            return internals.closes.slice(0, $1.length);\n        });\n};\n\n\ninternals.decode = function (string) {\n\n    return string\n        .replace(/\\u0000/g, '{')\n        .replace(/\\u0001/g, '}');\n};\n\n\ninternals.split = function (string) {\n\n    const parts = [];\n    let current = '';\n\n    for (let i = 0; i < string.length; ++i) {\n        const char = string[i];\n\n        if (char === '{') {\n            let next = '';\n            while (i + 1 < string.length &&\n                string[i + 1] === '{') {\n\n                next += '{';\n                ++i;\n            }\n\n            parts.push(current);\n            current = next;\n        }\n        else {\n            current += char;\n        }\n    }\n\n    parts.push(current);\n    return parts;\n};\n\n\ninternals.wrap = function (value, ends) {\n\n    if (!ends) {\n        return value;\n    }\n\n    if (ends.length === 1) {\n        return `${ends}${value}${ends}`;\n    }\n\n    return `${ends[0]}${value}${ends[1]}`;\n};\n\n\ninternals.stringify = function (value, original, state, prefs, local, options = {}) {\n\n    const type = typeof value;\n    const wrap = prefs && prefs.errors && prefs.errors.wrap || {};\n\n    let skipWrap = false;\n    if (Ref.isRef(value) &&\n        value.render) {\n\n        skipWrap = value.in;\n        value = value.resolve(original, state, prefs, local, { in: value.in, ...options });\n    }\n\n    if (value === null) {\n        return 'null';\n    }\n\n    if (type === 'string') {\n        return internals.wrap(value, options.arrayItems && wrap.string);\n    }\n\n    if (type === 'number' ||\n        type === 'function' ||\n        type === 'symbol') {\n\n        return value.toString();\n    }\n\n    if (type !== 'object') {\n        return JSON.stringify(value);\n    }\n\n    if (value instanceof Date) {\n        return internals.Template.date(value, prefs);\n    }\n\n    if (value instanceof Map) {\n        const pairs = [];\n        for (const [key, sym] of value.entries()) {\n            pairs.push(`${key.toString()} -> ${sym.toString()}`);\n        }\n\n        value = pairs;\n    }\n\n    if (!Array.isArray(value)) {\n        return value.toString();\n    }\n\n    const values = [];\n    for (const item of value) {\n        values.push(internals.stringify(item, original, state, prefs, local, { arrayItems: true, ...options }));\n    }\n\n    return internals.wrap(values.join(', '), !skipWrap && wrap.array);\n};\n\n\ninternals.constants = {\n\n    true: true,\n    false: false,\n    null: null,\n\n    second: 1000,\n    minute: 60 * 1000,\n    hour: 60 * 60 * 1000,\n    day: 24 * 60 * 60 * 1000\n};\n\n\ninternals.functions = {\n\n    if(condition, then, otherwise) {\n\n        return condition ? then : otherwise;\n    },\n\n    length(item) {\n\n        if (typeof item === 'string') {\n            return item.length;\n        }\n\n        if (!item || typeof item !== 'object') {\n            return null;\n        }\n\n        if (Array.isArray(item)) {\n            return item.length;\n        }\n\n        return Object.keys(item).length;\n    },\n\n    msg(code) {\n\n        const [value, state, prefs, local, options] = this;\n        const messages = options.messages;\n        if (!messages) {\n            return '';\n        }\n\n        const template = Errors.template(value, messages[0], code, state, prefs) || Errors.template(value, messages[1], code, state, prefs);\n        if (!template) {\n            return '';\n        }\n\n        return template.render(value, state, prefs, local, options);\n    },\n\n    number(value) {\n\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        if (typeof value === 'string') {\n            return parseFloat(value);\n        }\n\n        if (typeof value === 'boolean') {\n            return value ? 1 : 0;\n        }\n\n        if (value instanceof Date) {\n            return value.getTime();\n        }\n\n        return null;\n    }\n};\n","'use strict';\n\nconst AssertError = require('./error');\n\n\nconst internals = {};\n\n\nmodule.exports = function (condition, ...args) {\n\n    if (condition) {\n        return;\n    }\n\n    if (args.length === 1 &&\n        args[0] instanceof Error) {\n\n        throw args[0];\n    }\n\n    throw new AssertError(args);\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst Clone = require('@hapi/hoek/lib/clone');\n\nconst Common = require('./common');\nconst Messages = require('./messages');\nconst Ref = require('./ref');\nconst Template = require('./template');\n\nlet Schemas;\n\n\nconst internals = {};\n\n\nexports.describe = function (schema) {\n\n    const def = schema._definition;\n\n    // Type\n\n    const desc = {\n        type: schema.type,\n        flags: {},\n        rules: []\n    };\n\n    // Flags\n\n    for (const flag in schema._flags) {\n        if (flag[0] !== '_') {\n            desc.flags[flag] = internals.describe(schema._flags[flag]);\n        }\n    }\n\n    if (!Object.keys(desc.flags).length) {\n        delete desc.flags;\n    }\n\n    // Preferences\n\n    if (schema._preferences) {\n        desc.preferences = Clone(schema._preferences, { shallow: ['messages'] });\n        delete desc.preferences[Common.symbols.prefs];\n        if (desc.preferences.messages) {\n            desc.preferences.messages = Messages.decompile(desc.preferences.messages);\n        }\n    }\n\n    // Allow / Invalid\n\n    if (schema._valids) {\n        desc.allow = schema._valids.describe();\n    }\n\n    if (schema._invalids) {\n        desc.invalid = schema._invalids.describe();\n    }\n\n    // Rules\n\n    for (const rule of schema._rules) {\n        const ruleDef = def.rules[rule.name];\n        if (ruleDef.manifest === false) {                           // Defaults to true\n            continue;\n        }\n\n        const item = { name: rule.name };\n\n        for (const custom in def.modifiers) {\n            if (rule[custom] !== undefined) {\n                item[custom] = internals.describe(rule[custom]);\n            }\n        }\n\n        if (rule.args) {\n            item.args = {};\n            for (const key in rule.args) {\n                const arg = rule.args[key];\n                if (key === 'options' &&\n                    !Object.keys(arg).length) {\n\n                    continue;\n                }\n\n                item.args[key] = internals.describe(arg, { assign: key });\n            }\n\n            if (!Object.keys(item.args).length) {\n                delete item.args;\n            }\n        }\n\n        desc.rules.push(item);\n    }\n\n    if (!desc.rules.length) {\n        delete desc.rules;\n    }\n\n    // Terms (must be last to verify no name conflicts)\n\n    for (const term in schema.$_terms) {\n        if (term[0] === '_') {\n            continue;\n        }\n\n        Assert(!desc[term], 'Cannot describe schema due to internal name conflict with', term);\n\n        const items = schema.$_terms[term];\n        if (!items) {\n            continue;\n        }\n\n        if (items instanceof Map) {\n            if (items.size) {\n                desc[term] = [...items.entries()];\n            }\n\n            continue;\n        }\n\n        if (Common.isValues(items)) {\n            desc[term] = items.describe();\n            continue;\n        }\n\n        Assert(def.terms[term], 'Term', term, 'missing configuration');\n        const manifest = def.terms[term].manifest;\n        const mapped = typeof manifest === 'object';\n        if (!items.length &&\n            !mapped) {\n\n            continue;\n        }\n\n        const normalized = [];\n        for (const item of items) {\n            normalized.push(internals.describe(item));\n        }\n\n        // Mapped\n\n        if (mapped) {\n            const { from, to } = manifest.mapped;\n            desc[term] = {};\n            for (const item of normalized) {\n                desc[term][item[to]] = item[from];\n            }\n\n            continue;\n        }\n\n        // Single\n\n        if (manifest === 'single') {\n            Assert(normalized.length === 1, 'Term', term, 'contains more than one item');\n            desc[term] = normalized[0];\n            continue;\n        }\n\n        // Array\n\n        desc[term] = normalized;\n    }\n\n    internals.validate(schema.$_root, desc);\n    return desc;\n};\n\n\ninternals.describe = function (item, options = {}) {\n\n    if (Array.isArray(item)) {\n        return item.map(internals.describe);\n    }\n\n    if (item === Common.symbols.deepDefault) {\n        return { special: 'deep' };\n    }\n\n    if (typeof item !== 'object' ||\n        item === null) {\n\n        return item;\n    }\n\n    if (options.assign === 'options') {\n        return Clone(item);\n    }\n\n    if (Buffer && Buffer.isBuffer(item)) {                          // $lab:coverage:ignore$\n        return { buffer: item.toString('binary') };\n    }\n\n    if (item instanceof Date) {\n        return item.toISOString();\n    }\n\n    if (item instanceof Error) {\n        return item;\n    }\n\n    if (item instanceof RegExp) {\n        if (options.assign === 'regex') {\n            return item.toString();\n        }\n\n        return { regex: item.toString() };\n    }\n\n    if (item[Common.symbols.literal]) {\n        return { function: item.literal };\n    }\n\n    if (typeof item.describe === 'function') {\n        if (options.assign === 'ref') {\n            return item.describe().ref;\n        }\n\n        return item.describe();\n    }\n\n    const normalized = {};\n    for (const key in item) {\n        const value = item[key];\n        if (value === undefined) {\n            continue;\n        }\n\n        normalized[key] = internals.describe(value, { assign: key });\n    }\n\n    return normalized;\n};\n\n\nexports.build = function (joi, desc) {\n\n    const builder = new internals.Builder(joi);\n    return builder.parse(desc);\n};\n\n\ninternals.Builder = class {\n\n    constructor(joi) {\n\n        this.joi = joi;\n    }\n\n    parse(desc) {\n\n        internals.validate(this.joi, desc);\n\n        // Type\n\n        let schema = this.joi[desc.type]()._bare();\n        const def = schema._definition;\n\n        // Flags\n\n        if (desc.flags) {\n            for (const flag in desc.flags) {\n                const setter = def.flags[flag] && def.flags[flag].setter || flag;\n                Assert(typeof schema[setter] === 'function', 'Invalid flag', flag, 'for type', desc.type);\n                schema = schema[setter](this.build(desc.flags[flag]));\n            }\n        }\n\n        // Preferences\n\n        if (desc.preferences) {\n            schema = schema.preferences(this.build(desc.preferences));\n        }\n\n        // Allow / Invalid\n\n        if (desc.allow) {\n            schema = schema.allow(...this.build(desc.allow));\n        }\n\n        if (desc.invalid) {\n            schema = schema.invalid(...this.build(desc.invalid));\n        }\n\n        // Rules\n\n        if (desc.rules) {\n            for (const rule of desc.rules) {\n                Assert(typeof schema[rule.name] === 'function', 'Invalid rule', rule.name, 'for type', desc.type);\n\n                const args = [];\n                if (rule.args) {\n                    const built = {};\n                    for (const key in rule.args) {\n                        built[key] = this.build(rule.args[key], { assign: key });\n                    }\n\n                    const keys = Object.keys(built);\n                    const definition = def.rules[rule.name].args;\n                    if (definition) {\n                        Assert(keys.length <= definition.length, 'Invalid number of arguments for', desc.type, rule.name, '(expected up to', definition.length, ', found', keys.length, ')');\n                        for (const { name } of definition) {\n                            args.push(built[name]);\n                        }\n                    }\n                    else {\n                        Assert(keys.length === 1, 'Invalid number of arguments for', desc.type, rule.name, '(expected up to 1, found', keys.length, ')');\n                        args.push(built[keys[0]]);\n                    }\n                }\n\n                // Apply\n\n                schema = schema[rule.name](...args);\n\n                // Ruleset\n\n                const options = {};\n                for (const custom in def.modifiers) {\n                    if (rule[custom] !== undefined) {\n                        options[custom] = this.build(rule[custom]);\n                    }\n                }\n\n                if (Object.keys(options).length) {\n                    schema = schema.rule(options);\n                }\n            }\n        }\n\n        // Terms\n\n        const terms = {};\n        for (const key in desc) {\n            if (['allow', 'flags', 'invalid', 'whens', 'preferences', 'rules', 'type'].includes(key)) {\n                continue;\n            }\n\n            Assert(def.terms[key], 'Term', key, 'missing configuration');\n            const manifest = def.terms[key].manifest;\n\n            if (manifest === 'schema') {\n                terms[key] = desc[key].map((item) => this.parse(item));\n                continue;\n            }\n\n            if (manifest === 'values') {\n                terms[key] = desc[key].map((item) => this.build(item));\n                continue;\n            }\n\n            if (manifest === 'single') {\n                terms[key] = this.build(desc[key]);\n                continue;\n            }\n\n            if (typeof manifest === 'object') {\n                terms[key] = {};\n                for (const name in desc[key]) {\n                    const value = desc[key][name];\n                    terms[key][name] = this.parse(value);\n                }\n\n                continue;\n            }\n\n            terms[key] = this.build(desc[key]);\n        }\n\n        if (desc.whens) {\n            terms.whens = desc.whens.map((when) => this.build(when));\n        }\n\n        schema = def.manifest.build(schema, terms);\n        schema.$_temp.ruleset = false;\n        return schema;\n    }\n\n    build(desc, options = {}) {\n\n        if (desc === null) {\n            return null;\n        }\n\n        if (Array.isArray(desc)) {\n            return desc.map((item) => this.build(item));\n        }\n\n        if (desc instanceof Error) {\n            return desc;\n        }\n\n        if (options.assign === 'options') {\n            return Clone(desc);\n        }\n\n        if (options.assign === 'regex') {\n            return internals.regex(desc);\n        }\n\n        if (options.assign === 'ref') {\n            return Ref.build(desc);\n        }\n\n        if (typeof desc !== 'object') {\n            return desc;\n        }\n\n        if (Object.keys(desc).length === 1) {\n            if (desc.buffer) {\n                Assert(Buffer, 'Buffers are not supported');\n                return Buffer && Buffer.from(desc.buffer, 'binary');                    // $lab:coverage:ignore$\n            }\n\n            if (desc.function) {\n                return { [Common.symbols.literal]: true, literal: desc.function };\n            }\n\n            if (desc.override) {\n                return Common.symbols.override;\n            }\n\n            if (desc.ref) {\n                return Ref.build(desc.ref);\n            }\n\n            if (desc.regex) {\n                return internals.regex(desc.regex);\n            }\n\n            if (desc.special) {\n                Assert(['deep'].includes(desc.special), 'Unknown special value', desc.special);\n                return Common.symbols.deepDefault;\n            }\n\n            if (desc.value) {\n                return Clone(desc.value);\n            }\n        }\n\n        if (desc.type) {\n            return this.parse(desc);\n        }\n\n        if (desc.template) {\n            return Template.build(desc);\n        }\n\n        const normalized = {};\n        for (const key in desc) {\n            normalized[key] = this.build(desc[key], { assign: key });\n        }\n\n        return normalized;\n    }\n};\n\n\ninternals.regex = function (string) {\n\n    const end = string.lastIndexOf('/');\n    const exp = string.slice(1, end);\n    const flags = string.slice(end + 1);\n    return new RegExp(exp, flags);\n};\n\n\ninternals.validate = function (joi, desc) {\n\n    Schemas = Schemas || require('./schemas');\n\n    joi.assert(desc, Schemas.description);\n};\n","'use strict';\n\nconst internals = {};\n\n\n// http://data.iana.org/TLD/tlds-alpha-by-domain.txt\n// # Version 2024012900, Last Updated Mon Jan 29 07:07:01 2024 UTC\n\n\ninternals.tlds = [\n    'AAA',\n    'AARP',\n    'ABB',\n    'ABBOTT',\n    'ABBVIE',\n    'ABC',\n    'ABLE',\n    'ABOGADO',\n    'ABUDHABI',\n    'AC',\n    'ACADEMY',\n    'ACCENTURE',\n    'ACCOUNTANT',\n    'ACCOUNTANTS',\n    'ACO',\n    'ACTOR',\n    'AD',\n    'ADS',\n    'ADULT',\n    'AE',\n    'AEG',\n    'AERO',\n    'AETNA',\n    'AF',\n    'AFL',\n    'AFRICA',\n    'AG',\n    'AGAKHAN',\n    'AGENCY',\n    'AI',\n    'AIG',\n    'AIRBUS',\n    'AIRFORCE',\n    'AIRTEL',\n    'AKDN',\n    'AL',\n    'ALIBABA',\n    'ALIPAY',\n    'ALLFINANZ',\n    'ALLSTATE',\n    'ALLY',\n    'ALSACE',\n    'ALSTOM',\n    'AM',\n    'AMAZON',\n    'AMERICANEXPRESS',\n    'AMERICANFAMILY',\n    'AMEX',\n    'AMFAM',\n    'AMICA',\n    'AMSTERDAM',\n    'ANALYTICS',\n    'ANDROID',\n    'ANQUAN',\n    'ANZ',\n    'AO',\n    'AOL',\n    'APARTMENTS',\n    'APP',\n    'APPLE',\n    'AQ',\n    'AQUARELLE',\n    'AR',\n    'ARAB',\n    'ARAMCO',\n    'ARCHI',\n    'ARMY',\n    'ARPA',\n    'ART',\n    'ARTE',\n    'AS',\n    'ASDA',\n    'ASIA',\n    'ASSOCIATES',\n    'AT',\n    'ATHLETA',\n    'ATTORNEY',\n    'AU',\n    'AUCTION',\n    'AUDI',\n    'AUDIBLE',\n    'AUDIO',\n    'AUSPOST',\n    'AUTHOR',\n    'AUTO',\n    'AUTOS',\n    'AVIANCA',\n    'AW',\n    'AWS',\n    'AX',\n    'AXA',\n    'AZ',\n    'AZURE',\n    'BA',\n    'BABY',\n    'BAIDU',\n    'BANAMEX',\n    'BAND',\n    'BANK',\n    'BAR',\n    'BARCELONA',\n    'BARCLAYCARD',\n    'BARCLAYS',\n    'BAREFOOT',\n    'BARGAINS',\n    'BASEBALL',\n    'BASKETBALL',\n    'BAUHAUS',\n    'BAYERN',\n    'BB',\n    'BBC',\n    'BBT',\n    'BBVA',\n    'BCG',\n    'BCN',\n    'BD',\n    'BE',\n    'BEATS',\n    'BEAUTY',\n    'BEER',\n    'BENTLEY',\n    'BERLIN',\n    'BEST',\n    'BESTBUY',\n    'BET',\n    'BF',\n    'BG',\n    'BH',\n    'BHARTI',\n    'BI',\n    'BIBLE',\n    'BID',\n    'BIKE',\n    'BING',\n    'BINGO',\n    'BIO',\n    'BIZ',\n    'BJ',\n    'BLACK',\n    'BLACKFRIDAY',\n    'BLOCKBUSTER',\n    'BLOG',\n    'BLOOMBERG',\n    'BLUE',\n    'BM',\n    'BMS',\n    'BMW',\n    'BN',\n    'BNPPARIBAS',\n    'BO',\n    'BOATS',\n    'BOEHRINGER',\n    'BOFA',\n    'BOM',\n    'BOND',\n    'BOO',\n    'BOOK',\n    'BOOKING',\n    'BOSCH',\n    'BOSTIK',\n    'BOSTON',\n    'BOT',\n    'BOUTIQUE',\n    'BOX',\n    'BR',\n    'BRADESCO',\n    'BRIDGESTONE',\n    'BROADWAY',\n    'BROKER',\n    'BROTHER',\n    'BRUSSELS',\n    'BS',\n    'BT',\n    'BUILD',\n    'BUILDERS',\n    'BUSINESS',\n    'BUY',\n    'BUZZ',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'BZH',\n    'CA',\n    'CAB',\n    'CAFE',\n    'CAL',\n    'CALL',\n    'CALVINKLEIN',\n    'CAM',\n    'CAMERA',\n    'CAMP',\n    'CANON',\n    'CAPETOWN',\n    'CAPITAL',\n    'CAPITALONE',\n    'CAR',\n    'CARAVAN',\n    'CARDS',\n    'CARE',\n    'CAREER',\n    'CAREERS',\n    'CARS',\n    'CASA',\n    'CASE',\n    'CASH',\n    'CASINO',\n    'CAT',\n    'CATERING',\n    'CATHOLIC',\n    'CBA',\n    'CBN',\n    'CBRE',\n    'CC',\n    'CD',\n    'CENTER',\n    'CEO',\n    'CERN',\n    'CF',\n    'CFA',\n    'CFD',\n    'CG',\n    'CH',\n    'CHANEL',\n    'CHANNEL',\n    'CHARITY',\n    'CHASE',\n    'CHAT',\n    'CHEAP',\n    'CHINTAI',\n    'CHRISTMAS',\n    'CHROME',\n    'CHURCH',\n    'CI',\n    'CIPRIANI',\n    'CIRCLE',\n    'CISCO',\n    'CITADEL',\n    'CITI',\n    'CITIC',\n    'CITY',\n    'CK',\n    'CL',\n    'CLAIMS',\n    'CLEANING',\n    'CLICK',\n    'CLINIC',\n    'CLINIQUE',\n    'CLOTHING',\n    'CLOUD',\n    'CLUB',\n    'CLUBMED',\n    'CM',\n    'CN',\n    'CO',\n    'COACH',\n    'CODES',\n    'COFFEE',\n    'COLLEGE',\n    'COLOGNE',\n    'COM',\n    'COMCAST',\n    'COMMBANK',\n    'COMMUNITY',\n    'COMPANY',\n    'COMPARE',\n    'COMPUTER',\n    'COMSEC',\n    'CONDOS',\n    'CONSTRUCTION',\n    'CONSULTING',\n    'CONTACT',\n    'CONTRACTORS',\n    'COOKING',\n    'COOL',\n    'COOP',\n    'CORSICA',\n    'COUNTRY',\n    'COUPON',\n    'COUPONS',\n    'COURSES',\n    'CPA',\n    'CR',\n    'CREDIT',\n    'CREDITCARD',\n    'CREDITUNION',\n    'CRICKET',\n    'CROWN',\n    'CRS',\n    'CRUISE',\n    'CRUISES',\n    'CU',\n    'CUISINELLA',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CYMRU',\n    'CYOU',\n    'CZ',\n    'DABUR',\n    'DAD',\n    'DANCE',\n    'DATA',\n    'DATE',\n    'DATING',\n    'DATSUN',\n    'DAY',\n    'DCLK',\n    'DDS',\n    'DE',\n    'DEAL',\n    'DEALER',\n    'DEALS',\n    'DEGREE',\n    'DELIVERY',\n    'DELL',\n    'DELOITTE',\n    'DELTA',\n    'DEMOCRAT',\n    'DENTAL',\n    'DENTIST',\n    'DESI',\n    'DESIGN',\n    'DEV',\n    'DHL',\n    'DIAMONDS',\n    'DIET',\n    'DIGITAL',\n    'DIRECT',\n    'DIRECTORY',\n    'DISCOUNT',\n    'DISCOVER',\n    'DISH',\n    'DIY',\n    'DJ',\n    'DK',\n    'DM',\n    'DNP',\n    'DO',\n    'DOCS',\n    'DOCTOR',\n    'DOG',\n    'DOMAINS',\n    'DOT',\n    'DOWNLOAD',\n    'DRIVE',\n    'DTV',\n    'DUBAI',\n    'DUNLOP',\n    'DUPONT',\n    'DURBAN',\n    'DVAG',\n    'DVR',\n    'DZ',\n    'EARTH',\n    'EAT',\n    'EC',\n    'ECO',\n    'EDEKA',\n    'EDU',\n    'EDUCATION',\n    'EE',\n    'EG',\n    'EMAIL',\n    'EMERCK',\n    'ENERGY',\n    'ENGINEER',\n    'ENGINEERING',\n    'ENTERPRISES',\n    'EPSON',\n    'EQUIPMENT',\n    'ER',\n    'ERICSSON',\n    'ERNI',\n    'ES',\n    'ESQ',\n    'ESTATE',\n    'ET',\n    'EU',\n    'EUROVISION',\n    'EUS',\n    'EVENTS',\n    'EXCHANGE',\n    'EXPERT',\n    'EXPOSED',\n    'EXPRESS',\n    'EXTRASPACE',\n    'FAGE',\n    'FAIL',\n    'FAIRWINDS',\n    'FAITH',\n    'FAMILY',\n    'FAN',\n    'FANS',\n    'FARM',\n    'FARMERS',\n    'FASHION',\n    'FAST',\n    'FEDEX',\n    'FEEDBACK',\n    'FERRARI',\n    'FERRERO',\n    'FI',\n    'FIDELITY',\n    'FIDO',\n    'FILM',\n    'FINAL',\n    'FINANCE',\n    'FINANCIAL',\n    'FIRE',\n    'FIRESTONE',\n    'FIRMDALE',\n    'FISH',\n    'FISHING',\n    'FIT',\n    'FITNESS',\n    'FJ',\n    'FK',\n    'FLICKR',\n    'FLIGHTS',\n    'FLIR',\n    'FLORIST',\n    'FLOWERS',\n    'FLY',\n    'FM',\n    'FO',\n    'FOO',\n    'FOOD',\n    'FOOTBALL',\n    'FORD',\n    'FOREX',\n    'FORSALE',\n    'FORUM',\n    'FOUNDATION',\n    'FOX',\n    'FR',\n    'FREE',\n    'FRESENIUS',\n    'FRL',\n    'FROGANS',\n    'FRONTIER',\n    'FTR',\n    'FUJITSU',\n    'FUN',\n    'FUND',\n    'FURNITURE',\n    'FUTBOL',\n    'FYI',\n    'GA',\n    'GAL',\n    'GALLERY',\n    'GALLO',\n    'GALLUP',\n    'GAME',\n    'GAMES',\n    'GAP',\n    'GARDEN',\n    'GAY',\n    'GB',\n    'GBIZ',\n    'GD',\n    'GDN',\n    'GE',\n    'GEA',\n    'GENT',\n    'GENTING',\n    'GEORGE',\n    'GF',\n    'GG',\n    'GGEE',\n    'GH',\n    'GI',\n    'GIFT',\n    'GIFTS',\n    'GIVES',\n    'GIVING',\n    'GL',\n    'GLASS',\n    'GLE',\n    'GLOBAL',\n    'GLOBO',\n    'GM',\n    'GMAIL',\n    'GMBH',\n    'GMO',\n    'GMX',\n    'GN',\n    'GODADDY',\n    'GOLD',\n    'GOLDPOINT',\n    'GOLF',\n    'GOO',\n    'GOODYEAR',\n    'GOOG',\n    'GOOGLE',\n    'GOP',\n    'GOT',\n    'GOV',\n    'GP',\n    'GQ',\n    'GR',\n    'GRAINGER',\n    'GRAPHICS',\n    'GRATIS',\n    'GREEN',\n    'GRIPE',\n    'GROCERY',\n    'GROUP',\n    'GS',\n    'GT',\n    'GU',\n    'GUARDIAN',\n    'GUCCI',\n    'GUGE',\n    'GUIDE',\n    'GUITARS',\n    'GURU',\n    'GW',\n    'GY',\n    'HAIR',\n    'HAMBURG',\n    'HANGOUT',\n    'HAUS',\n    'HBO',\n    'HDFC',\n    'HDFCBANK',\n    'HEALTH',\n    'HEALTHCARE',\n    'HELP',\n    'HELSINKI',\n    'HERE',\n    'HERMES',\n    'HIPHOP',\n    'HISAMITSU',\n    'HITACHI',\n    'HIV',\n    'HK',\n    'HKT',\n    'HM',\n    'HN',\n    'HOCKEY',\n    'HOLDINGS',\n    'HOLIDAY',\n    'HOMEDEPOT',\n    'HOMEGOODS',\n    'HOMES',\n    'HOMESENSE',\n    'HONDA',\n    'HORSE',\n    'HOSPITAL',\n    'HOST',\n    'HOSTING',\n    'HOT',\n    'HOTELS',\n    'HOTMAIL',\n    'HOUSE',\n    'HOW',\n    'HR',\n    'HSBC',\n    'HT',\n    'HU',\n    'HUGHES',\n    'HYATT',\n    'HYUNDAI',\n    'IBM',\n    'ICBC',\n    'ICE',\n    'ICU',\n    'ID',\n    'IE',\n    'IEEE',\n    'IFM',\n    'IKANO',\n    'IL',\n    'IM',\n    'IMAMAT',\n    'IMDB',\n    'IMMO',\n    'IMMOBILIEN',\n    'IN',\n    'INC',\n    'INDUSTRIES',\n    'INFINITI',\n    'INFO',\n    'ING',\n    'INK',\n    'INSTITUTE',\n    'INSURANCE',\n    'INSURE',\n    'INT',\n    'INTERNATIONAL',\n    'INTUIT',\n    'INVESTMENTS',\n    'IO',\n    'IPIRANGA',\n    'IQ',\n    'IR',\n    'IRISH',\n    'IS',\n    'ISMAILI',\n    'IST',\n    'ISTANBUL',\n    'IT',\n    'ITAU',\n    'ITV',\n    'JAGUAR',\n    'JAVA',\n    'JCB',\n    'JE',\n    'JEEP',\n    'JETZT',\n    'JEWELRY',\n    'JIO',\n    'JLL',\n    'JM',\n    'JMP',\n    'JNJ',\n    'JO',\n    'JOBS',\n    'JOBURG',\n    'JOT',\n    'JOY',\n    'JP',\n    'JPMORGAN',\n    'JPRS',\n    'JUEGOS',\n    'JUNIPER',\n    'KAUFEN',\n    'KDDI',\n    'KE',\n    'KERRYHOTELS',\n    'KERRYLOGISTICS',\n    'KERRYPROPERTIES',\n    'KFH',\n    'KG',\n    'KH',\n    'KI',\n    'KIA',\n    'KIDS',\n    'KIM',\n    'KINDLE',\n    'KITCHEN',\n    'KIWI',\n    'KM',\n    'KN',\n    'KOELN',\n    'KOMATSU',\n    'KOSHER',\n    'KP',\n    'KPMG',\n    'KPN',\n    'KR',\n    'KRD',\n    'KRED',\n    'KUOKGROUP',\n    'KW',\n    'KY',\n    'KYOTO',\n    'KZ',\n    'LA',\n    'LACAIXA',\n    'LAMBORGHINI',\n    'LAMER',\n    'LANCASTER',\n    'LAND',\n    'LANDROVER',\n    'LANXESS',\n    'LASALLE',\n    'LAT',\n    'LATINO',\n    'LATROBE',\n    'LAW',\n    'LAWYER',\n    'LB',\n    'LC',\n    'LDS',\n    'LEASE',\n    'LECLERC',\n    'LEFRAK',\n    'LEGAL',\n    'LEGO',\n    'LEXUS',\n    'LGBT',\n    'LI',\n    'LIDL',\n    'LIFE',\n    'LIFEINSURANCE',\n    'LIFESTYLE',\n    'LIGHTING',\n    'LIKE',\n    'LILLY',\n    'LIMITED',\n    'LIMO',\n    'LINCOLN',\n    'LINK',\n    'LIPSY',\n    'LIVE',\n    'LIVING',\n    'LK',\n    'LLC',\n    'LLP',\n    'LOAN',\n    'LOANS',\n    'LOCKER',\n    'LOCUS',\n    'LOL',\n    'LONDON',\n    'LOTTE',\n    'LOTTO',\n    'LOVE',\n    'LPL',\n    'LPLFINANCIAL',\n    'LR',\n    'LS',\n    'LT',\n    'LTD',\n    'LTDA',\n    'LU',\n    'LUNDBECK',\n    'LUXE',\n    'LUXURY',\n    'LV',\n    'LY',\n    'MA',\n    'MADRID',\n    'MAIF',\n    'MAISON',\n    'MAKEUP',\n    'MAN',\n    'MANAGEMENT',\n    'MANGO',\n    'MAP',\n    'MARKET',\n    'MARKETING',\n    'MARKETS',\n    'MARRIOTT',\n    'MARSHALLS',\n    'MATTEL',\n    'MBA',\n    'MC',\n    'MCKINSEY',\n    'MD',\n    'ME',\n    'MED',\n    'MEDIA',\n    'MEET',\n    'MELBOURNE',\n    'MEME',\n    'MEMORIAL',\n    'MEN',\n    'MENU',\n    'MERCKMSD',\n    'MG',\n    'MH',\n    'MIAMI',\n    'MICROSOFT',\n    'MIL',\n    'MINI',\n    'MINT',\n    'MIT',\n    'MITSUBISHI',\n    'MK',\n    'ML',\n    'MLB',\n    'MLS',\n    'MM',\n    'MMA',\n    'MN',\n    'MO',\n    'MOBI',\n    'MOBILE',\n    'MODA',\n    'MOE',\n    'MOI',\n    'MOM',\n    'MONASH',\n    'MONEY',\n    'MONSTER',\n    'MORMON',\n    'MORTGAGE',\n    'MOSCOW',\n    'MOTO',\n    'MOTORCYCLES',\n    'MOV',\n    'MOVIE',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MSD',\n    'MT',\n    'MTN',\n    'MTR',\n    'MU',\n    'MUSEUM',\n    'MUSIC',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NAB',\n    'NAGOYA',\n    'NAME',\n    'NATURA',\n    'NAVY',\n    'NBA',\n    'NC',\n    'NE',\n    'NEC',\n    'NET',\n    'NETBANK',\n    'NETFLIX',\n    'NETWORK',\n    'NEUSTAR',\n    'NEW',\n    'NEWS',\n    'NEXT',\n    'NEXTDIRECT',\n    'NEXUS',\n    'NF',\n    'NFL',\n    'NG',\n    'NGO',\n    'NHK',\n    'NI',\n    'NICO',\n    'NIKE',\n    'NIKON',\n    'NINJA',\n    'NISSAN',\n    'NISSAY',\n    'NL',\n    'NO',\n    'NOKIA',\n    'NORTON',\n    'NOW',\n    'NOWRUZ',\n    'NOWTV',\n    'NP',\n    'NR',\n    'NRA',\n    'NRW',\n    'NTT',\n    'NU',\n    'NYC',\n    'NZ',\n    'OBI',\n    'OBSERVER',\n    'OFFICE',\n    'OKINAWA',\n    'OLAYAN',\n    'OLAYANGROUP',\n    'OLLO',\n    'OM',\n    'OMEGA',\n    'ONE',\n    'ONG',\n    'ONL',\n    'ONLINE',\n    'OOO',\n    'OPEN',\n    'ORACLE',\n    'ORANGE',\n    'ORG',\n    'ORGANIC',\n    'ORIGINS',\n    'OSAKA',\n    'OTSUKA',\n    'OTT',\n    'OVH',\n    'PA',\n    'PAGE',\n    'PANASONIC',\n    'PARIS',\n    'PARS',\n    'PARTNERS',\n    'PARTS',\n    'PARTY',\n    'PAY',\n    'PCCW',\n    'PE',\n    'PET',\n    'PF',\n    'PFIZER',\n    'PG',\n    'PH',\n    'PHARMACY',\n    'PHD',\n    'PHILIPS',\n    'PHONE',\n    'PHOTO',\n    'PHOTOGRAPHY',\n    'PHOTOS',\n    'PHYSIO',\n    'PICS',\n    'PICTET',\n    'PICTURES',\n    'PID',\n    'PIN',\n    'PING',\n    'PINK',\n    'PIONEER',\n    'PIZZA',\n    'PK',\n    'PL',\n    'PLACE',\n    'PLAY',\n    'PLAYSTATION',\n    'PLUMBING',\n    'PLUS',\n    'PM',\n    'PN',\n    'PNC',\n    'POHL',\n    'POKER',\n    'POLITIE',\n    'PORN',\n    'POST',\n    'PR',\n    'PRAMERICA',\n    'PRAXI',\n    'PRESS',\n    'PRIME',\n    'PRO',\n    'PROD',\n    'PRODUCTIONS',\n    'PROF',\n    'PROGRESSIVE',\n    'PROMO',\n    'PROPERTIES',\n    'PROPERTY',\n    'PROTECTION',\n    'PRU',\n    'PRUDENTIAL',\n    'PS',\n    'PT',\n    'PUB',\n    'PW',\n    'PWC',\n    'PY',\n    'QA',\n    'QPON',\n    'QUEBEC',\n    'QUEST',\n    'RACING',\n    'RADIO',\n    'RE',\n    'READ',\n    'REALESTATE',\n    'REALTOR',\n    'REALTY',\n    'RECIPES',\n    'RED',\n    'REDSTONE',\n    'REDUMBRELLA',\n    'REHAB',\n    'REISE',\n    'REISEN',\n    'REIT',\n    'RELIANCE',\n    'REN',\n    'RENT',\n    'RENTALS',\n    'REPAIR',\n    'REPORT',\n    'REPUBLICAN',\n    'REST',\n    'RESTAURANT',\n    'REVIEW',\n    'REVIEWS',\n    'REXROTH',\n    'RICH',\n    'RICHARDLI',\n    'RICOH',\n    'RIL',\n    'RIO',\n    'RIP',\n    'RO',\n    'ROCKS',\n    'RODEO',\n    'ROGERS',\n    'ROOM',\n    'RS',\n    'RSVP',\n    'RU',\n    'RUGBY',\n    'RUHR',\n    'RUN',\n    'RW',\n    'RWE',\n    'RYUKYU',\n    'SA',\n    'SAARLAND',\n    'SAFE',\n    'SAFETY',\n    'SAKURA',\n    'SALE',\n    'SALON',\n    'SAMSCLUB',\n    'SAMSUNG',\n    'SANDVIK',\n    'SANDVIKCOROMANT',\n    'SANOFI',\n    'SAP',\n    'SARL',\n    'SAS',\n    'SAVE',\n    'SAXO',\n    'SB',\n    'SBI',\n    'SBS',\n    'SC',\n    'SCB',\n    'SCHAEFFLER',\n    'SCHMIDT',\n    'SCHOLARSHIPS',\n    'SCHOOL',\n    'SCHULE',\n    'SCHWARZ',\n    'SCIENCE',\n    'SCOT',\n    'SD',\n    'SE',\n    'SEARCH',\n    'SEAT',\n    'SECURE',\n    'SECURITY',\n    'SEEK',\n    'SELECT',\n    'SENER',\n    'SERVICES',\n    'SEVEN',\n    'SEW',\n    'SEX',\n    'SEXY',\n    'SFR',\n    'SG',\n    'SH',\n    'SHANGRILA',\n    'SHARP',\n    'SHAW',\n    'SHELL',\n    'SHIA',\n    'SHIKSHA',\n    'SHOES',\n    'SHOP',\n    'SHOPPING',\n    'SHOUJI',\n    'SHOW',\n    'SI',\n    'SILK',\n    'SINA',\n    'SINGLES',\n    'SITE',\n    'SJ',\n    'SK',\n    'SKI',\n    'SKIN',\n    'SKY',\n    'SKYPE',\n    'SL',\n    'SLING',\n    'SM',\n    'SMART',\n    'SMILE',\n    'SN',\n    'SNCF',\n    'SO',\n    'SOCCER',\n    'SOCIAL',\n    'SOFTBANK',\n    'SOFTWARE',\n    'SOHU',\n    'SOLAR',\n    'SOLUTIONS',\n    'SONG',\n    'SONY',\n    'SOY',\n    'SPA',\n    'SPACE',\n    'SPORT',\n    'SPOT',\n    'SR',\n    'SRL',\n    'SS',\n    'ST',\n    'STADA',\n    'STAPLES',\n    'STAR',\n    'STATEBANK',\n    'STATEFARM',\n    'STC',\n    'STCGROUP',\n    'STOCKHOLM',\n    'STORAGE',\n    'STORE',\n    'STREAM',\n    'STUDIO',\n    'STUDY',\n    'STYLE',\n    'SU',\n    'SUCKS',\n    'SUPPLIES',\n    'SUPPLY',\n    'SUPPORT',\n    'SURF',\n    'SURGERY',\n    'SUZUKI',\n    'SV',\n    'SWATCH',\n    'SWISS',\n    'SX',\n    'SY',\n    'SYDNEY',\n    'SYSTEMS',\n    'SZ',\n    'TAB',\n    'TAIPEI',\n    'TALK',\n    'TAOBAO',\n    'TARGET',\n    'TATAMOTORS',\n    'TATAR',\n    'TATTOO',\n    'TAX',\n    'TAXI',\n    'TC',\n    'TCI',\n    'TD',\n    'TDK',\n    'TEAM',\n    'TECH',\n    'TECHNOLOGY',\n    'TEL',\n    'TEMASEK',\n    'TENNIS',\n    'TEVA',\n    'TF',\n    'TG',\n    'TH',\n    'THD',\n    'THEATER',\n    'THEATRE',\n    'TIAA',\n    'TICKETS',\n    'TIENDA',\n    'TIPS',\n    'TIRES',\n    'TIROL',\n    'TJ',\n    'TJMAXX',\n    'TJX',\n    'TK',\n    'TKMAXX',\n    'TL',\n    'TM',\n    'TMALL',\n    'TN',\n    'TO',\n    'TODAY',\n    'TOKYO',\n    'TOOLS',\n    'TOP',\n    'TORAY',\n    'TOSHIBA',\n    'TOTAL',\n    'TOURS',\n    'TOWN',\n    'TOYOTA',\n    'TOYS',\n    'TR',\n    'TRADE',\n    'TRADING',\n    'TRAINING',\n    'TRAVEL',\n    'TRAVELERS',\n    'TRAVELERSINSURANCE',\n    'TRUST',\n    'TRV',\n    'TT',\n    'TUBE',\n    'TUI',\n    'TUNES',\n    'TUSHU',\n    'TV',\n    'TVS',\n    'TW',\n    'TZ',\n    'UA',\n    'UBANK',\n    'UBS',\n    'UG',\n    'UK',\n    'UNICOM',\n    'UNIVERSITY',\n    'UNO',\n    'UOL',\n    'UPS',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VACATIONS',\n    'VANA',\n    'VANGUARD',\n    'VC',\n    'VE',\n    'VEGAS',\n    'VENTURES',\n    'VERISIGN',\n    'VERSICHERUNG',\n    'VET',\n    'VG',\n    'VI',\n    'VIAJES',\n    'VIDEO',\n    'VIG',\n    'VIKING',\n    'VILLAS',\n    'VIN',\n    'VIP',\n    'VIRGIN',\n    'VISA',\n    'VISION',\n    'VIVA',\n    'VIVO',\n    'VLAANDEREN',\n    'VN',\n    'VODKA',\n    'VOLVO',\n    'VOTE',\n    'VOTING',\n    'VOTO',\n    'VOYAGE',\n    'VU',\n    'WALES',\n    'WALMART',\n    'WALTER',\n    'WANG',\n    'WANGGOU',\n    'WATCH',\n    'WATCHES',\n    'WEATHER',\n    'WEATHERCHANNEL',\n    'WEBCAM',\n    'WEBER',\n    'WEBSITE',\n    'WED',\n    'WEDDING',\n    'WEIBO',\n    'WEIR',\n    'WF',\n    'WHOSWHO',\n    'WIEN',\n    'WIKI',\n    'WILLIAMHILL',\n    'WIN',\n    'WINDOWS',\n    'WINE',\n    'WINNERS',\n    'WME',\n    'WOLTERSKLUWER',\n    'WOODSIDE',\n    'WORK',\n    'WORKS',\n    'WORLD',\n    'WOW',\n    'WS',\n    'WTC',\n    'WTF',\n    'XBOX',\n    'XEROX',\n    'XFINITY',\n    'XIHUAN',\n    'XIN',\n    'XN--11B4C3D',\n    'XN--1CK2E1B',\n    'XN--1QQW23A',\n    'XN--2SCRJ9C',\n    'XN--30RR7Y',\n    'XN--3BST00M',\n    'XN--3DS443G',\n    'XN--3E0B707E',\n    'XN--3HCRJ9C',\n    'XN--3PXU8K',\n    'XN--42C2D9A',\n    'XN--45BR5CYL',\n    'XN--45BRJ9C',\n    'XN--45Q11C',\n    'XN--4DBRK0CE',\n    'XN--4GBRIM',\n    'XN--54B7FTA0CC',\n    'XN--55QW42G',\n    'XN--55QX5D',\n    'XN--5SU34J936BGSG',\n    'XN--5TZM5G',\n    'XN--6FRZ82G',\n    'XN--6QQ986B3XL',\n    'XN--80ADXHKS',\n    'XN--80AO21A',\n    'XN--80AQECDR1A',\n    'XN--80ASEHDB',\n    'XN--80ASWG',\n    'XN--8Y0A063A',\n    'XN--90A3AC',\n    'XN--90AE',\n    'XN--90AIS',\n    'XN--9DBQ2A',\n    'XN--9ET52U',\n    'XN--9KRT00A',\n    'XN--B4W605FERD',\n    'XN--BCK1B9A5DRE4C',\n    'XN--C1AVG',\n    'XN--C2BR7G',\n    'XN--CCK2B3B',\n    'XN--CCKWCXETD',\n    'XN--CG4BKI',\n    'XN--CLCHC0EA0B2G2A9GCD',\n    'XN--CZR694B',\n    'XN--CZRS0T',\n    'XN--CZRU2D',\n    'XN--D1ACJ3B',\n    'XN--D1ALF',\n    'XN--E1A4C',\n    'XN--ECKVDTC9D',\n    'XN--EFVY88H',\n    'XN--FCT429K',\n    'XN--FHBEI',\n    'XN--FIQ228C5HS',\n    'XN--FIQ64B',\n    'XN--FIQS8S',\n    'XN--FIQZ9S',\n    'XN--FJQ720A',\n    'XN--FLW351E',\n    'XN--FPCRJ9C3D',\n    'XN--FZC2C9E2C',\n    'XN--FZYS8D69UVGM',\n    'XN--G2XX48C',\n    'XN--GCKR3F0F',\n    'XN--GECRJ9C',\n    'XN--GK3AT1E',\n    'XN--H2BREG3EVE',\n    'XN--H2BRJ9C',\n    'XN--H2BRJ9C8C',\n    'XN--HXT814E',\n    'XN--I1B6B1A6A2E',\n    'XN--IMR513N',\n    'XN--IO0A7I',\n    'XN--J1AEF',\n    'XN--J1AMH',\n    'XN--J6W193G',\n    'XN--JLQ480N2RG',\n    'XN--JVR189M',\n    'XN--KCRX77D1X4A',\n    'XN--KPRW13D',\n    'XN--KPRY57D',\n    'XN--KPUT3I',\n    'XN--L1ACC',\n    'XN--LGBBAT1AD8J',\n    'XN--MGB9AWBF',\n    'XN--MGBA3A3EJT',\n    'XN--MGBA3A4F16A',\n    'XN--MGBA7C0BBN0A',\n    'XN--MGBAAM7A8H',\n    'XN--MGBAB2BD',\n    'XN--MGBAH1A3HJKRD',\n    'XN--MGBAI9AZGQP6J',\n    'XN--MGBAYH7GPA',\n    'XN--MGBBH1A',\n    'XN--MGBBH1A71E',\n    'XN--MGBC0A9AZCG',\n    'XN--MGBCA7DZDO',\n    'XN--MGBCPQ6GPA1A',\n    'XN--MGBERP4A5D4AR',\n    'XN--MGBGU82A',\n    'XN--MGBI4ECEXP',\n    'XN--MGBPL2FH',\n    'XN--MGBT3DHD',\n    'XN--MGBTX2B',\n    'XN--MGBX4CD0AB',\n    'XN--MIX891F',\n    'XN--MK1BU44C',\n    'XN--MXTQ1M',\n    'XN--NGBC5AZD',\n    'XN--NGBE9E0A',\n    'XN--NGBRX',\n    'XN--NODE',\n    'XN--NQV7F',\n    'XN--NQV7FS00EMA',\n    'XN--NYQY26A',\n    'XN--O3CW4H',\n    'XN--OGBPF8FL',\n    'XN--OTU796D',\n    'XN--P1ACF',\n    'XN--P1AI',\n    'XN--PGBS0DH',\n    'XN--PSSY2U',\n    'XN--Q7CE6A',\n    'XN--Q9JYB4C',\n    'XN--QCKA1PMC',\n    'XN--QXA6A',\n    'XN--QXAM',\n    'XN--RHQV96G',\n    'XN--ROVU88B',\n    'XN--RVC1E0AM3E',\n    'XN--S9BRJ9C',\n    'XN--SES554G',\n    'XN--T60B56A',\n    'XN--TCKWE',\n    'XN--TIQ49XQYJ',\n    'XN--UNUP4Y',\n    'XN--VERMGENSBERATER-CTB',\n    'XN--VERMGENSBERATUNG-PWB',\n    'XN--VHQUV',\n    'XN--VUQ861B',\n    'XN--W4R85EL8FHU5DNRA',\n    'XN--W4RS40L',\n    'XN--WGBH1C',\n    'XN--WGBL6A',\n    'XN--XHQ521B',\n    'XN--XKC2AL3HYE2A',\n    'XN--XKC2DL3A5EE0H',\n    'XN--Y9A3AQ',\n    'XN--YFRO4I67O',\n    'XN--YGBI2AMMX',\n    'XN--ZFR164B',\n    'XXX',\n    'XYZ',\n    'YACHTS',\n    'YAHOO',\n    'YAMAXUN',\n    'YANDEX',\n    'YE',\n    'YODOBASHI',\n    'YOGA',\n    'YOKOHAMA',\n    'YOU',\n    'YOUTUBE',\n    'YT',\n    'YUN',\n    'ZA',\n    'ZAPPOS',\n    'ZARA',\n    'ZERO',\n    'ZIP',\n    'ZM',\n    'ZONE',\n    'ZUERICH',\n    'ZW'\n];\n\n\n// Keep as upper-case to make updating from source easier\n\nmodule.exports = new Set(internals.tlds.map((tld) => tld.toLowerCase()));\n","'use strict';\n\nconst Stringify = require('./stringify');\n\n\nconst internals = {};\n\n\nmodule.exports = class extends Error {\n\n    constructor(args) {\n\n        const msgs = args\n            .filter((arg) => arg !== '')\n            .map((arg) => {\n\n                return typeof arg === 'string' ? arg : arg instanceof Error ? arg.message : Stringify(arg);\n            });\n\n        super(msgs.join(' ') || 'Unknown error');\n\n        if (typeof Error.captureStackTrace === 'function') {            // $lab:coverage:ignore$\n            Error.captureStackTrace(this, exports.assert);\n        }\n    }\n};\n","// 로깅 유틸리티\r\n\r\nconst environment = require('../config/environment');\r\n\r\n/**\r\n * 로그 레벨 정의\r\n */\r\nconst LOG_LEVELS = {\r\n  ERROR: 0,\r\n  WARN: 1,\r\n  INFO: 2,\r\n  DEBUG: 3,\r\n};\r\n\r\n/**\r\n * 현재 로그 레벨 설정\r\n */\r\nconst currentLogLevel = environment.isDevelopment ? LOG_LEVELS.DEBUG : LOG_LEVELS.INFO;\r\n\r\n/**\r\n * 로그 메시지 포맷팅\r\n * @param {string} level - 로그 레벨\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n * @returns {Object} 포맷된 로그 객체\r\n */\r\nfunction formatLog(level, message, meta = {}) {\r\n  return {\r\n    timestamp: new Date().toISOString(),\r\n    level,\r\n    message,\r\n    stage: environment.stage,\r\n    ...meta,\r\n  };\r\n}\r\n\r\n/**\r\n * 로그 출력 함수\r\n * @param {number} level - 로그 레벨 숫자\r\n * @param {string} levelName - 로그 레벨 이름\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction log(level, levelName, message, meta = {}) {\r\n  if (level <= currentLogLevel) {\r\n    const logData = formatLog(levelName, message, meta);\r\n    \r\n    if (level === LOG_LEVELS.ERROR) {\r\n      console.error(JSON.stringify(logData));\r\n    } else if (level === LOG_LEVELS.WARN) {\r\n      console.warn(JSON.stringify(logData));\r\n    } else {\r\n      console.log(JSON.stringify(logData));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 에러 로그\r\n * @param {string} message - 메시지\r\n * @param {Error|Object} error - 에러 객체\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction error(message, error = null, meta = {}) {\r\n  const errorMeta = {\r\n    ...meta,\r\n    error: error ? {\r\n      name: error.name,\r\n      message: error.message,\r\n      stack: error.stack,\r\n    } : null,\r\n  };\r\n  \r\n  log(LOG_LEVELS.ERROR, 'ERROR', message, errorMeta);\r\n}\r\n\r\n/**\r\n * 경고 로그\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction warn(message, meta = {}) {\r\n  log(LOG_LEVELS.WARN, 'WARN', message, meta);\r\n}\r\n\r\n/**\r\n * 정보 로그\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction info(message, meta = {}) {\r\n  log(LOG_LEVELS.INFO, 'INFO', message, meta);\r\n}\r\n\r\n/**\r\n * 디버그 로그\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction debug(message, meta = {}) {\r\n  log(LOG_LEVELS.DEBUG, 'DEBUG', message, meta);\r\n}\r\n\r\n/**\r\n * API 요청 로그\r\n * @param {Object} event - Lambda 이벤트 객체\r\n * @param {string} functionName - 함수명\r\n */\r\nfunction logRequest(event, functionName) {\r\n  info('API Request', {\r\n    function: functionName,\r\n    httpMethod: event.httpMethod,\r\n    path: event.path,\r\n    queryStringParameters: event.queryStringParameters,\r\n    headers: {\r\n      'user-agent': event.headers?.['user-agent'],\r\n      'x-forwarded-for': event.headers?.['x-forwarded-for'],\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * API 응답 로그\r\n * @param {Object} response - Lambda 응답 객체\r\n * @param {string} functionName - 함수명\r\n * @param {number} duration - 실행 시간 (ms)\r\n */\r\nfunction logResponse(response, functionName, duration) {\r\n  info('API Response', {\r\n    function: functionName,\r\n    statusCode: response.statusCode,\r\n    duration: `${duration}ms`,\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  error,\r\n  warn,\r\n  info,\r\n  debug,\r\n  logRequest,\r\n  logResponse,\r\n  LOG_LEVELS,\r\n};","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst DeepEqual = require('@hapi/hoek/lib/deepEqual');\nconst Reach = require('@hapi/hoek/lib/reach');\n\nconst Any = require('./any');\nconst Common = require('../common');\nconst Compile = require('../compile');\n\n\nconst internals = {};\n\n\nmodule.exports = Any.extend({\n\n    type: 'array',\n\n    flags: {\n\n        single: { default: false },\n        sparse: { default: false }\n    },\n\n    terms: {\n\n        items: { init: [], manifest: 'schema' },\n        ordered: { init: [], manifest: 'schema' },\n\n        _exclusions: { init: [] },\n        _inclusions: { init: [] },\n        _requireds: { init: [] }\n    },\n\n    coerce: {\n        from: 'object',\n        method(value, { schema, state, prefs }) {\n\n            if (!Array.isArray(value)) {\n                return;\n            }\n\n            const sort = schema.$_getRule('sort');\n            if (!sort) {\n                return;\n            }\n\n            return internals.sort(schema, value, sort.args.options, state, prefs);\n        }\n    },\n\n    validate(value, { schema, error }) {\n\n        if (!Array.isArray(value)) {\n            if (schema._flags.single) {\n                const single = [value];\n                single[Common.symbols.arraySingle] = true;\n                return { value: single };\n            }\n\n            return { errors: error('array.base') };\n        }\n\n        if (!schema.$_getRule('items') &&\n            !schema.$_terms.externals) {\n\n            return;\n        }\n\n        return { value: value.slice() };        // Clone the array so that we don't modify the original\n    },\n\n    rules: {\n\n        has: {\n            method(schema) {\n\n                schema = this.$_compile(schema, { appendPath: true });\n                const obj = this.$_addRule({ name: 'has', args: { schema } });\n                obj.$_mutateRegister(schema);\n                return obj;\n            },\n            validate(value, { state, prefs, error }, { schema: has }) {\n\n                const ancestors = [value, ...state.ancestors];\n                for (let i = 0; i < value.length; ++i) {\n                    const localState = state.localize([...state.path, i], ancestors, has);\n                    if (has.$_match(value[i], localState, prefs)) {\n                        return value;\n                    }\n                }\n\n                const patternLabel = has._flags.label;\n                if (patternLabel) {\n                    return error('array.hasKnown', { patternLabel });\n                }\n\n                return error('array.hasUnknown', null);\n            },\n            multi: true\n        },\n\n        items: {\n            method(...schemas) {\n\n                Common.verifyFlat(schemas, 'items');\n\n                const obj = this.$_addRule('items');\n\n                for (let i = 0; i < schemas.length; ++i) {\n                    const type = Common.tryWithPath(() => this.$_compile(schemas[i]), i, { append: true });\n                    obj.$_terms.items.push(type);\n                }\n\n                return obj.$_mutateRebuild();\n            },\n            validate(value, { schema, error, state, prefs, errorsArray }) {\n\n                const requireds = schema.$_terms._requireds.slice();\n                const ordereds = schema.$_terms.ordered.slice();\n                const inclusions = [...schema.$_terms._inclusions, ...requireds];\n\n                const wasArray = !value[Common.symbols.arraySingle];\n                delete value[Common.symbols.arraySingle];\n\n                const errors = errorsArray();\n\n                let il = value.length;\n                for (let i = 0; i < il; ++i) {\n                    const item = value[i];\n\n                    let errored = false;\n                    let isValid = false;\n\n                    const key = wasArray ? i : new Number(i);       // eslint-disable-line no-new-wrappers\n                    const path = [...state.path, key];\n\n                    // Sparse\n\n                    if (!schema._flags.sparse &&\n                        item === undefined) {\n\n                        errors.push(error('array.sparse', { key, path, pos: i, value: undefined }, state.localize(path)));\n                        if (prefs.abortEarly) {\n                            return errors;\n                        }\n\n                        ordereds.shift();\n                        continue;\n                    }\n\n                    // Exclusions\n\n                    const ancestors = [value, ...state.ancestors];\n\n                    for (const exclusion of schema.$_terms._exclusions) {\n                        if (!exclusion.$_match(item, state.localize(path, ancestors, exclusion), prefs, { presence: 'ignore' })) {\n                            continue;\n                        }\n\n                        errors.push(error('array.excludes', { pos: i, value: item }, state.localize(path)));\n                        if (prefs.abortEarly) {\n                            return errors;\n                        }\n\n                        errored = true;\n                        ordereds.shift();\n                        break;\n                    }\n\n                    if (errored) {\n                        continue;\n                    }\n\n                    // Ordered\n\n                    if (schema.$_terms.ordered.length) {\n                        if (ordereds.length) {\n                            const ordered = ordereds.shift();\n                            const res = ordered.$_validate(item, state.localize(path, ancestors, ordered), prefs);\n                            if (!res.errors) {\n                                if (ordered._flags.result === 'strip') {\n                                    internals.fastSplice(value, i);\n                                    --i;\n                                    --il;\n                                }\n                                else if (!schema._flags.sparse && res.value === undefined) {\n                                    errors.push(error('array.sparse', { key, path, pos: i, value: undefined }, state.localize(path)));\n                                    if (prefs.abortEarly) {\n                                        return errors;\n                                    }\n\n                                    continue;\n                                }\n                                else {\n                                    value[i] = res.value;\n                                }\n                            }\n                            else {\n                                errors.push(...res.errors);\n                                if (prefs.abortEarly) {\n                                    return errors;\n                                }\n                            }\n\n                            continue;\n                        }\n                        else if (!schema.$_terms.items.length) {\n                            errors.push(error('array.orderedLength', { pos: i, limit: schema.$_terms.ordered.length }));\n                            if (prefs.abortEarly) {\n                                return errors;\n                            }\n\n                            break;      // No reason to continue since there are no other rules to validate other than array.orderedLength\n                        }\n                    }\n\n                    // Requireds\n\n                    const requiredChecks = [];\n                    let jl = requireds.length;\n                    for (let j = 0; j < jl; ++j) {\n                        const localState = state.localize(path, ancestors, requireds[j]);\n                        localState.snapshot();\n\n                        const res = requireds[j].$_validate(item, localState, prefs);\n                        requiredChecks[j] = res;\n\n                        if (!res.errors) {\n                            localState.commit();\n                            value[i] = res.value;\n                            isValid = true;\n                            internals.fastSplice(requireds, j);\n                            --j;\n                            --jl;\n\n                            if (!schema._flags.sparse &&\n                                res.value === undefined) {\n\n                                errors.push(error('array.sparse', { key, path, pos: i, value: undefined }, state.localize(path)));\n                                if (prefs.abortEarly) {\n                                    return errors;\n                                }\n                            }\n\n                            break;\n                        }\n\n                        localState.restore();\n                    }\n\n                    if (isValid) {\n                        continue;\n                    }\n\n                    // Inclusions\n\n                    const stripUnknown = prefs.stripUnknown && !!prefs.stripUnknown.arrays || false;\n\n                    jl = inclusions.length;\n                    for (const inclusion of inclusions) {\n\n                        // Avoid re-running requireds that already didn't match in the previous loop\n\n                        let res;\n                        const previousCheck = requireds.indexOf(inclusion);\n                        if (previousCheck !== -1) {\n                            res = requiredChecks[previousCheck];\n                        }\n                        else {\n                            const localState = state.localize(path, ancestors, inclusion);\n                            localState.snapshot();\n\n                            res = inclusion.$_validate(item, localState, prefs);\n                            if (!res.errors) {\n                                localState.commit();\n                                if (inclusion._flags.result === 'strip') {\n                                    internals.fastSplice(value, i);\n                                    --i;\n                                    --il;\n                                }\n                                else if (!schema._flags.sparse &&\n                                    res.value === undefined) {\n\n                                    errors.push(error('array.sparse', { key, path, pos: i, value: undefined }, state.localize(path)));\n                                    errored = true;\n                                }\n                                else {\n                                    value[i] = res.value;\n                                }\n\n                                isValid = true;\n                                break;\n                            }\n\n                            localState.restore();\n                        }\n\n                        // Return the actual error if only one inclusion defined\n\n                        if (jl === 1) {\n                            if (stripUnknown) {\n                                internals.fastSplice(value, i);\n                                --i;\n                                --il;\n                                isValid = true;\n                                break;\n                            }\n\n                            errors.push(...res.errors);\n                            if (prefs.abortEarly) {\n                                return errors;\n                            }\n\n                            errored = true;\n                            break;\n                        }\n                    }\n\n                    if (errored) {\n                        continue;\n                    }\n\n                    if ((schema.$_terms._inclusions.length || schema.$_terms._requireds.length) &&\n                        !isValid) {\n\n                        if (stripUnknown) {\n                            internals.fastSplice(value, i);\n                            --i;\n                            --il;\n                            continue;\n                        }\n\n                        errors.push(error('array.includes', { pos: i, value: item }, state.localize(path)));\n                        if (prefs.abortEarly) {\n                            return errors;\n                        }\n                    }\n                }\n\n                if (requireds.length) {\n                    internals.fillMissedErrors(schema, errors, requireds, value, state, prefs);\n                }\n\n                if (ordereds.length) {\n                    internals.fillOrderedErrors(schema, errors, ordereds, value, state, prefs);\n\n                    if (!errors.length) {\n                        internals.fillDefault(ordereds, value, state, prefs);\n                    }\n                }\n\n                return errors.length ? errors : value;\n            },\n\n            priority: true,\n            manifest: false\n        },\n\n        length: {\n            method(limit) {\n\n                return this.$_addRule({ name: 'length', args: { limit }, operator: '=' });\n            },\n            validate(value, helpers, { limit }, { name, operator, args }) {\n\n                if (Common.compare(value.length, limit, operator)) {\n                    return value;\n                }\n\n                return helpers.error('array.' + name, { limit: args.limit, value });\n            },\n            args: [\n                {\n                    name: 'limit',\n                    ref: true,\n                    assert: Common.limit,\n                    message: 'must be a positive integer'\n                }\n            ]\n        },\n\n        max: {\n            method(limit) {\n\n                return this.$_addRule({ name: 'max', method: 'length', args: { limit }, operator: '<=' });\n            }\n        },\n\n        min: {\n            method(limit) {\n\n                return this.$_addRule({ name: 'min', method: 'length', args: { limit }, operator: '>=' });\n            }\n        },\n\n        ordered: {\n            method(...schemas) {\n\n                Common.verifyFlat(schemas, 'ordered');\n\n                const obj = this.$_addRule('items');\n\n                for (let i = 0; i < schemas.length; ++i) {\n                    const type = Common.tryWithPath(() => this.$_compile(schemas[i]), i, { append: true });\n                    internals.validateSingle(type, obj);\n\n                    obj.$_mutateRegister(type);\n                    obj.$_terms.ordered.push(type);\n                }\n\n                return obj.$_mutateRebuild();\n            }\n        },\n\n        single: {\n            method(enabled) {\n\n                const value = enabled === undefined ? true : !!enabled;\n                Assert(!value || !this._flags._arrayItems, 'Cannot specify single rule when array has array items');\n\n                return this.$_setFlag('single', value);\n            }\n        },\n\n        sort: {\n            method(options = {}) {\n\n                Common.assertOptions(options, ['by', 'order']);\n\n                const settings = {\n                    order: options.order || 'ascending'\n                };\n\n                if (options.by) {\n                    settings.by = Compile.ref(options.by, { ancestor: 0 });\n                    Assert(!settings.by.ancestor, 'Cannot sort by ancestor');\n                }\n\n                return this.$_addRule({ name: 'sort', args: { options: settings } });\n            },\n            validate(value, { error, state, prefs, schema }, { options }) {\n\n                const { value: sorted, errors } = internals.sort(schema, value, options, state, prefs);\n                if (errors) {\n                    return errors;\n                }\n\n                for (let i = 0; i < value.length; ++i) {\n                    if (value[i] !== sorted[i]) {\n                        return error('array.sort', { order: options.order, by: options.by ? options.by.key : 'value' });\n                    }\n                }\n\n                return value;\n            },\n            convert: true\n        },\n\n        sparse: {\n            method(enabled) {\n\n                const value = enabled === undefined ? true : !!enabled;\n\n                if (this._flags.sparse === value) {\n                    return this;\n                }\n\n                const obj = value ? this.clone() : this.$_addRule('items');\n                return obj.$_setFlag('sparse', value, { clone: false });\n            }\n        },\n\n        unique: {\n            method(comparator, options = {}) {\n\n                Assert(!comparator || typeof comparator === 'function' || typeof comparator === 'string', 'comparator must be a function or a string');\n                Common.assertOptions(options, ['ignoreUndefined', 'separator']);\n\n                const rule = { name: 'unique', args: { options, comparator } };\n\n                if (comparator) {\n                    if (typeof comparator === 'string') {\n                        const separator = Common.default(options.separator, '.');\n                        rule.path = separator ? comparator.split(separator) : [comparator];\n                    }\n                    else {\n                        rule.comparator = comparator;\n                    }\n                }\n\n                return this.$_addRule(rule);\n            },\n            validate(value, { state, error, schema }, { comparator: raw, options }, { comparator, path }) {\n\n                const found = {\n                    string: Object.create(null),\n                    number: Object.create(null),\n                    undefined: Object.create(null),\n                    boolean: Object.create(null),\n                    bigint: Object.create(null),\n                    object: new Map(),\n                    function: new Map(),\n                    custom: new Map()\n                };\n\n                const compare = comparator || DeepEqual;\n                const ignoreUndefined = options.ignoreUndefined;\n\n                for (let i = 0; i < value.length; ++i) {\n                    const item = path ? Reach(value[i], path) : value[i];\n                    const records = comparator ? found.custom : found[typeof item];\n                    Assert(records, 'Failed to find unique map container for type', typeof item);\n\n                    if (records instanceof Map) {\n                        const entries = records.entries();\n                        let current;\n                        while (!(current = entries.next()).done) {\n                            if (compare(current.value[0], item)) {\n                                const localState = state.localize([...state.path, i], [value, ...state.ancestors]);\n                                const context = {\n                                    pos: i,\n                                    value: value[i],\n                                    dupePos: current.value[1],\n                                    dupeValue: value[current.value[1]]\n                                };\n\n                                if (path) {\n                                    context.path = raw;\n                                }\n\n                                return error('array.unique', context, localState);\n                            }\n                        }\n\n                        records.set(item, i);\n                    }\n                    else {\n                        if ((!ignoreUndefined || item !== undefined) &&\n                            records[item] !== undefined) {\n\n                            const context = {\n                                pos: i,\n                                value: value[i],\n                                dupePos: records[item],\n                                dupeValue: value[records[item]]\n                            };\n\n                            if (path) {\n                                context.path = raw;\n                            }\n\n                            const localState = state.localize([...state.path, i], [value, ...state.ancestors]);\n                            return error('array.unique', context, localState);\n                        }\n\n                        records[item] = i;\n                    }\n                }\n\n                return value;\n            },\n            args: ['comparator', 'options'],\n            multi: true\n        }\n    },\n\n    cast: {\n        set: {\n            from: Array.isArray,\n            to(value, helpers) {\n\n                return new Set(value);\n            }\n        }\n    },\n\n    rebuild(schema) {\n\n        schema.$_terms._inclusions = [];\n        schema.$_terms._exclusions = [];\n        schema.$_terms._requireds = [];\n\n        for (const type of schema.$_terms.items) {\n            internals.validateSingle(type, schema);\n\n            if (type._flags.presence === 'required') {\n                schema.$_terms._requireds.push(type);\n            }\n            else if (type._flags.presence === 'forbidden') {\n                schema.$_terms._exclusions.push(type);\n            }\n            else {\n                schema.$_terms._inclusions.push(type);\n            }\n        }\n\n        for (const type of schema.$_terms.ordered) {\n            internals.validateSingle(type, schema);\n        }\n    },\n\n    manifest: {\n\n        build(obj, desc) {\n\n            if (desc.items) {\n                obj = obj.items(...desc.items);\n            }\n\n            if (desc.ordered) {\n                obj = obj.ordered(...desc.ordered);\n            }\n\n            return obj;\n        }\n    },\n\n    messages: {\n        'array.base': '{{#label}} must be an array',\n        'array.excludes': '{{#label}} contains an excluded value',\n        'array.hasKnown': '{{#label}} does not contain at least one required match for type {:#patternLabel}',\n        'array.hasUnknown': '{{#label}} does not contain at least one required match',\n        'array.includes': '{{#label}} does not match any of the allowed types',\n        'array.includesRequiredBoth': '{{#label}} does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)',\n        'array.includesRequiredKnowns': '{{#label}} does not contain {{#knownMisses}}',\n        'array.includesRequiredUnknowns': '{{#label}} does not contain {{#unknownMisses}} required value(s)',\n        'array.length': '{{#label}} must contain {{#limit}} items',\n        'array.max': '{{#label}} must contain less than or equal to {{#limit}} items',\n        'array.min': '{{#label}} must contain at least {{#limit}} items',\n        'array.orderedLength': '{{#label}} must contain at most {{#limit}} items',\n        'array.sort': '{{#label}} must be sorted in {#order} order by {{#by}}',\n        'array.sort.mismatching': '{{#label}} cannot be sorted due to mismatching types',\n        'array.sort.unsupported': '{{#label}} cannot be sorted due to unsupported type {#type}',\n        'array.sparse': '{{#label}} must not be a sparse array item',\n        'array.unique': '{{#label}} contains a duplicate value'\n    }\n});\n\n\n// Helpers\n\ninternals.fillMissedErrors = function (schema, errors, requireds, value, state, prefs) {\n\n    const knownMisses = [];\n    let unknownMisses = 0;\n    for (const required of requireds) {\n        const label = required._flags.label;\n        if (label) {\n            knownMisses.push(label);\n        }\n        else {\n            ++unknownMisses;\n        }\n    }\n\n    if (knownMisses.length) {\n        if (unknownMisses) {\n            errors.push(schema.$_createError('array.includesRequiredBoth', value, { knownMisses, unknownMisses }, state, prefs));\n        }\n        else {\n            errors.push(schema.$_createError('array.includesRequiredKnowns', value, { knownMisses }, state, prefs));\n        }\n    }\n    else {\n        errors.push(schema.$_createError('array.includesRequiredUnknowns', value, { unknownMisses }, state, prefs));\n    }\n};\n\n\ninternals.fillOrderedErrors = function (schema, errors, ordereds, value, state, prefs) {\n\n    const requiredOrdereds = [];\n\n    for (const ordered of ordereds) {\n        if (ordered._flags.presence === 'required') {\n            requiredOrdereds.push(ordered);\n        }\n    }\n\n    if (requiredOrdereds.length) {\n        internals.fillMissedErrors(schema, errors, requiredOrdereds, value, state, prefs);\n    }\n};\n\n\ninternals.fillDefault = function (ordereds, value, state, prefs) {\n\n    const overrides = [];\n    let trailingUndefined = true;\n\n    for (let i = ordereds.length - 1; i >= 0; --i) {\n        const ordered = ordereds[i];\n        const ancestors = [value, ...state.ancestors];\n        const override = ordered.$_validate(undefined, state.localize(state.path, ancestors, ordered), prefs).value;\n\n        if (trailingUndefined) {\n            if (override === undefined) {\n                continue;\n            }\n\n            trailingUndefined = false;\n        }\n\n        overrides.unshift(override);\n    }\n\n    if (overrides.length) {\n        value.push(...overrides);\n    }\n};\n\n\ninternals.fastSplice = function (arr, i) {\n\n    let pos = i;\n    while (pos < arr.length) {\n        arr[pos++] = arr[pos];\n    }\n\n    --arr.length;\n};\n\n\ninternals.validateSingle = function (type, obj) {\n\n    if (type.type === 'array' ||\n        type._flags._arrayItems) {\n\n        Assert(!obj._flags.single, 'Cannot specify array item with single rule enabled');\n        obj.$_setFlag('_arrayItems', true, { clone: false });\n    }\n};\n\n\ninternals.sort = function (schema, value, settings, state, prefs) {\n\n    const order = settings.order === 'ascending' ? 1 : -1;\n    const aFirst = -1 * order;\n    const bFirst = order;\n\n    const sort = (a, b) => {\n\n        let compare = internals.compare(a, b, aFirst, bFirst);\n        if (compare !== null) {\n            return compare;\n        }\n\n        if (settings.by) {\n            a = settings.by.resolve(a, state, prefs);\n            b = settings.by.resolve(b, state, prefs);\n        }\n\n        compare = internals.compare(a, b, aFirst, bFirst);\n        if (compare !== null) {\n            return compare;\n        }\n\n        const type = typeof a;\n        if (type !== typeof b) {\n            throw schema.$_createError('array.sort.mismatching', value, null, state, prefs);\n        }\n\n        if (type !== 'number' &&\n            type !== 'string') {\n\n            throw schema.$_createError('array.sort.unsupported', value, { type }, state, prefs);\n        }\n\n        if (type === 'number') {\n            return (a - b) * order;\n        }\n\n        return a < b ? aFirst : bFirst;\n    };\n\n    try {\n        return { value: value.slice().sort(sort) };\n    }\n    catch (err) {\n        return { errors: err };\n    }\n};\n\n\ninternals.compare = function (a, b, aFirst, bFirst) {\n\n    if (a === b) {\n        return 0;\n    }\n\n    if (a === undefined) {\n        return 1;           // Always last regardless of sort order\n    }\n\n    if (b === undefined) {\n        return -1;           // Always last regardless of sort order\n    }\n\n    if (a === null) {\n        return bFirst;\n    }\n\n    if (b === null) {\n        return aFirst;\n    }\n\n    return null;\n};\n","'use strict';\n\nexports.codes = {\n    EMPTY_STRING: 'Address must be a non-empty string',\n    FORBIDDEN_UNICODE: 'Address contains forbidden Unicode characters',\n    MULTIPLE_AT_CHAR: 'Address cannot contain more than one @ character',\n    MISSING_AT_CHAR: 'Address must contain one @ character',\n    EMPTY_LOCAL: 'Address local part cannot be empty',\n    ADDRESS_TOO_LONG: 'Address too long',\n    LOCAL_TOO_LONG: 'Address local part too long',\n    EMPTY_LOCAL_SEGMENT: 'Address local part contains empty dot-separated segment',\n    INVALID_LOCAL_CHARS: 'Address local part contains invalid character',\n    DOMAIN_NON_EMPTY_STRING: 'Domain must be a non-empty string',\n    DOMAIN_TOO_LONG: 'Domain too long',\n    DOMAIN_INVALID_UNICODE_CHARS: 'Domain contains forbidden Unicode characters',\n    DOMAIN_INVALID_CHARS: 'Domain contains invalid character',\n    DOMAIN_INVALID_TLDS_CHARS: 'Domain contains invalid tld character',\n    DOMAIN_SEGMENTS_COUNT: 'Domain lacks the minimum required number of segments',\n    DOMAIN_SEGMENTS_COUNT_MAX: 'Domain contains too many segments',\n    DOMAIN_FORBIDDEN_TLDS: 'Domain uses forbidden TLD',\n    DOMAIN_EMPTY_SEGMENT: 'Domain contains empty dot-separated segment',\n    DOMAIN_LONG_SEGMENT: 'Domain contains dot-separated segment that is too long'\n};\n\n\nexports.code = function (code) {\n\n    return { code, error: exports.codes[code] };\n};\n","'use strict';\n\nconst DeepEqual = require('@hapi/hoek/lib/deepEqual');\nconst Pinpoint = require('@sideway/pinpoint');\n\nconst Errors = require('./errors');\n\n\nconst internals = {\n    codes: {\n        error: 1,\n        pass: 2,\n        full: 3\n    },\n    labels: {\n        0: 'never used',\n        1: 'always error',\n        2: 'always pass'\n    }\n};\n\n\nexports.setup = function (root) {\n\n    const trace = function () {\n\n        root._tracer = root._tracer || new internals.Tracer();\n        return root._tracer;\n    };\n\n    root.trace = trace;\n    root[Symbol.for('@hapi/lab/coverage/initialize')] = trace;\n\n    root.untrace = () => {\n\n        root._tracer = null;\n    };\n};\n\n\nexports.location = function (schema) {\n\n    return schema.$_setFlag('_tracerLocation', Pinpoint.location(2));                       // base.tracer(), caller\n};\n\n\ninternals.Tracer = class {\n\n    constructor() {\n\n        this.name = 'Joi';\n        this._schemas = new Map();\n    }\n\n    _register(schema) {\n\n        const existing = this._schemas.get(schema);\n        if (existing) {\n            return existing.store;\n        }\n\n        const store = new internals.Store(schema);\n        const { filename, line } = schema._flags._tracerLocation || Pinpoint.location(5);   // internals.tracer(), internals.entry(), exports.entry(), validate(), caller\n        this._schemas.set(schema, { filename, line, store });\n        return store;\n    }\n\n    _combine(merged, sources) {\n\n        for (const { store } of this._schemas.values()) {\n            store._combine(merged, sources);\n        }\n    }\n\n    report(file) {\n\n        const coverage = [];\n\n        // Process each registered schema\n\n        for (const { filename, line, store } of this._schemas.values()) {\n            if (file &&\n                file !== filename) {\n\n                continue;\n            }\n\n            // Process sub schemas of the registered root\n\n            const missing = [];\n            const skipped = [];\n\n            for (const [schema, log] of store._sources.entries()) {\n\n                // Check if sub schema parent skipped\n\n                if (internals.sub(log.paths, skipped)) {\n                    continue;\n                }\n\n                // Check if sub schema reached\n\n                if (!log.entry) {\n                    missing.push({\n                        status: 'never reached',\n                        paths: [...log.paths]\n                    });\n\n                    skipped.push(...log.paths);\n                    continue;\n                }\n\n                // Check values\n\n                for (const type of ['valid', 'invalid']) {\n                    const set = schema[`_${type}s`];\n                    if (!set) {\n                        continue;\n                    }\n\n                    const values = new Set(set._values);\n                    const refs = new Set(set._refs);\n                    for (const { value, ref } of log[type]) {\n                        values.delete(value);\n                        refs.delete(ref);\n                    }\n\n                    if (values.size ||\n                        refs.size) {\n\n                        missing.push({\n                            status: [...values, ...[...refs].map((ref) => ref.display)],\n                            rule: `${type}s`\n                        });\n                    }\n                }\n\n                // Check rules status\n\n                const rules = schema._rules.map((rule) => rule.name);\n                for (const type of ['default', 'failover']) {\n                    if (schema._flags[type] !== undefined) {\n                        rules.push(type);\n                    }\n                }\n\n                for (const name of rules) {\n                    const status = internals.labels[log.rule[name] || 0];\n                    if (status) {\n                        const report = { rule: name, status };\n                        if (log.paths.size) {\n                            report.paths = [...log.paths];\n                        }\n\n                        missing.push(report);\n                    }\n                }\n            }\n\n            if (missing.length) {\n                coverage.push({\n                    filename,\n                    line,\n                    missing,\n                    severity: 'error',\n                    message: `Schema missing tests for ${missing.map(internals.message).join(', ')}`\n                });\n            }\n        }\n\n        return coverage.length ? coverage : null;\n    }\n};\n\n\ninternals.Store = class {\n\n    constructor(schema) {\n\n        this.active = true;\n        this._sources = new Map();          // schema -> { paths, entry, rule, valid, invalid }\n        this._combos = new Map();           // merged -> [sources]\n        this._scan(schema);\n    }\n\n    debug(state, source, name, result) {\n\n        state.mainstay.debug && state.mainstay.debug.push({ type: source, name, result, path: state.path });\n    }\n\n    entry(schema, state) {\n\n        internals.debug(state, { type: 'entry' });\n\n        this._record(schema, (log) => {\n\n            log.entry = true;\n        });\n    }\n\n    filter(schema, state, source, value) {\n\n        internals.debug(state, { type: source, ...value });\n\n        this._record(schema, (log) => {\n\n            log[source].add(value);\n        });\n    }\n\n    log(schema, state, source, name, result) {\n\n        internals.debug(state, { type: source, name, result: result === 'full' ? 'pass' : result });\n\n        this._record(schema, (log) => {\n\n            log[source][name] = log[source][name] || 0;\n            log[source][name] |= internals.codes[result];\n        });\n    }\n\n    resolve(state, ref, to) {\n\n        if (!state.mainstay.debug) {\n            return;\n        }\n\n        const log = { type: 'resolve', ref: ref.display, to, path: state.path };\n        state.mainstay.debug.push(log);\n    }\n\n    value(state, by, from, to, name) {\n\n        if (!state.mainstay.debug ||\n            DeepEqual(from, to)) {\n\n            return;\n        }\n\n        const log = { type: 'value', by, from, to, path: state.path };\n        if (name) {\n            log.name = name;\n        }\n\n        state.mainstay.debug.push(log);\n    }\n\n    _record(schema, each) {\n\n        const log = this._sources.get(schema);\n        if (log) {\n            each(log);\n            return;\n        }\n\n        const sources = this._combos.get(schema);\n        for (const source of sources) {\n            this._record(source, each);\n        }\n    }\n\n    _scan(schema, _path) {\n\n        const path = _path || [];\n\n        let log = this._sources.get(schema);\n        if (!log) {\n            log = {\n                paths: new Set(),\n                entry: false,\n                rule: {},\n                valid: new Set(),\n                invalid: new Set()\n            };\n\n            this._sources.set(schema, log);\n        }\n\n        if (path.length) {\n            log.paths.add(path);\n        }\n\n        const each = (sub, source) => {\n\n            const subId = internals.id(sub, source);\n            this._scan(sub, path.concat(subId));\n        };\n\n        schema.$_modify({ each, ref: false });\n    }\n\n    _combine(merged, sources) {\n\n        this._combos.set(merged, sources);\n    }\n};\n\n\ninternals.message = function (item) {\n\n    const path = item.paths ? Errors.path(item.paths[0]) + (item.rule ? ':' : '') : '';\n    return `${path}${item.rule || ''} (${item.status})`;\n};\n\n\ninternals.id = function (schema, { source, name, path, key }) {\n\n    if (schema._flags.id) {\n        return schema._flags.id;\n    }\n\n    if (key) {\n        return key;\n    }\n\n    name = `@${name}`;\n\n    if (source === 'terms') {\n        return [name, path[Math.min(path.length - 1, 1)]];\n    }\n\n    return name;\n};\n\n\ninternals.sub = function (paths, skipped) {\n\n    for (const path of paths) {\n        for (const skip of skipped) {\n            if (DeepEqual(path.slice(0, skip.length), skip)) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n};\n\n\ninternals.debug = function (state, event) {\n\n    if (state.mainstay.debug) {\n        event.path = state.debug ? [...state.path, state.debug] : state.path;\n        state.mainstay.debug.push(event);\n    }\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst Clone = require('@hapi/hoek/lib/clone');\n\nconst Common = require('./common');\n\n\nconst internals = {\n    max: 1000,\n    supported: new Set(['undefined', 'boolean', 'number', 'string'])\n};\n\n\nexports.provider = {\n\n    provision(options) {\n\n        return new internals.Cache(options);\n    }\n};\n\n\n// Least Recently Used (LRU) Cache\n\ninternals.Cache = class {\n\n    constructor(options = {}) {\n\n        Common.assertOptions(options, ['max']);\n        Assert(options.max === undefined || options.max && options.max > 0 && isFinite(options.max), 'Invalid max cache size');\n\n        this._max = options.max || internals.max;\n\n        this._map = new Map();                          // Map of nodes by key\n        this._list = new internals.List();              // List of nodes (most recently used in head)\n    }\n\n    get length() {\n\n        return this._map.size;\n    }\n\n    set(key, value) {\n\n        if (key !== null &&\n            !internals.supported.has(typeof key)) {\n\n            return;\n        }\n\n        let node = this._map.get(key);\n        if (node) {\n            node.value = value;\n            this._list.first(node);\n            return;\n        }\n\n        node = this._list.unshift({ key, value });\n        this._map.set(key, node);\n        this._compact();\n    }\n\n    get(key) {\n\n        const node = this._map.get(key);\n        if (node) {\n            this._list.first(node);\n            return Clone(node.value);\n        }\n    }\n\n    _compact() {\n\n        if (this._map.size > this._max) {\n            const node = this._list.pop();\n            this._map.delete(node.key);\n        }\n    }\n};\n\n\ninternals.List = class {\n\n    constructor() {\n\n        this.tail = null;\n        this.head = null;\n    }\n\n    unshift(node) {\n\n        node.next = null;\n        node.prev = this.head;\n\n        if (this.head) {\n            this.head.next = node;\n        }\n\n        this.head = node;\n\n        if (!this.tail) {\n            this.tail = node;\n        }\n\n        return node;\n    }\n\n    first(node) {\n\n        if (node === this.head) {\n            return;\n        }\n\n        this._remove(node);\n        this.unshift(node);\n    }\n\n    pop() {\n\n        return this._remove(this.tail);\n    }\n\n    _remove(node) {\n\n        const { next, prev } = node;\n\n        next.prev = prev;\n\n        if (prev) {\n            prev.next = next;\n        }\n\n        if (node === this.tail) {\n            this.tail = next;\n        }\n\n        node.prev = null;\n        node.next = null;\n\n        return node;\n    }\n};\n","'use strict';\n\nconst Url = require('url');\n\nconst Errors = require('./errors');\n\n\nconst internals = {\n    minDomainSegments: 2,\n    nonAsciiRx: /[^\\x00-\\x7f]/,\n    domainControlRx: /[\\x00-\\x20@\\:\\/\\\\#!\\$&\\'\\(\\)\\*\\+,;=\\?]/,                          // Control + space + separators\n    tldSegmentRx: /^[a-zA-Z](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,\n    domainSegmentRx: /^[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/,\n    URL: Url.URL || URL                                                                 // $lab:coverage:ignore$\n};\n\n\nexports.analyze = function (domain, options = {}) {\n\n    if (!domain) {                                                                      // Catch null / undefined\n        return Errors.code('DOMAIN_NON_EMPTY_STRING');\n    }\n\n    if (typeof domain !== 'string') {\n        throw new Error('Invalid input: domain must be a string');\n    }\n\n    if (domain.length > 256) {\n        return Errors.code('DOMAIN_TOO_LONG');\n    }\n\n    const ascii = !internals.nonAsciiRx.test(domain);\n    if (!ascii) {\n        if (options.allowUnicode === false) {                                           // Defaults to true\n            return Errors.code('DOMAIN_INVALID_UNICODE_CHARS');\n        }\n\n        domain = domain.normalize('NFC');\n    }\n\n    if (internals.domainControlRx.test(domain)) {\n        return Errors.code('DOMAIN_INVALID_CHARS');\n    }\n\n    domain = internals.punycode(domain);\n\n    // https://tools.ietf.org/html/rfc1035 section 2.3.1\n\n    if (options.allowFullyQualified &&\n        domain[domain.length - 1] === '.') {\n\n        domain = domain.slice(0, -1);\n    }\n\n    const minDomainSegments = options.minDomainSegments || internals.minDomainSegments;\n\n    const segments = domain.split('.');\n    if (segments.length < minDomainSegments) {\n        return Errors.code('DOMAIN_SEGMENTS_COUNT');\n    }\n\n    if (options.maxDomainSegments) {\n        if (segments.length > options.maxDomainSegments) {\n            return Errors.code('DOMAIN_SEGMENTS_COUNT_MAX');\n        }\n    }\n\n    const tlds = options.tlds;\n    if (tlds) {\n        const tld = segments[segments.length - 1].toLowerCase();\n        if (tlds.deny && tlds.deny.has(tld) ||\n            tlds.allow && !tlds.allow.has(tld)) {\n\n            return Errors.code('DOMAIN_FORBIDDEN_TLDS');\n        }\n    }\n\n    for (let i = 0; i < segments.length; ++i) {\n        const segment = segments[i];\n\n        if (!segment.length) {\n            return Errors.code('DOMAIN_EMPTY_SEGMENT');\n        }\n\n        if (segment.length > 63) {\n            return Errors.code('DOMAIN_LONG_SEGMENT');\n        }\n\n        if (i < segments.length - 1) {\n            if (!internals.domainSegmentRx.test(segment)) {\n                return Errors.code('DOMAIN_INVALID_CHARS');\n            }\n        }\n        else {\n            if (!internals.tldSegmentRx.test(segment)) {\n                return Errors.code('DOMAIN_INVALID_TLDS_CHARS');\n            }\n        }\n    }\n\n    return null;\n};\n\n\nexports.isValid = function (domain, options) {\n\n    return !exports.analyze(domain, options);\n};\n\n\ninternals.punycode = function (domain) {\n\n    if (domain.includes('%')) {\n        domain = domain.replace(/%/g, '%25');\n    }\n\n    try {\n        return new internals.URL(`http://${domain}`).host;\n    }\n    catch (err) {\n        return domain;\n    }\n};\n","'use strict';\n\nconst internals = {};\n\n\nmodule.exports = function (string) {\n\n    // Escape ^$.*+-?=!:|\\/()[]{},\n\n    return string.replace(/[\\^\\$\\.\\*\\+\\-\\?\\=\\!\\:\\|\\\\\\/\\(\\)\\[\\]\\{\\}\\,]/g, '\\\\$&');\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst Clone = require('@hapi/hoek/lib/clone');\nconst DeepEqual = require('@hapi/hoek/lib/deepEqual');\nconst Merge = require('@hapi/hoek/lib/merge');\n\nconst Cache = require('./cache');\nconst Common = require('./common');\nconst Compile = require('./compile');\nconst Errors = require('./errors');\nconst Extend = require('./extend');\nconst Manifest = require('./manifest');\nconst Messages = require('./messages');\nconst Modify = require('./modify');\nconst Ref = require('./ref');\nconst Trace = require('./trace');\nconst Validator = require('./validator');\nconst Values = require('./values');\n\n\nconst internals = {};\n\n\ninternals.Base = class {\n\n    constructor(type) {\n\n        // Naming: public, _private, $_extension, $_mutate{action}\n\n        this.type = type;\n\n        this.$_root = null;\n        this._definition = {};\n        this._reset();\n    }\n\n    _reset() {\n\n        this._ids = new Modify.Ids();\n        this._preferences = null;\n        this._refs = new Ref.Manager();\n        this._cache = null;\n\n        this._valids = null;\n        this._invalids = null;\n\n        this._flags = {};\n        this._rules = [];\n        this._singleRules = new Map();              // The rule options passed for non-multi rules\n\n        this.$_terms = {};                          // Hash of arrays of immutable objects (extended by other types)\n\n        this.$_temp = {                             // Runtime state (not cloned)\n            ruleset: null,                          // null: use last, false: error, number: start position\n            whens: {}                               // Runtime cache of generated whens\n        };\n    }\n\n    // Manifest\n\n    describe() {\n\n        Assert(typeof Manifest.describe === 'function', 'Manifest functionality disabled');\n        return Manifest.describe(this);\n    }\n\n    // Rules\n\n    allow(...values) {\n\n        Common.verifyFlat(values, 'allow');\n        return this._values(values, '_valids');\n    }\n\n    alter(targets) {\n\n        Assert(targets && typeof targets === 'object' && !Array.isArray(targets), 'Invalid targets argument');\n        Assert(!this._inRuleset(), 'Cannot set alterations inside a ruleset');\n\n        const obj = this.clone();\n        obj.$_terms.alterations = obj.$_terms.alterations || [];\n        for (const target in targets) {\n            const adjuster = targets[target];\n            Assert(typeof adjuster === 'function', 'Alteration adjuster for', target, 'must be a function');\n            obj.$_terms.alterations.push({ target, adjuster });\n        }\n\n        obj.$_temp.ruleset = false;\n        return obj;\n    }\n\n    artifact(id) {\n\n        Assert(id !== undefined, 'Artifact cannot be undefined');\n        Assert(!this._cache, 'Cannot set an artifact with a rule cache');\n\n        return this.$_setFlag('artifact', id);\n    }\n\n    cast(to) {\n\n        Assert(to === false || typeof to === 'string', 'Invalid to value');\n        Assert(to === false || this._definition.cast[to], 'Type', this.type, 'does not support casting to', to);\n\n        return this.$_setFlag('cast', to === false ? undefined : to);\n    }\n\n    default(value, options) {\n\n        return this._default('default', value, options);\n    }\n\n    description(desc) {\n\n        Assert(desc && typeof desc === 'string', 'Description must be a non-empty string');\n\n        return this.$_setFlag('description', desc);\n    }\n\n    empty(schema) {\n\n        const obj = this.clone();\n\n        if (schema !== undefined) {\n            schema = obj.$_compile(schema, { override: false });\n        }\n\n        return obj.$_setFlag('empty', schema, { clone: false });\n    }\n\n    error(err) {\n\n        Assert(err, 'Missing error');\n        Assert(err instanceof Error || typeof err === 'function', 'Must provide a valid Error object or a function');\n\n        return this.$_setFlag('error', err);\n    }\n\n    example(example, options = {}) {\n\n        Assert(example !== undefined, 'Missing example');\n        Common.assertOptions(options, ['override']);\n\n        return this._inner('examples', example, { single: true, override: options.override });\n    }\n\n    external(method, description) {\n\n        if (typeof method === 'object') {\n            Assert(!description, 'Cannot combine options with description');\n            description = method.description;\n            method = method.method;\n        }\n\n        Assert(typeof method === 'function', 'Method must be a function');\n        Assert(description === undefined || description && typeof description === 'string', 'Description must be a non-empty string');\n\n        return this._inner('externals', { method, description }, { single: true });\n    }\n\n    failover(value, options) {\n\n        return this._default('failover', value, options);\n    }\n\n    forbidden() {\n\n        return this.presence('forbidden');\n    }\n\n    id(id) {\n\n        if (!id) {\n            return this.$_setFlag('id', undefined);\n        }\n\n        Assert(typeof id === 'string', 'id must be a non-empty string');\n        Assert(/^[^\\.]+$/.test(id), 'id cannot contain period character');\n\n        return this.$_setFlag('id', id);\n    }\n\n    invalid(...values) {\n\n        return this._values(values, '_invalids');\n    }\n\n    label(name) {\n\n        Assert(name && typeof name === 'string', 'Label name must be a non-empty string');\n\n        return this.$_setFlag('label', name);\n    }\n\n    meta(meta) {\n\n        Assert(meta !== undefined, 'Meta cannot be undefined');\n\n        return this._inner('metas', meta, { single: true });\n    }\n\n    note(...notes) {\n\n        Assert(notes.length, 'Missing notes');\n        for (const note of notes) {\n            Assert(note && typeof note === 'string', 'Notes must be non-empty strings');\n        }\n\n        return this._inner('notes', notes);\n    }\n\n    only(mode = true) {\n\n        Assert(typeof mode === 'boolean', 'Invalid mode:', mode);\n\n        return this.$_setFlag('only', mode);\n    }\n\n    optional() {\n\n        return this.presence('optional');\n    }\n\n    prefs(prefs) {\n\n        Assert(prefs, 'Missing preferences');\n        Assert(prefs.context === undefined, 'Cannot override context');\n        Assert(prefs.externals === undefined, 'Cannot override externals');\n        Assert(prefs.warnings === undefined, 'Cannot override warnings');\n        Assert(prefs.debug === undefined, 'Cannot override debug');\n\n        Common.checkPreferences(prefs);\n\n        const obj = this.clone();\n        obj._preferences = Common.preferences(obj._preferences, prefs);\n        return obj;\n    }\n\n    presence(mode) {\n\n        Assert(['optional', 'required', 'forbidden'].includes(mode), 'Unknown presence mode', mode);\n\n        return this.$_setFlag('presence', mode);\n    }\n\n    raw(enabled = true) {\n\n        return this.$_setFlag('result', enabled ? 'raw' : undefined);\n    }\n\n    result(mode) {\n\n        Assert(['raw', 'strip'].includes(mode), 'Unknown result mode', mode);\n\n        return this.$_setFlag('result', mode);\n    }\n\n    required() {\n\n        return this.presence('required');\n    }\n\n    strict(enabled) {\n\n        const obj = this.clone();\n\n        const convert = enabled === undefined ? false : !enabled;\n        obj._preferences = Common.preferences(obj._preferences, { convert });\n        return obj;\n    }\n\n    strip(enabled = true) {\n\n        return this.$_setFlag('result', enabled ? 'strip' : undefined);\n    }\n\n    tag(...tags) {\n\n        Assert(tags.length, 'Missing tags');\n        for (const tag of tags) {\n            Assert(tag && typeof tag === 'string', 'Tags must be non-empty strings');\n        }\n\n        return this._inner('tags', tags);\n    }\n\n    unit(name) {\n\n        Assert(name && typeof name === 'string', 'Unit name must be a non-empty string');\n\n        return this.$_setFlag('unit', name);\n    }\n\n    valid(...values) {\n\n        Common.verifyFlat(values, 'valid');\n\n        const obj = this.allow(...values);\n        obj.$_setFlag('only', !!obj._valids, { clone: false });\n        return obj;\n    }\n\n    when(condition, options) {\n\n        const obj = this.clone();\n\n        if (!obj.$_terms.whens) {\n            obj.$_terms.whens = [];\n        }\n\n        const when = Compile.when(obj, condition, options);\n        if (!['any', 'link'].includes(obj.type)) {\n            const conditions = when.is ? [when] : when.switch;\n            for (const item of conditions) {\n                Assert(!item.then || item.then.type === 'any' || item.then.type === obj.type, 'Cannot combine', obj.type, 'with', item.then && item.then.type);\n                Assert(!item.otherwise || item.otherwise.type === 'any' || item.otherwise.type === obj.type, 'Cannot combine', obj.type, 'with', item.otherwise && item.otherwise.type);\n\n            }\n        }\n\n        obj.$_terms.whens.push(when);\n        return obj.$_mutateRebuild();\n    }\n\n    // Helpers\n\n    cache(cache) {\n\n        Assert(!this._inRuleset(), 'Cannot set caching inside a ruleset');\n        Assert(!this._cache, 'Cannot override schema cache');\n        Assert(this._flags.artifact === undefined, 'Cannot cache a rule with an artifact');\n\n        const obj = this.clone();\n        obj._cache = cache || Cache.provider.provision();\n        obj.$_temp.ruleset = false;\n        return obj;\n    }\n\n    clone() {\n\n        const obj = Object.create(Object.getPrototypeOf(this));\n        return this._assign(obj);\n    }\n\n    concat(source) {\n\n        Assert(Common.isSchema(source), 'Invalid schema object');\n        Assert(this.type === 'any' || source.type === 'any' || source.type === this.type, 'Cannot merge type', this.type, 'with another type:', source.type);\n        Assert(!this._inRuleset(), 'Cannot concatenate onto a schema with open ruleset');\n        Assert(!source._inRuleset(), 'Cannot concatenate a schema with open ruleset');\n\n        let obj = this.clone();\n\n        if (this.type === 'any' &&\n            source.type !== 'any') {\n\n            // Change obj to match source type\n\n            const tmpObj = source.clone();\n            for (const key of Object.keys(obj)) {\n                if (key !== 'type') {\n                    tmpObj[key] = obj[key];\n                }\n            }\n\n            obj = tmpObj;\n        }\n\n        obj._ids.concat(source._ids);\n        obj._refs.register(source, Ref.toSibling);\n\n        obj._preferences = obj._preferences ? Common.preferences(obj._preferences, source._preferences) : source._preferences;\n        obj._valids = Values.merge(obj._valids, source._valids, source._invalids);\n        obj._invalids = Values.merge(obj._invalids, source._invalids, source._valids);\n\n        // Remove unique rules present in source\n\n        for (const name of source._singleRules.keys()) {\n            if (obj._singleRules.has(name)) {\n                obj._rules = obj._rules.filter((target) => target.keep || target.name !== name);\n                obj._singleRules.delete(name);\n            }\n        }\n\n        // Rules\n\n        for (const test of source._rules) {\n            if (!source._definition.rules[test.method].multi) {\n                obj._singleRules.set(test.name, test);\n            }\n\n            obj._rules.push(test);\n        }\n\n        // Flags\n\n        if (obj._flags.empty &&\n            source._flags.empty) {\n\n            obj._flags.empty = obj._flags.empty.concat(source._flags.empty);\n            const flags = Object.assign({}, source._flags);\n            delete flags.empty;\n            Merge(obj._flags, flags);\n        }\n        else if (source._flags.empty) {\n            obj._flags.empty = source._flags.empty;\n            const flags = Object.assign({}, source._flags);\n            delete flags.empty;\n            Merge(obj._flags, flags);\n        }\n        else {\n            Merge(obj._flags, source._flags);\n        }\n\n        // Terms\n\n        for (const key in source.$_terms) {\n            const terms = source.$_terms[key];\n            if (!terms) {\n                if (!obj.$_terms[key]) {\n                    obj.$_terms[key] = terms;\n                }\n\n                continue;\n            }\n\n            if (!obj.$_terms[key]) {\n                obj.$_terms[key] = terms.slice();\n                continue;\n            }\n\n            obj.$_terms[key] = obj.$_terms[key].concat(terms);\n        }\n\n        // Tracing\n\n        if (this.$_root._tracer) {\n            this.$_root._tracer._combine(obj, [this, source]);\n        }\n\n        // Rebuild\n\n        return obj.$_mutateRebuild();\n    }\n\n    extend(options) {\n\n        Assert(!options.base, 'Cannot extend type with another base');\n\n        return Extend.type(this, options);\n    }\n\n    extract(path) {\n\n        path = Array.isArray(path) ? path : path.split('.');\n        return this._ids.reach(path);\n    }\n\n    fork(paths, adjuster) {\n\n        Assert(!this._inRuleset(), 'Cannot fork inside a ruleset');\n\n        let obj = this;                                             // eslint-disable-line consistent-this\n        for (let path of [].concat(paths)) {\n            path = Array.isArray(path) ? path : path.split('.');\n            obj = obj._ids.fork(path, adjuster, obj);\n        }\n\n        obj.$_temp.ruleset = false;\n        return obj;\n    }\n\n    rule(options) {\n\n        const def = this._definition;\n        Common.assertOptions(options, Object.keys(def.modifiers));\n\n        Assert(this.$_temp.ruleset !== false, 'Cannot apply rules to empty ruleset or the last rule added does not support rule properties');\n        const start = this.$_temp.ruleset === null ? this._rules.length - 1 : this.$_temp.ruleset;\n        Assert(start >= 0 && start < this._rules.length, 'Cannot apply rules to empty ruleset');\n\n        const obj = this.clone();\n\n        for (let i = start; i < obj._rules.length; ++i) {\n            const original = obj._rules[i];\n            const rule = Clone(original);\n\n            for (const name in options) {\n                def.modifiers[name](rule, options[name]);\n                Assert(rule.name === original.name, 'Cannot change rule name');\n            }\n\n            obj._rules[i] = rule;\n\n            if (obj._singleRules.get(rule.name) === original) {\n                obj._singleRules.set(rule.name, rule);\n            }\n        }\n\n        obj.$_temp.ruleset = false;\n        return obj.$_mutateRebuild();\n    }\n\n    get ruleset() {\n\n        Assert(!this._inRuleset(), 'Cannot start a new ruleset without closing the previous one');\n\n        const obj = this.clone();\n        obj.$_temp.ruleset = obj._rules.length;\n        return obj;\n    }\n\n    get $() {\n\n        return this.ruleset;\n    }\n\n    tailor(targets) {\n\n        targets = [].concat(targets);\n\n        Assert(!this._inRuleset(), 'Cannot tailor inside a ruleset');\n\n        let obj = this;                                                     // eslint-disable-line consistent-this\n\n        if (this.$_terms.alterations) {\n            for (const { target, adjuster } of this.$_terms.alterations) {\n                if (targets.includes(target)) {\n                    obj = adjuster(obj);\n                    Assert(Common.isSchema(obj), 'Alteration adjuster for', target, 'failed to return a schema object');\n                }\n            }\n        }\n\n        obj = obj.$_modify({ each: (item) => item.tailor(targets), ref: false });\n        obj.$_temp.ruleset = false;\n        return obj.$_mutateRebuild();\n    }\n\n    tracer() {\n\n        return Trace.location ? Trace.location(this) : this;                // $lab:coverage:ignore$\n    }\n\n    validate(value, options) {\n\n        return Validator.entry(value, this, options);\n    }\n\n    validateAsync(value, options) {\n\n        return Validator.entryAsync(value, this, options);\n    }\n\n    // Extensions\n\n    $_addRule(options) {\n\n        // Normalize rule\n\n        if (typeof options === 'string') {\n            options = { name: options };\n        }\n\n        Assert(options && typeof options === 'object', 'Invalid options');\n        Assert(options.name && typeof options.name === 'string', 'Invalid rule name');\n\n        for (const key in options) {\n            Assert(key[0] !== '_', 'Cannot set private rule properties');\n        }\n\n        const rule = Object.assign({}, options);        // Shallow cloned\n        rule._resolve = [];\n        rule.method = rule.method || rule.name;\n\n        const definition = this._definition.rules[rule.method];\n        const args = rule.args;\n\n        Assert(definition, 'Unknown rule', rule.method);\n\n        // Args\n\n        const obj = this.clone();\n\n        if (args) {\n            Assert(Object.keys(args).length === 1 || Object.keys(args).length === this._definition.rules[rule.name].args.length, 'Invalid rule definition for', this.type, rule.name);\n\n            for (const key in args) {\n                let arg = args[key];\n\n                if (definition.argsByName) {\n                    const resolver = definition.argsByName.get(key);\n\n                    if (resolver.ref &&\n                        Common.isResolvable(arg)) {\n\n                        rule._resolve.push(key);\n                        obj.$_mutateRegister(arg);\n                    }\n                    else {\n                        if (resolver.normalize) {\n                            arg = resolver.normalize(arg);\n                            args[key] = arg;\n                        }\n\n                        if (resolver.assert) {\n                            const error = Common.validateArg(arg, key, resolver);\n                            Assert(!error, error, 'or reference');\n                        }\n                    }\n                }\n\n                if (arg === undefined) {\n                    delete args[key];\n                    continue;\n                }\n\n                args[key] = arg;\n            }\n        }\n\n        // Unique rules\n\n        if (!definition.multi) {\n            obj._ruleRemove(rule.name, { clone: false });\n            obj._singleRules.set(rule.name, rule);\n        }\n\n        if (obj.$_temp.ruleset === false) {\n            obj.$_temp.ruleset = null;\n        }\n\n        if (definition.priority) {\n            obj._rules.unshift(rule);\n        }\n        else {\n            obj._rules.push(rule);\n        }\n\n        return obj;\n    }\n\n    $_compile(schema, options) {\n\n        return Compile.schema(this.$_root, schema, options);\n    }\n\n    $_createError(code, value, local, state, prefs, options = {}) {\n\n        const flags = options.flags !== false ? this._flags : {};\n        const messages = options.messages ? Messages.merge(this._definition.messages, options.messages) : this._definition.messages;\n        return new Errors.Report(code, value, local, flags, messages, state, prefs);\n    }\n\n    $_getFlag(name) {\n\n        return this._flags[name];\n    }\n\n    $_getRule(name) {\n\n        return this._singleRules.get(name);\n    }\n\n    $_mapLabels(path) {\n\n        path = Array.isArray(path) ? path : path.split('.');\n        return this._ids.labels(path);\n    }\n\n    $_match(value, state, prefs, overrides) {\n\n        prefs = Object.assign({}, prefs);       // Shallow cloned\n        prefs.abortEarly = true;\n        prefs._externals = false;\n\n        state.snapshot();\n        const result = !Validator.validate(value, this, state, prefs, overrides).errors;\n        state.restore();\n\n        return result;\n    }\n\n    $_modify(options) {\n\n        Common.assertOptions(options, ['each', 'once', 'ref', 'schema']);\n        return Modify.schema(this, options) || this;\n    }\n\n    $_mutateRebuild() {\n\n        Assert(!this._inRuleset(), 'Cannot add this rule inside a ruleset');\n\n        this._refs.reset();\n        this._ids.reset();\n\n        const each = (item, { source, name, path, key }) => {\n\n            const family = this._definition[source][name] && this._definition[source][name].register;\n            if (family !== false) {\n                this.$_mutateRegister(item, { family, key });\n            }\n        };\n\n        this.$_modify({ each });\n\n        if (this._definition.rebuild) {\n            this._definition.rebuild(this);\n        }\n\n        this.$_temp.ruleset = false;\n        return this;\n    }\n\n    $_mutateRegister(schema, { family, key } = {}) {\n\n        this._refs.register(schema, family);\n        this._ids.register(schema, { key });\n    }\n\n    $_property(name) {\n\n        return this._definition.properties[name];\n    }\n\n    $_reach(path) {\n\n        return this._ids.reach(path);\n    }\n\n    $_rootReferences() {\n\n        return this._refs.roots();\n    }\n\n    $_setFlag(name, value, options = {}) {\n\n        Assert(name[0] === '_' || !this._inRuleset(), 'Cannot set flag inside a ruleset');\n\n        const flag = this._definition.flags[name] || {};\n        if (DeepEqual(value, flag.default)) {\n            value = undefined;\n        }\n\n        if (DeepEqual(value, this._flags[name])) {\n            return this;\n        }\n\n        const obj = options.clone !== false ? this.clone() : this;\n\n        if (value !== undefined) {\n            obj._flags[name] = value;\n            obj.$_mutateRegister(value);\n        }\n        else {\n            delete obj._flags[name];\n        }\n\n        if (name[0] !== '_') {\n            obj.$_temp.ruleset = false;\n        }\n\n        return obj;\n    }\n\n    $_parent(method, ...args) {\n\n        return this[method][Common.symbols.parent].call(this, ...args);\n    }\n\n    $_validate(value, state, prefs) {\n\n        return Validator.validate(value, this, state, prefs);\n    }\n\n    // Internals\n\n    _assign(target) {\n\n        target.type = this.type;\n\n        target.$_root = this.$_root;\n\n        target.$_temp = Object.assign({}, this.$_temp);\n        target.$_temp.whens = {};\n\n        target._ids = this._ids.clone();\n        target._preferences = this._preferences;\n        target._valids = this._valids && this._valids.clone();\n        target._invalids = this._invalids && this._invalids.clone();\n        target._rules = this._rules.slice();\n        target._singleRules = Clone(this._singleRules, { shallow: true });\n        target._refs = this._refs.clone();\n        target._flags = Object.assign({}, this._flags);\n        target._cache = null;\n\n        target.$_terms = {};\n        for (const key in this.$_terms) {\n            target.$_terms[key] = this.$_terms[key] ? this.$_terms[key].slice() : null;\n        }\n\n        // Backwards compatibility\n\n        target.$_super = {};\n        for (const override in this.$_super) {\n            target.$_super[override] = this._super[override].bind(target);\n        }\n\n        return target;\n    }\n\n    _bare() {\n\n        const obj = this.clone();\n        obj._reset();\n\n        const terms = obj._definition.terms;\n        for (const name in terms) {\n            const term = terms[name];\n            obj.$_terms[name] = term.init;\n        }\n\n        return obj.$_mutateRebuild();\n    }\n\n    _default(flag, value, options = {}) {\n\n        Common.assertOptions(options, 'literal');\n\n        Assert(value !== undefined, 'Missing', flag, 'value');\n        Assert(typeof value === 'function' || !options.literal, 'Only function value supports literal option');\n\n        if (typeof value === 'function' &&\n            options.literal) {\n\n            value = {\n                [Common.symbols.literal]: true,\n                literal: value\n            };\n        }\n\n        const obj = this.$_setFlag(flag, value);\n        return obj;\n    }\n\n    _generate(value, state, prefs) {\n\n        if (!this.$_terms.whens) {\n            return { schema: this };\n        }\n\n        // Collect matching whens\n\n        const whens = [];\n        const ids = [];\n        for (let i = 0; i < this.$_terms.whens.length; ++i) {\n            const when = this.$_terms.whens[i];\n\n            if (when.concat) {\n                whens.push(when.concat);\n                ids.push(`${i}.concat`);\n                continue;\n            }\n\n            const input = when.ref ? when.ref.resolve(value, state, prefs) : value;\n            const tests = when.is ? [when] : when.switch;\n            const before = ids.length;\n\n            for (let j = 0; j < tests.length; ++j) {\n                const { is, then, otherwise } = tests[j];\n\n                const baseId = `${i}${when.switch ? '.' + j : ''}`;\n                if (is.$_match(input, state.nest(is, `${baseId}.is`), prefs)) {\n                    if (then) {\n                        const localState = state.localize([...state.path, `${baseId}.then`], state.ancestors, state.schemas);\n                        const { schema: generated, id } = then._generate(value, localState, prefs);\n                        whens.push(generated);\n                        ids.push(`${baseId}.then${id ? `(${id})` : ''}`);\n                        break;\n                    }\n                }\n                else if (otherwise) {\n                    const localState = state.localize([...state.path, `${baseId}.otherwise`], state.ancestors, state.schemas);\n                    const { schema: generated, id } = otherwise._generate(value, localState, prefs);\n                    whens.push(generated);\n                    ids.push(`${baseId}.otherwise${id ? `(${id})` : ''}`);\n                    break;\n                }\n            }\n\n            if (when.break &&\n                ids.length > before) {          // Something matched\n\n                break;\n            }\n        }\n\n        // Check cache\n\n        const id = ids.join(', ');\n        state.mainstay.tracer.debug(state, 'rule', 'when', id);\n\n        if (!id) {\n            return { schema: this };\n        }\n\n        if (!state.mainstay.tracer.active &&\n            this.$_temp.whens[id]) {\n\n            return { schema: this.$_temp.whens[id], id };\n        }\n\n        // Generate dynamic schema\n\n        let obj = this;                                             // eslint-disable-line consistent-this\n        if (this._definition.generate) {\n            obj = this._definition.generate(this, value, state, prefs);\n        }\n\n        // Apply whens\n\n        for (const when of whens) {\n            obj = obj.concat(when);\n        }\n\n        // Tracing\n\n        if (this.$_root._tracer) {\n            this.$_root._tracer._combine(obj, [this, ...whens]);\n        }\n\n        // Cache result\n\n        this.$_temp.whens[id] = obj;\n        return { schema: obj, id };\n    }\n\n    _inner(type, values, options = {}) {\n\n        Assert(!this._inRuleset(), `Cannot set ${type} inside a ruleset`);\n\n        const obj = this.clone();\n        if (!obj.$_terms[type] ||\n            options.override) {\n\n            obj.$_terms[type] = [];\n        }\n\n        if (options.single) {\n            obj.$_terms[type].push(values);\n        }\n        else {\n            obj.$_terms[type].push(...values);\n        }\n\n        obj.$_temp.ruleset = false;\n        return obj;\n    }\n\n    _inRuleset() {\n\n        return this.$_temp.ruleset !== null && this.$_temp.ruleset !== false;\n    }\n\n    _ruleRemove(name, options = {}) {\n\n        if (!this._singleRules.has(name)) {\n            return this;\n        }\n\n        const obj = options.clone !== false ? this.clone() : this;\n\n        obj._singleRules.delete(name);\n\n        const filtered = [];\n        for (let i = 0; i < obj._rules.length; ++i) {\n            const test = obj._rules[i];\n            if (test.name === name &&\n                !test.keep) {\n\n                if (obj._inRuleset() &&\n                    i < obj.$_temp.ruleset) {\n\n                    --obj.$_temp.ruleset;\n                }\n\n                continue;\n            }\n\n            filtered.push(test);\n        }\n\n        obj._rules = filtered;\n        return obj;\n    }\n\n    _values(values, key) {\n\n        Common.verifyFlat(values, key.slice(1, -1));\n\n        const obj = this.clone();\n\n        const override = values[0] === Common.symbols.override;\n        if (override) {\n            values = values.slice(1);\n        }\n\n        if (!obj[key] &&\n            values.length) {\n\n            obj[key] = new Values();\n        }\n        else if (override) {\n            obj[key] = values.length ? new Values() : null;\n            obj.$_mutateRebuild();\n        }\n\n        if (!obj[key]) {\n            return obj;\n        }\n\n        if (override) {\n            obj[key].override();\n        }\n\n        for (const value of values) {\n            Assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');\n            Assert(value !== Common.symbols.override, 'Override must be the first value');\n\n            const other = key === '_invalids' ? '_valids' : '_invalids';\n            if (obj[other]) {\n                obj[other].remove(value);\n                if (!obj[other].length) {\n                    Assert(key === '_valids' || !obj._flags.only, 'Setting invalid value', value, 'leaves schema rejecting all values due to previous valid rule');\n                    obj[other] = null;\n                }\n            }\n\n            obj[key].add(value, obj._refs);\n        }\n\n        return obj;\n    }\n};\n\n\ninternals.Base.prototype[Common.symbols.any] = {\n    version: Common.version,\n    compile: Compile.compile,\n    root: '$_root'\n};\n\n\ninternals.Base.prototype.isImmutable = true;                // Prevents Hoek from deep cloning schema objects (must be on prototype)\n\n\n// Aliases\n\ninternals.Base.prototype.deny = internals.Base.prototype.invalid;\ninternals.Base.prototype.disallow = internals.Base.prototype.invalid;\ninternals.Base.prototype.equal = internals.Base.prototype.valid;\ninternals.Base.prototype.exist = internals.Base.prototype.required;\ninternals.Base.prototype.not = internals.Base.prototype.invalid;\ninternals.Base.prototype.options = internals.Base.prototype.prefs;\ninternals.Base.prototype.preferences = internals.Base.prototype.prefs;\n\n\nmodule.exports = new internals.Base();\n","// 환경 변수 설정 및 검증\r\n\r\nconst requiredEnvVars = [\r\n  'STAGE',\r\n  'REGION',\r\n  'DYNAMODB_TABLE_NAME',\r\n];\r\n\r\nconst optionalEnvVars = [\r\n  'NAVER_CLIENT_ID',\r\n  'NAVER_CLIENT_SECRET',\r\n  'HANRIVER_BASE_URL',\r\n  'HANRIVER_WATERLEVEL_ENDPOINT',\r\n  'HANRIVER_REALTIME_ENDPOINT',\r\n  'HANRIVER_FORECAST_ENDPOINT',\r\n];\r\n\r\n// 환경 변수 검증\r\nfunction validateEnvironment() {\r\n  const missing = requiredEnvVars.filter((envVar) => !process.env[envVar]);\r\n  \r\n  if (missing.length > 0) {\r\n    throw new Error(`Missing required environment variables: ${missing.join(', ')}`);\r\n  }\r\n}\r\n\r\n// 환경 변수 객체 생성\r\nconst environment = {\r\n  // 기본 설정\r\n  stage: process.env.STAGE,\r\n  region: process.env.REGION,\r\n  nodeEnv: process.env.NODE_ENV || 'production',\r\n  \r\n  // AWS 설정\r\n  dynamodbTableName: process.env.DYNAMODB_TABLE_NAME,\r\n  \r\n  // 네이버 API 설정\r\n  naver: {\r\n    clientId: process.env.NAVER_CLIENT_ID,\r\n    clientSecret: process.env.NAVER_CLIENT_SECRET,\r\n  },\r\n  \r\n  // 한강홍수통제소 API 설정\r\n  hanriver: {\r\n    baseUrl: process.env.HANRIVER_BASE_URL || 'http://211.188.52.85:9191',\r\n    endpoints: {\r\n      waterlevel: process.env.HANRIVER_WATERLEVEL_ENDPOINT || '/waterlevelinfo/info.json',\r\n      realtime: process.env.HANRIVER_REALTIME_ENDPOINT || '/getWaterLevel1D/list/1D/1018683/20230701/20230930.json',\r\n      forecast: process.env.HANRIVER_FORECAST_ENDPOINT || '/fldfct/list/20230715.json',\r\n    },\r\n  },\r\n  \r\n  // 개발 환경 여부\r\n  isDevelopment: process.env.NODE_ENV === 'development',\r\n  isTest: process.env.NODE_ENV === 'test',\r\n  isProduction: process.env.NODE_ENV === 'production',\r\n  isOffline: process.env.IS_OFFLINE === 'true',\r\n};\r\n\r\n// 환경 변수 검증 실행 (테스트 환경 제외)\r\nif (!environment.isTest) {\r\n  validateEnvironment();\r\n}\r\n\r\nmodule.exports = environment;","'use strict';\n\nconst Reach = require('./reach');\nconst Types = require('./types');\nconst Utils = require('./utils');\n\n\nconst internals = {\n    needsProtoHack: new Set([Types.set, Types.map, Types.weakSet, Types.weakMap])\n};\n\n\nmodule.exports = internals.clone = function (obj, options = {}, _seen = null) {\n\n    if (typeof obj !== 'object' ||\n        obj === null) {\n\n        return obj;\n    }\n\n    let clone = internals.clone;\n    let seen = _seen;\n\n    if (options.shallow) {\n        if (options.shallow !== true) {\n            return internals.cloneWithShallow(obj, options);\n        }\n\n        clone = (value) => value;\n    }\n    else if (seen) {\n        const lookup = seen.get(obj);\n        if (lookup) {\n            return lookup;\n        }\n    }\n    else {\n        seen = new Map();\n    }\n\n    // Built-in object types\n\n    const baseProto = Types.getInternalProto(obj);\n    if (baseProto === Types.buffer) {\n        return Buffer && Buffer.from(obj);              // $lab:coverage:ignore$\n    }\n\n    if (baseProto === Types.date) {\n        return new Date(obj.getTime());\n    }\n\n    if (baseProto === Types.regex) {\n        return new RegExp(obj);\n    }\n\n    // Generic objects\n\n    const newObj = internals.base(obj, baseProto, options);\n    if (newObj === obj) {\n        return obj;\n    }\n\n    if (seen) {\n        seen.set(obj, newObj);                              // Set seen, since obj could recurse\n    }\n\n    if (baseProto === Types.set) {\n        for (const value of obj) {\n            newObj.add(clone(value, options, seen));\n        }\n    }\n    else if (baseProto === Types.map) {\n        for (const [key, value] of obj) {\n            newObj.set(key, clone(value, options, seen));\n        }\n    }\n\n    const keys = Utils.keys(obj, options);\n    for (const key of keys) {\n        if (key === '__proto__') {\n            continue;\n        }\n\n        if (baseProto === Types.array &&\n            key === 'length') {\n\n            newObj.length = obj.length;\n            continue;\n        }\n\n        const descriptor = Object.getOwnPropertyDescriptor(obj, key);\n        if (descriptor) {\n            if (descriptor.get ||\n                descriptor.set) {\n\n                Object.defineProperty(newObj, key, descriptor);\n            }\n            else if (descriptor.enumerable) {\n                newObj[key] = clone(obj[key], options, seen);\n            }\n            else {\n                Object.defineProperty(newObj, key, { enumerable: false, writable: true, configurable: true, value: clone(obj[key], options, seen) });\n            }\n        }\n        else {\n            Object.defineProperty(newObj, key, {\n                enumerable: true,\n                writable: true,\n                configurable: true,\n                value: clone(obj[key], options, seen)\n            });\n        }\n    }\n\n    return newObj;\n};\n\n\ninternals.cloneWithShallow = function (source, options) {\n\n    const keys = options.shallow;\n    options = Object.assign({}, options);\n    options.shallow = false;\n\n    const seen = new Map();\n\n    for (const key of keys) {\n        const ref = Reach(source, key);\n        if (typeof ref === 'object' ||\n            typeof ref === 'function') {\n\n            seen.set(ref, ref);\n        }\n    }\n\n    return internals.clone(source, options, seen);\n};\n\n\ninternals.base = function (obj, baseProto, options) {\n\n    if (options.prototype === false) {                  // Defaults to true\n        if (internals.needsProtoHack.has(baseProto)) {\n            return new baseProto.constructor();\n        }\n\n        return baseProto === Types.array ? [] : {};\n    }\n\n    const proto = Object.getPrototypeOf(obj);\n    if (proto &&\n        proto.isImmutable) {\n\n        return obj;\n    }\n\n    if (baseProto === Types.array) {\n        const newObj = [];\n        if (proto !== baseProto) {\n            Object.setPrototypeOf(newObj, proto);\n        }\n\n        return newObj;\n    }\n\n    if (internals.needsProtoHack.has(baseProto)) {\n        const newObj = new proto.constructor();\n        if (proto !== baseProto) {\n            Object.setPrototypeOf(newObj, proto);\n        }\n\n        return newObj;\n    }\n\n    return Object.create(proto);\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Keys = require('./keys');\n\n\nconst internals = {};\n\n\nmodule.exports = Keys.extend({\n\n    type: 'function',\n\n    properties: {\n        typeof: 'function'\n    },\n\n    rules: {\n        arity: {\n            method(n) {\n\n                Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n\n                return this.$_addRule({ name: 'arity', args: { n } });\n            },\n            validate(value, helpers, { n }) {\n\n                if (value.length === n) {\n                    return value;\n                }\n\n                return helpers.error('function.arity', { n });\n            }\n        },\n\n        class: {\n            method() {\n\n                return this.$_addRule('class');\n            },\n            validate(value, helpers) {\n\n                if ((/^\\s*class\\s/).test(value.toString())) {\n                    return value;\n                }\n\n                return helpers.error('function.class', { value });\n            }\n        },\n\n        minArity: {\n            method(n) {\n\n                Assert(Number.isSafeInteger(n) && n > 0, 'n must be a strict positive integer');\n\n                return this.$_addRule({ name: 'minArity', args: { n } });\n            },\n            validate(value, helpers, { n }) {\n\n                if (value.length >= n) {\n                    return value;\n                }\n\n                return helpers.error('function.minArity', { n });\n            }\n        },\n\n        maxArity: {\n            method(n) {\n\n                Assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');\n\n                return this.$_addRule({ name: 'maxArity', args: { n } });\n            },\n            validate(value, helpers, { n }) {\n\n                if (value.length <= n) {\n                    return value;\n                }\n\n                return helpers.error('function.maxArity', { n });\n            }\n        }\n    },\n\n    messages: {\n        'function.arity': '{{#label}} must have an arity of {{#n}}',\n        'function.class': '{{#label}} must be a class',\n        'function.maxArity': '{{#label}} must have an arity lesser or equal to {{#n}}',\n        'function.minArity': '{{#label}} must have an arity greater or equal to {{#n}}'\n    }\n});\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Any = require('./any');\nconst Common = require('../common');\n\n\nconst internals = {\n    numberRx: /^\\s*[+-]?(?:(?:\\d+(?:\\.\\d*)?)|(?:\\.\\d+))(?:e([+-]?\\d+))?\\s*$/i,\n    precisionRx: /(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/,\n    exponentialPartRegex: /[eE][+-]?\\d+$/,\n    leadingSignAndZerosRegex: /^[+-]?(0*)?/,\n    dotRegex: /\\./,\n    trailingZerosRegex: /0+$/,\n    decimalPlaces(value) {\n\n        const str = value.toString();\n        const dindex = str.indexOf('.');\n        const eindex = str.indexOf('e');\n        return (\n            (dindex < 0 ? 0 : (eindex < 0 ? str.length : eindex) - dindex - 1) +\n            (eindex < 0 ? 0 : Math.max(0, -parseInt(str.slice(eindex + 1))))\n        );\n    }\n};\n\n\nmodule.exports = Any.extend({\n\n    type: 'number',\n\n    flags: {\n\n        unsafe: { default: false }\n    },\n\n    coerce: {\n        from: 'string',\n        method(value, { schema, error }) {\n\n            const matches = value.match(internals.numberRx);\n            if (!matches) {\n                return;\n            }\n\n            value = value.trim();\n            const result = { value: parseFloat(value) };\n\n            if (result.value === 0) {\n                result.value = 0;           // -0\n            }\n\n            if (!schema._flags.unsafe) {\n                if (value.match(/e/i)) {\n                    if (internals.extractSignificantDigits(value) !== internals.extractSignificantDigits(String(result.value))) {\n                        result.errors = error('number.unsafe');\n                        return result;\n                    }\n                }\n                else {\n                    const string = result.value.toString();\n                    if (string.match(/e/i)) {\n                        return result;\n                    }\n\n                    if (string !== internals.normalizeDecimal(value)) {\n                        result.errors = error('number.unsafe');\n                        return result;\n                    }\n                }\n            }\n\n            return result;\n        }\n    },\n\n    validate(value, { schema, error, prefs }) {\n\n        if (value === Infinity ||\n            value === -Infinity) {\n\n            return { value, errors: error('number.infinity') };\n        }\n\n        if (!Common.isNumber(value)) {\n            return { value, errors: error('number.base') };\n        }\n\n        const result = { value };\n\n        if (prefs.convert) {\n            const rule = schema.$_getRule('precision');\n            if (rule) {\n                const precision = Math.pow(10, rule.args.limit);                    // This is conceptually equivalent to using toFixed but it should be much faster\n                result.value = Math.round(result.value * precision) / precision;\n            }\n        }\n\n        if (result.value === 0) {\n            result.value = 0;           // -0\n        }\n\n        if (!schema._flags.unsafe &&\n            (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER)) {\n\n            result.errors = error('number.unsafe');\n        }\n\n        return result;\n    },\n\n    rules: {\n\n        compare: {\n            method: false,\n            validate(value, helpers, { limit }, { name, operator, args }) {\n\n                if (Common.compare(value, limit, operator)) {\n                    return value;\n                }\n\n                return helpers.error('number.' + name, { limit: args.limit, value });\n            },\n            args: [\n                {\n                    name: 'limit',\n                    ref: true,\n                    assert: Common.isNumber,\n                    message: 'must be a number'\n                }\n            ]\n        },\n\n        greater: {\n            method(limit) {\n\n                return this.$_addRule({ name: 'greater', method: 'compare', args: { limit }, operator: '>' });\n            }\n        },\n\n        integer: {\n            method() {\n\n                return this.$_addRule('integer');\n            },\n            validate(value, helpers) {\n\n                if (Math.trunc(value) - value === 0) {\n                    return value;\n                }\n\n                return helpers.error('number.integer');\n            }\n        },\n\n        less: {\n            method(limit) {\n\n                return this.$_addRule({ name: 'less', method: 'compare', args: { limit }, operator: '<' });\n            }\n        },\n\n        max: {\n            method(limit) {\n\n                return this.$_addRule({ name: 'max', method: 'compare', args: { limit }, operator: '<=' });\n            }\n        },\n\n        min: {\n            method(limit) {\n\n                return this.$_addRule({ name: 'min', method: 'compare', args: { limit }, operator: '>=' });\n            }\n        },\n\n        multiple: {\n            method(base) {\n\n                const baseDecimalPlace = typeof base === 'number' ? internals.decimalPlaces(base) : null;\n                const pfactor = Math.pow(10, baseDecimalPlace);\n\n                return this.$_addRule({\n                    name: 'multiple',\n                    args: {\n                        base,\n                        baseDecimalPlace,\n                        pfactor\n                    }\n                });\n            },\n            validate(value, helpers, { base, baseDecimalPlace, pfactor }, options) {\n\n                const valueDecimalPlace = internals.decimalPlaces(value);\n\n                if (valueDecimalPlace > baseDecimalPlace) {\n                    // Value with higher precision than base can never be a multiple\n                    return helpers.error('number.multiple', { multiple: options.args.base, value });\n                }\n\n                return Math.round(pfactor * value) % Math.round(pfactor * base) === 0 ?\n                    value :\n                    helpers.error('number.multiple', { multiple: options.args.base, value });\n            },\n            args: [\n                {\n                    name: 'base',\n                    ref: true,\n                    assert: (value) => typeof value === 'number' && isFinite(value) && value > 0,\n                    message: 'must be a positive number'\n                },\n                'baseDecimalPlace',\n                'pfactor'\n            ],\n            multi: true\n        },\n\n        negative: {\n            method() {\n\n                return this.sign('negative');\n            }\n        },\n\n        port: {\n            method() {\n\n                return this.$_addRule('port');\n            },\n            validate(value, helpers) {\n\n                if (Number.isSafeInteger(value) &&\n                    value >= 0 &&\n                    value <= 65535) {\n\n                    return value;\n                }\n\n                return helpers.error('number.port');\n            }\n        },\n\n        positive: {\n            method() {\n\n                return this.sign('positive');\n            }\n        },\n\n        precision: {\n            method(limit) {\n\n                Assert(Number.isSafeInteger(limit), 'limit must be an integer');\n\n                return this.$_addRule({ name: 'precision', args: { limit } });\n            },\n            validate(value, helpers, { limit }) {\n\n                const places = value.toString().match(internals.precisionRx);\n                const decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);\n                if (decimals <= limit) {\n                    return value;\n                }\n\n                return helpers.error('number.precision', { limit, value });\n            },\n            convert: true\n        },\n\n        sign: {\n            method(sign) {\n\n                Assert(['negative', 'positive'].includes(sign), 'Invalid sign', sign);\n\n                return this.$_addRule({ name: 'sign', args: { sign } });\n            },\n            validate(value, helpers, { sign }) {\n\n                if (sign === 'negative' && value < 0 ||\n                    sign === 'positive' && value > 0) {\n\n                    return value;\n                }\n\n                return helpers.error(`number.${sign}`);\n            }\n        },\n\n        unsafe: {\n            method(enabled = true) {\n\n                Assert(typeof enabled === 'boolean', 'enabled must be a boolean');\n\n                return this.$_setFlag('unsafe', enabled);\n            }\n        }\n    },\n\n    cast: {\n        string: {\n            from: (value) => typeof value === 'number',\n            to(value, helpers) {\n\n                return value.toString();\n            }\n        }\n    },\n\n    messages: {\n        'number.base': '{{#label}} must be a number',\n        'number.greater': '{{#label}} must be greater than {{#limit}}',\n        'number.infinity': '{{#label}} cannot be infinity',\n        'number.integer': '{{#label}} must be an integer',\n        'number.less': '{{#label}} must be less than {{#limit}}',\n        'number.max': '{{#label}} must be less than or equal to {{#limit}}',\n        'number.min': '{{#label}} must be greater than or equal to {{#limit}}',\n        'number.multiple': '{{#label}} must be a multiple of {{#multiple}}',\n        'number.negative': '{{#label}} must be a negative number',\n        'number.port': '{{#label}} must be a valid port',\n        'number.positive': '{{#label}} must be a positive number',\n        'number.precision': '{{#label}} must have no more than {{#limit}} decimal places',\n        'number.unsafe': '{{#label}} must be a safe number'\n    }\n});\n\n\n// Helpers\n\ninternals.extractSignificantDigits = function (value) {\n\n    return value\n        .replace(internals.exponentialPartRegex, '')\n        .replace(internals.dotRegex, '')\n        .replace(internals.trailingZerosRegex, '')\n        .replace(internals.leadingSignAndZerosRegex, '');\n};\n\n\ninternals.normalizeDecimal = function (str) {\n\n    str = str\n        // Remove leading plus signs\n        .replace(/^\\+/, '')\n        // Remove trailing zeros if there is a decimal point and unecessary decimal points\n        .replace(/\\.0*$/, '')\n        // Add a integer 0 if the numbers starts with a decimal point\n        .replace(/^(-?)\\.([^\\.]*)$/, '$10.$2')\n        // Remove leading zeros\n        .replace(/^(-?)0+([0-9])/, '$1$2');\n\n    if (str.includes('.') &&\n        str.endsWith('0')) {\n\n        str = str.replace(/0+$/, '');\n    }\n\n    if (str === '-0') {\n        return '0';\n    }\n\n    return str;\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst EscapeRegex = require('@hapi/hoek/lib/escapeRegex');\n\n\nconst internals = {};\n\n\ninternals.generate = function () {\n\n    const rfc3986 = {};\n\n    const hexDigit = '\\\\dA-Fa-f';                                               // HEXDIG = DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n    const hexDigitOnly = '[' + hexDigit + ']';\n\n    const unreserved = '\\\\w-\\\\.~';                                              // unreserved = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n    const subDelims = '!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=';                                 // sub-delims = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n    const pctEncoded = '%' + hexDigit;                                          // pct-encoded = \"%\" HEXDIG HEXDIG\n    const pchar = unreserved + pctEncoded + subDelims + ':@';                   // pchar = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n    const pcharOnly = '[' + pchar + ']';\n    const decOctect = '(?:0{0,2}\\\\d|0?[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])';     // dec-octet = DIGIT / %x31-39 DIGIT / \"1\" 2DIGIT / \"2\" %x30-34 DIGIT / \"25\" %x30-35  ; 0-9 / 10-99 / 100-199 / 200-249 / 250-255\n\n    rfc3986.ipv4address = '(?:' + decOctect + '\\\\.){3}' + decOctect;            // IPv4address = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\n\n    /*\n        h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal\n        ls32 = ( h16 \":\" h16 ) / IPv4address ; least-significant 32 bits of address\n        IPv6address =                            6( h16 \":\" ) ls32\n                    /                       \"::\" 5( h16 \":\" ) ls32\n                    / [               h16 ] \"::\" 4( h16 \":\" ) ls32\n                    / [ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n                    / [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n                    / [ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n                    / [ *4( h16 \":\" ) h16 ] \"::\"              ls32\n                    / [ *5( h16 \":\" ) h16 ] \"::\"              h16\n                    / [ *6( h16 \":\" ) h16 ] \"::\"\n    */\n\n    const h16 = hexDigitOnly + '{1,4}';\n    const ls32 = '(?:' + h16 + ':' + h16 + '|' + rfc3986.ipv4address + ')';\n    const IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;\n    const IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;\n    const IPv6FourHex = '(?:' + h16 + ')?::(?:' + h16 + ':){4}' + ls32;\n    const IPv6ThreeHex = '(?:(?:' + h16 + ':){0,1}' + h16 + ')?::(?:' + h16 + ':){3}' + ls32;\n    const IPv6TwoHex = '(?:(?:' + h16 + ':){0,2}' + h16 + ')?::(?:' + h16 + ':){2}' + ls32;\n    const IPv6OneHex = '(?:(?:' + h16 + ':){0,3}' + h16 + ')?::' + h16 + ':' + ls32;\n    const IPv6NoneHex = '(?:(?:' + h16 + ':){0,4}' + h16 + ')?::' + ls32;\n    const IPv6NoneHex2 = '(?:(?:' + h16 + ':){0,5}' + h16 + ')?::' + h16;\n    const IPv6NoneHex3 = '(?:(?:' + h16 + ':){0,6}' + h16 + ')?::';\n\n    rfc3986.ipv4Cidr = '(?:\\\\d|[1-2]\\\\d|3[0-2])';                                           // IPv4 cidr = DIGIT / %x31-32 DIGIT / \"3\" %x30-32  ; 0-9 / 10-29 / 30-32\n    rfc3986.ipv6Cidr = '(?:0{0,2}\\\\d|0?[1-9]\\\\d|1[01]\\\\d|12[0-8])';                         // IPv6 cidr = DIGIT / %x31-39 DIGIT / \"1\" %x0-1 DIGIT / \"12\" %x0-8;   0-9 / 10-99 / 100-119 / 120-128\n    rfc3986.ipv6address = '(?:' + IPv6SixHex + '|' + IPv6FiveHex + '|' + IPv6FourHex + '|' + IPv6ThreeHex + '|' + IPv6TwoHex + '|' + IPv6OneHex + '|' + IPv6NoneHex + '|' + IPv6NoneHex2 + '|' + IPv6NoneHex3 + ')';\n    rfc3986.ipvFuture = 'v' + hexDigitOnly + '+\\\\.[' + unreserved + subDelims + ':]+';      // IPvFuture = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\n\n    rfc3986.scheme = '[a-zA-Z][a-zA-Z\\\\d+-\\\\.]*';                                           // scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n    rfc3986.schemeRegex = new RegExp(rfc3986.scheme);\n\n    const userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*';                     // userinfo = *( unreserved / pct-encoded / sub-delims / \":\" )\n    const IPLiteral = '\\\\[(?:' + rfc3986.ipv6address + '|' + rfc3986.ipvFuture + ')\\\\]';    // IP-literal = \"[\" ( IPv6address / IPvFuture  ) \"]\"\n    const regName = '[' + unreserved + pctEncoded + subDelims + ']{1,255}';                 // reg-name = *( unreserved / pct-encoded / sub-delims )\n    const host = '(?:' + IPLiteral + '|' + rfc3986.ipv4address + '|' + regName + ')';       // host = IP-literal / IPv4address / reg-name\n    const port = '\\\\d*';                                                                    // port = *DIGIT\n    const authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?';               // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n    const authorityCapture = '(?:' + userinfo + '@)?(' + host + ')(?::' + port + ')?';\n\n    /*\n        segment       = *pchar\n        segment-nz    = 1*pchar\n        path          = path-abempty    ; begins with \"/\" '|' is empty\n                    / path-absolute   ; begins with \"/\" but not \"//\"\n                    / path-noscheme   ; begins with a non-colon segment\n                    / path-rootless   ; begins with a segment\n                    / path-empty      ; zero characters\n        path-abempty  = *( \"/\" segment )\n        path-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\n        path-rootless = segment-nz *( \"/\" segment )\n    */\n\n    const segment = pcharOnly + '*';\n    const segmentNz = pcharOnly + '+';\n    const segmentNzNc = '[' + unreserved + pctEncoded + subDelims + '@' + ']+';\n    const pathEmpty = '';\n    const pathAbEmpty = '(?:\\\\/' + segment + ')*';\n    const pathAbsolute = '\\\\/(?:' + segmentNz + pathAbEmpty + ')?';\n    const pathRootless = segmentNz + pathAbEmpty;\n    const pathNoScheme = segmentNzNc + pathAbEmpty;\n    const pathAbNoAuthority = '(?:\\\\/\\\\/\\\\/' + segment + pathAbEmpty + ')';     // Used by file:///\n\n    // hier-part = \"//\" authority path\n\n    rfc3986.hierPart = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathRootless + '|' + pathAbNoAuthority + ')';\n    rfc3986.hierPartCapture = '(?:' + '(?:\\\\/\\\\/' + authorityCapture + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathRootless + ')';\n\n    // relative-part = \"//\" authority path-abempty / path-absolute / path-noscheme / path-empty\n\n    rfc3986.relativeRef = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathNoScheme + '|' + pathEmpty + ')';\n    rfc3986.relativeRefCapture = '(?:' + '(?:\\\\/\\\\/' + authorityCapture + pathAbEmpty + ')' + '|' + pathAbsolute + '|' + pathNoScheme + '|' + pathEmpty + ')';\n\n    // query = *( pchar / \"/\" / \"?\" )\n    // query = *( pchar / \"[\" / \"]\" / \"/\" / \"?\" )\n\n    rfc3986.query = '[' + pchar + '\\\\/\\\\?]*(?=#|$)';                            //Finish matching either at the fragment part '|' end of the line.\n    rfc3986.queryWithSquareBrackets = '[' + pchar + '\\\\[\\\\]\\\\/\\\\?]*(?=#|$)';\n\n    // fragment = *( pchar / \"/\" / \"?\" )\n\n    rfc3986.fragment = '[' + pchar + '\\\\/\\\\?]*';\n\n    return rfc3986;\n};\n\ninternals.rfc3986 = internals.generate();\n\n\nexports.ip = {\n    v4Cidr: internals.rfc3986.ipv4Cidr,\n    v6Cidr: internals.rfc3986.ipv6Cidr,\n    ipv4: internals.rfc3986.ipv4address,\n    ipv6: internals.rfc3986.ipv6address,\n    ipvfuture: internals.rfc3986.ipvFuture\n};\n\n\ninternals.createRegex = function (options) {\n\n    const rfc = internals.rfc3986;\n\n    // Construct expression\n\n    const query = options.allowQuerySquareBrackets ? rfc.queryWithSquareBrackets : rfc.query;\n    const suffix = '(?:\\\\?' + query + ')?' + '(?:#' + rfc.fragment + ')?';\n\n    // relative-ref = relative-part [ \"?\" query ] [ \"#\" fragment ]\n\n    const relative = options.domain ? rfc.relativeRefCapture : rfc.relativeRef;\n\n    if (options.relativeOnly) {\n        return internals.wrap(relative + suffix);\n    }\n\n    // Custom schemes\n\n    let customScheme = '';\n    if (options.scheme) {\n        Assert(options.scheme instanceof RegExp || typeof options.scheme === 'string' || Array.isArray(options.scheme), 'scheme must be a RegExp, String, or Array');\n\n        const schemes = [].concat(options.scheme);\n        Assert(schemes.length >= 1, 'scheme must have at least 1 scheme specified');\n\n        // Flatten the array into a string to be used to match the schemes\n\n        const selections = [];\n        for (let i = 0; i < schemes.length; ++i) {\n            const scheme = schemes[i];\n            Assert(scheme instanceof RegExp || typeof scheme === 'string', 'scheme at position ' + i + ' must be a RegExp or String');\n\n            if (scheme instanceof RegExp) {\n                selections.push(scheme.source.toString());\n            }\n            else {\n                Assert(rfc.schemeRegex.test(scheme), 'scheme at position ' + i + ' must be a valid scheme');\n                selections.push(EscapeRegex(scheme));\n            }\n        }\n\n        customScheme = selections.join('|');\n    }\n\n    // URI = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n\n    const scheme = customScheme ? '(?:' + customScheme + ')' : rfc.scheme;\n    const absolute = '(?:' + scheme + ':' + (options.domain ? rfc.hierPartCapture : rfc.hierPart) + ')';\n    const prefix = options.allowRelative ? '(?:' + absolute + '|' + relative + ')' : absolute;\n    return internals.wrap(prefix + suffix, customScheme);\n};\n\n\ninternals.wrap = function (raw, scheme) {\n\n    raw = `(?=.)(?!https?\\:/(?:$|[^/]))(?!https?\\:///)(?!https?\\:[^/])${raw}`;     // Require at least one character and explicitly forbid 'http:/' or HTTP with empty domain\n\n    return {\n        raw,\n        regex: new RegExp(`^${raw}$`),\n        scheme\n    };\n};\n\n\ninternals.uriRegex = internals.createRegex({});\n\n\nexports.regex = function (options = {}) {\n\n    if (options.scheme ||\n        options.allowRelative ||\n        options.relativeOnly ||\n        options.allowQuerySquareBrackets ||\n        options.domain) {\n\n        return internals.createRegex(options);\n    }\n\n    return internals.uriRegex;\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst DeepEqual = require('@hapi/hoek/lib/deepEqual');\n\nconst Common = require('./common');\n\n\nconst internals = {};\n\n\nmodule.exports = internals.Values = class {\n\n    constructor(values, refs) {\n\n        this._values = new Set(values);\n        this._refs = new Set(refs);\n        this._lowercase = internals.lowercases(values);\n\n        this._override = false;\n    }\n\n    get length() {\n\n        return this._values.size + this._refs.size;\n    }\n\n    add(value, refs) {\n\n        // Reference\n\n        if (Common.isResolvable(value)) {\n            if (!this._refs.has(value)) {\n                this._refs.add(value);\n\n                if (refs) {                     // Skipped in a merge\n                    refs.register(value);\n                }\n            }\n\n            return;\n        }\n\n        // Value\n\n        if (!this.has(value, null, null, false)) {\n            this._values.add(value);\n\n            if (typeof value === 'string') {\n                this._lowercase.set(value.toLowerCase(), value);\n            }\n        }\n    }\n\n    static merge(target, source, remove) {\n\n        target = target || new internals.Values();\n\n        if (source) {\n            if (source._override) {\n                return source.clone();\n            }\n\n            for (const item of [...source._values, ...source._refs]) {\n                target.add(item);\n            }\n        }\n\n        if (remove) {\n            for (const item of [...remove._values, ...remove._refs]) {\n                target.remove(item);\n            }\n        }\n\n        return target.length ? target : null;\n    }\n\n    remove(value) {\n\n        // Reference\n\n        if (Common.isResolvable(value)) {\n            this._refs.delete(value);\n            return;\n        }\n\n        // Value\n\n        this._values.delete(value);\n\n        if (typeof value === 'string') {\n            this._lowercase.delete(value.toLowerCase());\n        }\n    }\n\n    has(value, state, prefs, insensitive) {\n\n        return !!this.get(value, state, prefs, insensitive);\n    }\n\n    get(value, state, prefs, insensitive) {\n\n        if (!this.length) {\n            return false;\n        }\n\n        // Simple match\n\n        if (this._values.has(value)) {\n            return { value };\n        }\n\n        // Case insensitive string match\n\n        if (typeof value === 'string' &&\n            value &&\n            insensitive) {\n\n            const found = this._lowercase.get(value.toLowerCase());\n            if (found) {\n                return { value: found };\n            }\n        }\n\n        if (!this._refs.size &&\n            typeof value !== 'object') {\n\n            return false;\n        }\n\n        // Objects\n\n        if (typeof value === 'object') {\n            for (const item of this._values) {\n                if (DeepEqual(item, value)) {\n                    return { value: item };\n                }\n            }\n        }\n\n        // References\n\n        if (state) {\n            for (const ref of this._refs) {\n                const resolved = ref.resolve(value, state, prefs, null, { in: true });\n                if (resolved === undefined) {\n                    continue;\n                }\n\n                const items = !ref.in || typeof resolved !== 'object'\n                    ? [resolved]\n                    : Array.isArray(resolved) ? resolved : Object.keys(resolved);\n\n                for (const item of items) {\n                    if (typeof item !== typeof value) {\n                        continue;\n                    }\n\n                    if (insensitive &&\n                        value &&\n                        typeof value === 'string') {\n\n                        if (item.toLowerCase() === value.toLowerCase()) {\n                            return { value: item, ref };\n                        }\n                    }\n                    else {\n                        if (DeepEqual(item, value)) {\n                            return { value: item, ref };\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    override() {\n\n        this._override = true;\n    }\n\n    values(options) {\n\n        if (options &&\n            options.display) {\n\n            const values = [];\n\n            for (const item of [...this._values, ...this._refs]) {\n                if (item !== undefined) {\n                    values.push(item);\n                }\n            }\n\n            return values;\n        }\n\n        return Array.from([...this._values, ...this._refs]);\n    }\n\n    clone() {\n\n        const set = new internals.Values(this._values, this._refs);\n        set._override = this._override;\n        return set;\n    }\n\n    concat(source) {\n\n        Assert(!source._override, 'Cannot concat override set of values');\n\n        const set = new internals.Values([...this._values, ...source._values], [...this._refs, ...source._refs]);\n        set._override = this._override;\n        return set;\n    }\n\n    describe() {\n\n        const normalized = [];\n\n        if (this._override) {\n            normalized.push({ override: true });\n        }\n\n        for (const value of this._values.values()) {\n            normalized.push(value && typeof value === 'object' ? { value } : value);\n        }\n\n        for (const value of this._refs.values()) {\n            normalized.push(value.describe());\n        }\n\n        return normalized;\n    }\n};\n\n\ninternals.Values.prototype[Common.symbols.values] = true;\n\n\n// Aliases\n\ninternals.Values.prototype.slice = internals.Values.prototype.clone;\n\n\n// Helpers\n\ninternals.lowercases = function (from) {\n\n    const map = new Map();\n\n    if (from) {\n        for (const value of from) {\n            if (typeof value === 'string') {\n                map.set(value.toLowerCase(), value);\n            }\n        }\n    }\n\n    return map;\n};\n","'use strict';\n\nconst internals = {};\n\n\nmodule.exports = function (...args) {\n\n    try {\n        return JSON.stringify(...args);\n    }\n    catch (err) {\n        return '[Cannot display object: ' + err.message + ']';\n    }\n};\n","module.exports = require(\"aws-sdk\");","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst Clone = require('@hapi/hoek/lib/clone');\n\nconst Common = require('./common');\nconst Messages = require('./messages');\n\n\nconst internals = {};\n\n\nexports.type = function (from, options) {\n\n    const base = Object.getPrototypeOf(from);\n    const prototype = Clone(base);\n    const schema = from._assign(Object.create(prototype));\n    const def = Object.assign({}, options);                                 // Shallow cloned\n    delete def.base;\n\n    prototype._definition = def;\n\n    const parent = base._definition || {};\n    def.messages = Messages.merge(parent.messages, def.messages);\n    def.properties = Object.assign({}, parent.properties, def.properties);\n\n    // Type\n\n    schema.type = def.type;\n\n    // Flags\n\n    def.flags = Object.assign({}, parent.flags, def.flags);\n\n    // Terms\n\n    const terms = Object.assign({}, parent.terms);\n    if (def.terms) {\n        for (const name in def.terms) {                                     // Only apply own terms\n            const term = def.terms[name];\n            Assert(schema.$_terms[name] === undefined, 'Invalid term override for', def.type, name);\n            schema.$_terms[name] = term.init;\n            terms[name] = term;\n        }\n    }\n\n    def.terms = terms;\n\n    // Constructor arguments\n\n    if (!def.args) {\n        def.args = parent.args;\n    }\n\n    // Prepare\n\n    def.prepare = internals.prepare(def.prepare, parent.prepare);\n\n    // Coerce\n\n    if (def.coerce) {\n        if (typeof def.coerce === 'function') {\n            def.coerce = { method: def.coerce };\n        }\n\n        if (def.coerce.from &&\n            !Array.isArray(def.coerce.from)) {\n\n            def.coerce = { method: def.coerce.method, from: [].concat(def.coerce.from) };\n        }\n    }\n\n    def.coerce = internals.coerce(def.coerce, parent.coerce);\n\n    // Validate\n\n    def.validate = internals.validate(def.validate, parent.validate);\n\n    // Rules\n\n    const rules = Object.assign({}, parent.rules);\n    if (def.rules) {\n        for (const name in def.rules) {\n            const rule = def.rules[name];\n            Assert(typeof rule === 'object', 'Invalid rule definition for', def.type, name);\n\n            let method = rule.method;\n            if (method === undefined) {\n                method = function () {\n\n                    return this.$_addRule(name);\n                };\n            }\n\n            if (method) {\n                Assert(!prototype[name], 'Rule conflict in', def.type, name);\n                prototype[name] = method;\n            }\n\n            Assert(!rules[name], 'Rule conflict in', def.type, name);\n            rules[name] = rule;\n\n            if (rule.alias) {\n                const aliases = [].concat(rule.alias);\n                for (const alias of aliases) {\n                    prototype[alias] = rule.method;\n                }\n            }\n\n            if (rule.args) {\n                rule.argsByName = new Map();\n                rule.args = rule.args.map((arg) => {\n\n                    if (typeof arg === 'string') {\n                        arg = { name: arg };\n                    }\n\n                    Assert(!rule.argsByName.has(arg.name), 'Duplicated argument name', arg.name);\n\n                    if (Common.isSchema(arg.assert)) {\n                        arg.assert = arg.assert.strict().label(arg.name);\n                    }\n\n                    rule.argsByName.set(arg.name, arg);\n                    return arg;\n                });\n            }\n        }\n    }\n\n    def.rules = rules;\n\n    // Modifiers\n\n    const modifiers = Object.assign({}, parent.modifiers);\n    if (def.modifiers) {\n        for (const name in def.modifiers) {\n            Assert(!prototype[name], 'Rule conflict in', def.type, name);\n\n            const modifier = def.modifiers[name];\n            Assert(typeof modifier === 'function', 'Invalid modifier definition for', def.type, name);\n\n            const method = function (arg) {\n\n                return this.rule({ [name]: arg });\n            };\n\n            prototype[name] = method;\n            modifiers[name] = modifier;\n        }\n    }\n\n    def.modifiers = modifiers;\n\n    // Overrides\n\n    if (def.overrides) {\n        prototype._super = base;\n        schema.$_super = {};                                                            // Backwards compatibility\n        for (const override in def.overrides) {\n            Assert(base[override], 'Cannot override missing', override);\n            def.overrides[override][Common.symbols.parent] = base[override];\n            schema.$_super[override] = base[override].bind(schema);                     // Backwards compatibility\n        }\n\n        Object.assign(prototype, def.overrides);\n    }\n\n    // Casts\n\n    def.cast = Object.assign({}, parent.cast, def.cast);\n\n    // Manifest\n\n    const manifest = Object.assign({}, parent.manifest, def.manifest);\n    manifest.build = internals.build(def.manifest && def.manifest.build, parent.manifest && parent.manifest.build);\n    def.manifest = manifest;\n\n    // Rebuild\n\n    def.rebuild = internals.rebuild(def.rebuild, parent.rebuild);\n\n    return schema;\n};\n\n\n// Helpers\n\ninternals.build = function (child, parent) {\n\n    if (!child ||\n        !parent) {\n\n        return child || parent;\n    }\n\n    return function (obj, desc) {\n\n        return parent(child(obj, desc), desc);\n    };\n};\n\n\ninternals.coerce = function (child, parent) {\n\n    if (!child ||\n        !parent) {\n\n        return child || parent;\n    }\n\n    return {\n        from: child.from && parent.from ? [...new Set([...child.from, ...parent.from])] : null,\n        method(value, helpers) {\n\n            let coerced;\n            if (!parent.from ||\n                parent.from.includes(typeof value)) {\n\n                coerced = parent.method(value, helpers);\n                if (coerced) {\n                    if (coerced.errors ||\n                        coerced.value === undefined) {\n\n                        return coerced;\n                    }\n\n                    value = coerced.value;\n                }\n            }\n\n            if (!child.from ||\n                child.from.includes(typeof value)) {\n\n                const own = child.method(value, helpers);\n                if (own) {\n                    return own;\n                }\n            }\n\n            return coerced;\n        }\n    };\n};\n\n\ninternals.prepare = function (child, parent) {\n\n    if (!child ||\n        !parent) {\n\n        return child || parent;\n    }\n\n    return function (value, helpers) {\n\n        const prepared = child(value, helpers);\n        if (prepared) {\n            if (prepared.errors ||\n                prepared.value === undefined) {\n\n                return prepared;\n            }\n\n            value = prepared.value;\n        }\n\n        return parent(value, helpers) || prepared;\n    };\n};\n\n\ninternals.rebuild = function (child, parent) {\n\n    if (!child ||\n        !parent) {\n\n        return child || parent;\n    }\n\n    return function (schema) {\n\n        parent(schema);\n        child(schema);\n    };\n};\n\n\ninternals.validate = function (child, parent) {\n\n    if (!child ||\n        !parent) {\n\n        return child || parent;\n    }\n\n    return function (value, helpers) {\n\n        const result = parent(value, helpers);\n        if (result) {\n            if (result.errors &&\n                (!Array.isArray(result.errors) || result.errors.length)) {\n\n                return result;\n            }\n\n            value = result.value;\n        }\n\n        return child(value, helpers) || result;\n    };\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst Clone = require('@hapi/hoek/lib/clone');\nconst Ignore = require('@hapi/hoek/lib/ignore');\nconst Reach = require('@hapi/hoek/lib/reach');\n\nconst Common = require('./common');\nconst Errors = require('./errors');\nconst State = require('./state');\n\n\nconst internals = {\n    result: Symbol('result')\n};\n\n\nexports.entry = function (value, schema, prefs) {\n\n    let settings = Common.defaults;\n    if (prefs) {\n        Assert(prefs.warnings === undefined, 'Cannot override warnings preference in synchronous validation');\n        Assert(prefs.artifacts === undefined, 'Cannot override artifacts preference in synchronous validation');\n        settings = Common.preferences(Common.defaults, prefs);\n    }\n\n    const result = internals.entry(value, schema, settings);\n    Assert(!result.mainstay.externals.length, 'Schema with external rules must use validateAsync()');\n    const outcome = { value: result.value };\n\n    if (result.error) {\n        outcome.error = result.error;\n    }\n\n    if (result.mainstay.warnings.length) {\n        outcome.warning = Errors.details(result.mainstay.warnings);\n    }\n\n    if (result.mainstay.debug) {\n        outcome.debug = result.mainstay.debug;\n    }\n\n    if (result.mainstay.artifacts) {\n        outcome.artifacts = result.mainstay.artifacts;\n    }\n\n    return outcome;\n};\n\n\nexports.entryAsync = async function (value, schema, prefs) {\n\n    let settings = Common.defaults;\n    if (prefs) {\n        settings = Common.preferences(Common.defaults, prefs);\n    }\n\n    const result = internals.entry(value, schema, settings);\n    const mainstay = result.mainstay;\n    if (result.error) {\n        if (mainstay.debug) {\n            result.error.debug = mainstay.debug;\n        }\n\n        throw result.error;\n    }\n\n    if (mainstay.externals.length) {\n        let root = result.value;\n        const errors = [];\n        for (const external of mainstay.externals) {\n            const path = external.state.path;\n            const linked = external.schema.type === 'link' ? mainstay.links.get(external.schema) : null;\n            let node = root;\n            let key;\n            let parent;\n\n            const ancestors = path.length ? [root] : [];\n            const original = path.length ? Reach(value, path) : value;\n\n            if (path.length) {\n                key = path[path.length - 1];\n\n                let current = root;\n                for (const segment of path.slice(0, -1)) {\n                    current = current[segment];\n                    ancestors.unshift(current);\n                }\n\n                parent = ancestors[0];\n                node = parent[key];\n            }\n\n            try {\n                const createError = (code, local) => (linked || external.schema).$_createError(code, node, local, external.state, settings);\n                const output = await external.method(node, {\n                    schema: external.schema,\n                    linked,\n                    state: external.state,\n                    prefs,\n                    original,\n                    error: createError,\n                    errorsArray: internals.errorsArray,\n                    warn: (code, local) => mainstay.warnings.push((linked || external.schema).$_createError(code, node, local, external.state, settings)),\n                    message: (messages, local) => (linked || external.schema).$_createError('external', node, local, external.state, settings, { messages })\n                });\n\n                if (output === undefined ||\n                    output === node) {\n\n                    continue;\n                }\n\n                if (output instanceof Errors.Report) {\n                    mainstay.tracer.log(external.schema, external.state, 'rule', 'external', 'error');\n                    errors.push(output);\n\n                    if (settings.abortEarly) {\n                        break;\n                    }\n\n                    continue;\n                }\n\n                if (Array.isArray(output) &&\n                    output[Common.symbols.errors]) {\n                    mainstay.tracer.log(external.schema, external.state, 'rule', 'external', 'error');\n                    errors.push(...output);\n\n                    if (settings.abortEarly) {\n                        break;\n                    }\n\n                    continue;\n                }\n\n                if (parent) {\n                    mainstay.tracer.value(external.state, 'rule', node, output, 'external');\n                    parent[key] = output;\n                }\n                else {\n                    mainstay.tracer.value(external.state, 'rule', root, output, 'external');\n                    root = output;\n                }\n            }\n            catch (err) {\n                if (settings.errors.label) {\n                    err.message += ` (${(external.label)})`;       // Change message to include path\n                }\n\n                throw err;\n            }\n        }\n\n        result.value = root;\n\n        if (errors.length) {\n            result.error = Errors.process(errors, value, settings);\n\n            if (mainstay.debug) {\n                result.error.debug = mainstay.debug;\n            }\n\n            throw result.error;\n        }\n    }\n\n    if (!settings.warnings &&\n        !settings.debug &&\n        !settings.artifacts) {\n\n        return result.value;\n    }\n\n    const outcome = { value: result.value };\n    if (mainstay.warnings.length) {\n        outcome.warning = Errors.details(mainstay.warnings);\n    }\n\n    if (mainstay.debug) {\n        outcome.debug = mainstay.debug;\n    }\n\n    if (mainstay.artifacts) {\n        outcome.artifacts = mainstay.artifacts;\n    }\n\n    return outcome;\n};\n\n\ninternals.Mainstay = class {\n\n    constructor(tracer, debug, links) {\n\n        this.externals = [];\n        this.warnings = [];\n        this.tracer = tracer;\n        this.debug = debug;\n        this.links = links;\n        this.shadow = null;\n        this.artifacts = null;\n\n        this._snapshots = [];\n    }\n\n    snapshot() {\n\n        this._snapshots.push({\n            externals: this.externals.slice(),\n            warnings: this.warnings.slice()\n        });\n    }\n\n    restore() {\n\n        const snapshot = this._snapshots.pop();\n        this.externals = snapshot.externals;\n        this.warnings = snapshot.warnings;\n    }\n\n    commit() {\n\n        this._snapshots.pop();\n    }\n};\n\n\ninternals.entry = function (value, schema, prefs) {\n\n    // Prepare state\n\n    const { tracer, cleanup } = internals.tracer(schema, prefs);\n    const debug = prefs.debug ? [] : null;\n    const links = schema._ids._schemaChain ? new Map() : null;\n    const mainstay = new internals.Mainstay(tracer, debug, links);\n    const schemas = schema._ids._schemaChain ? [{ schema }] : null;\n    const state = new State([], [], { mainstay, schemas });\n\n    // Validate value\n\n    const result = exports.validate(value, schema, state, prefs);\n\n    // Process value and errors\n\n    if (cleanup) {\n        schema.$_root.untrace();\n    }\n\n    const error = Errors.process(result.errors, value, prefs);\n    return { value: result.value, error, mainstay };\n};\n\n\ninternals.tracer = function (schema, prefs) {\n\n    if (schema.$_root._tracer) {\n        return { tracer: schema.$_root._tracer._register(schema) };\n    }\n\n    if (prefs.debug) {\n        Assert(schema.$_root.trace, 'Debug mode not supported');\n        return { tracer: schema.$_root.trace()._register(schema), cleanup: true };\n    }\n\n    return { tracer: internals.ignore };\n};\n\n\nexports.validate = function (value, schema, state, prefs, overrides = {}) {\n\n    if (schema.$_terms.whens) {\n        schema = schema._generate(value, state, prefs).schema;\n    }\n\n    // Setup state and settings\n\n    if (schema._preferences) {\n        prefs = internals.prefs(schema, prefs);\n    }\n\n    // Cache\n\n    if (schema._cache &&\n        prefs.cache) {\n\n        const result = schema._cache.get(value);\n        state.mainstay.tracer.debug(state, 'validate', 'cached', !!result);\n        if (result) {\n            return result;\n        }\n    }\n\n    // Helpers\n\n    const createError = (code, local, localState) => schema.$_createError(code, value, local, localState || state, prefs);\n    const helpers = {\n        original: value,\n        prefs,\n        schema,\n        state,\n        error: createError,\n        errorsArray: internals.errorsArray,\n        warn: (code, local, localState) => state.mainstay.warnings.push(createError(code, local, localState)),\n        message: (messages, local) => schema.$_createError('custom', value, local, state, prefs, { messages })\n    };\n\n    // Prepare\n\n    state.mainstay.tracer.entry(schema, state);\n\n    const def = schema._definition;\n    if (def.prepare &&\n        value !== undefined &&\n        prefs.convert) {\n\n        const prepared = def.prepare(value, helpers);\n        if (prepared) {\n            state.mainstay.tracer.value(state, 'prepare', value, prepared.value);\n            if (prepared.errors) {\n                return internals.finalize(prepared.value, [].concat(prepared.errors), helpers);         // Prepare error always aborts early\n            }\n\n            value = prepared.value;\n        }\n    }\n\n    // Type coercion\n\n    if (def.coerce &&\n        value !== undefined &&\n        prefs.convert &&\n        (!def.coerce.from || def.coerce.from.includes(typeof value))) {\n\n        const coerced = def.coerce.method(value, helpers);\n        if (coerced) {\n            state.mainstay.tracer.value(state, 'coerced', value, coerced.value);\n            if (coerced.errors) {\n                return internals.finalize(coerced.value, [].concat(coerced.errors), helpers);           // Coerce error always aborts early\n            }\n\n            value = coerced.value;\n        }\n    }\n\n    // Empty value\n\n    const empty = schema._flags.empty;\n    if (empty &&\n        empty.$_match(internals.trim(value, schema), state.nest(empty), Common.defaults)) {\n\n        state.mainstay.tracer.value(state, 'empty', value, undefined);\n        value = undefined;\n    }\n\n    // Presence requirements (required, optional, forbidden)\n\n    const presence = overrides.presence || schema._flags.presence || (schema._flags._endedSwitch ? null : prefs.presence);\n    if (value === undefined) {\n        if (presence === 'forbidden') {\n            return internals.finalize(value, null, helpers);\n        }\n\n        if (presence === 'required') {\n            return internals.finalize(value, [schema.$_createError('any.required', value, null, state, prefs)], helpers);\n        }\n\n        if (presence === 'optional') {\n            if (schema._flags.default !== Common.symbols.deepDefault) {\n                return internals.finalize(value, null, helpers);\n            }\n\n            state.mainstay.tracer.value(state, 'default', value, {});\n            value = {};\n        }\n    }\n    else if (presence === 'forbidden') {\n        return internals.finalize(value, [schema.$_createError('any.unknown', value, null, state, prefs)], helpers);\n    }\n\n    // Allowed values\n\n    const errors = [];\n\n    if (schema._valids) {\n        const match = schema._valids.get(value, state, prefs, schema._flags.insensitive);\n        if (match) {\n            if (prefs.convert) {\n                state.mainstay.tracer.value(state, 'valids', value, match.value);\n                value = match.value;\n            }\n\n            state.mainstay.tracer.filter(schema, state, 'valid', match);\n            return internals.finalize(value, null, helpers);\n        }\n\n        if (schema._flags.only) {\n            const report = schema.$_createError('any.only', value, { valids: schema._valids.values({ display: true }) }, state, prefs);\n            if (prefs.abortEarly) {\n                return internals.finalize(value, [report], helpers);\n            }\n\n            errors.push(report);\n        }\n    }\n\n    // Denied values\n\n    if (schema._invalids) {\n        const match = schema._invalids.get(value, state, prefs, schema._flags.insensitive);\n        if (match) {\n            state.mainstay.tracer.filter(schema, state, 'invalid', match);\n            const report = schema.$_createError('any.invalid', value, { invalids: schema._invalids.values({ display: true }) }, state, prefs);\n            if (prefs.abortEarly) {\n                return internals.finalize(value, [report], helpers);\n            }\n\n            errors.push(report);\n        }\n    }\n\n    // Base type\n\n    if (def.validate) {\n        const base = def.validate(value, helpers);\n        if (base) {\n            state.mainstay.tracer.value(state, 'base', value, base.value);\n            value = base.value;\n\n            if (base.errors) {\n                if (!Array.isArray(base.errors)) {\n                    errors.push(base.errors);\n                    return internals.finalize(value, errors, helpers);          // Base error always aborts early\n                }\n\n                if (base.errors.length) {\n                    errors.push(...base.errors);\n                    return internals.finalize(value, errors, helpers);          // Base error always aborts early\n                }\n            }\n        }\n    }\n\n    // Validate tests\n\n    if (!schema._rules.length) {\n        return internals.finalize(value, errors, helpers);\n    }\n\n    return internals.rules(value, errors, helpers);\n};\n\n\ninternals.rules = function (value, errors, helpers) {\n\n    const { schema, state, prefs } = helpers;\n\n    for (const rule of schema._rules) {\n        const definition = schema._definition.rules[rule.method];\n\n        // Skip rules that are also applied in coerce step\n\n        if (definition.convert &&\n            prefs.convert) {\n\n            state.mainstay.tracer.log(schema, state, 'rule', rule.name, 'full');\n            continue;\n        }\n\n        // Resolve references\n\n        let ret;\n        let args = rule.args;\n        if (rule._resolve.length) {\n            args = Object.assign({}, args);                                     // Shallow copy\n            for (const key of rule._resolve) {\n                const resolver = definition.argsByName.get(key);\n\n                const resolved = args[key].resolve(value, state, prefs);\n                const normalized = resolver.normalize ? resolver.normalize(resolved) : resolved;\n\n                const invalid = Common.validateArg(normalized, null, resolver);\n                if (invalid) {\n                    ret = schema.$_createError('any.ref', resolved, { arg: key, ref: args[key], reason: invalid }, state, prefs);\n                    break;\n                }\n\n                args[key] = normalized;\n            }\n        }\n\n        // Test rule\n\n        ret = ret || definition.validate(value, helpers, args, rule);           // Use ret if already set to reference error\n\n        const result = internals.rule(ret, rule);\n        if (result.errors) {\n            state.mainstay.tracer.log(schema, state, 'rule', rule.name, 'error');\n\n            if (rule.warn) {\n                state.mainstay.warnings.push(...result.errors);\n                continue;\n            }\n\n            if (prefs.abortEarly) {\n                return internals.finalize(value, result.errors, helpers);\n            }\n\n            errors.push(...result.errors);\n        }\n        else {\n            state.mainstay.tracer.log(schema, state, 'rule', rule.name, 'pass');\n            state.mainstay.tracer.value(state, 'rule', value, result.value, rule.name);\n            value = result.value;\n        }\n    }\n\n    return internals.finalize(value, errors, helpers);\n};\n\n\ninternals.rule = function (ret, rule) {\n\n    if (ret instanceof Errors.Report) {\n        internals.error(ret, rule);\n        return { errors: [ret], value: null };\n    }\n\n    if (Array.isArray(ret) &&\n        ret[Common.symbols.errors]) {\n\n        ret.forEach((report) => internals.error(report, rule));\n        return { errors: ret, value: null };\n    }\n\n    return { errors: null, value: ret };\n};\n\n\ninternals.error = function (report, rule) {\n\n    if (rule.message) {\n        report._setTemplate(rule.message);\n    }\n\n    return report;\n};\n\n\ninternals.finalize = function (value, errors, helpers) {\n\n    errors = errors || [];\n    const { schema, state, prefs } = helpers;\n\n    // Failover value\n\n    if (errors.length) {\n        const failover = internals.default('failover', undefined, errors, helpers);\n        if (failover !== undefined) {\n            state.mainstay.tracer.value(state, 'failover', value, failover);\n            value = failover;\n            errors = [];\n        }\n    }\n\n    // Error override\n\n    if (errors.length &&\n        schema._flags.error) {\n\n        if (typeof schema._flags.error === 'function') {\n            errors = schema._flags.error(errors);\n            if (!Array.isArray(errors)) {\n                errors = [errors];\n            }\n\n            for (const error of errors) {\n                Assert(error instanceof Error || error instanceof Errors.Report, 'error() must return an Error object');\n            }\n        }\n        else {\n            errors = [schema._flags.error];\n        }\n    }\n\n    // Default\n\n    if (value === undefined) {\n        const defaulted = internals.default('default', value, errors, helpers);\n        state.mainstay.tracer.value(state, 'default', value, defaulted);\n        value = defaulted;\n    }\n\n    // Cast\n\n    if (schema._flags.cast &&\n        value !== undefined) {\n\n        const caster = schema._definition.cast[schema._flags.cast];\n        if (caster.from(value)) {\n            const casted = caster.to(value, helpers);\n            state.mainstay.tracer.value(state, 'cast', value, casted, schema._flags.cast);\n            value = casted;\n        }\n    }\n\n    // Externals\n\n    if (schema.$_terms.externals &&\n        prefs.externals &&\n        prefs._externals !== false) {                       // Disabled for matching\n\n        for (const { method } of schema.$_terms.externals) {\n            state.mainstay.externals.push({ method, schema, state, label: Errors.label(schema._flags, state, prefs) });\n        }\n    }\n\n    // Result\n\n    const result = { value, errors: errors.length ? errors : null };\n\n    if (schema._flags.result) {\n        result.value = schema._flags.result === 'strip' ? undefined : /* raw */ helpers.original;\n        state.mainstay.tracer.value(state, schema._flags.result, value, result.value);\n        state.shadow(value, schema._flags.result);\n    }\n\n    // Cache\n\n    if (schema._cache &&\n        prefs.cache !== false &&\n        !schema._refs.length) {\n\n        schema._cache.set(helpers.original, result);\n    }\n\n    // Artifacts\n\n    if (value !== undefined &&\n        !result.errors &&\n        schema._flags.artifact !== undefined) {\n\n        state.mainstay.artifacts = state.mainstay.artifacts || new Map();\n        if (!state.mainstay.artifacts.has(schema._flags.artifact)) {\n            state.mainstay.artifacts.set(schema._flags.artifact, []);\n        }\n\n        state.mainstay.artifacts.get(schema._flags.artifact).push(state.path);\n    }\n\n    return result;\n};\n\n\ninternals.prefs = function (schema, prefs) {\n\n    const isDefaultOptions = prefs === Common.defaults;\n    if (isDefaultOptions &&\n        schema._preferences[Common.symbols.prefs]) {\n\n        return schema._preferences[Common.symbols.prefs];\n    }\n\n    prefs = Common.preferences(prefs, schema._preferences);\n    if (isDefaultOptions) {\n        schema._preferences[Common.symbols.prefs] = prefs;\n    }\n\n    return prefs;\n};\n\n\ninternals.default = function (flag, value, errors, helpers) {\n\n    const { schema, state, prefs } = helpers;\n    const source = schema._flags[flag];\n    if (prefs.noDefaults ||\n        source === undefined) {\n\n        return value;\n    }\n\n    state.mainstay.tracer.log(schema, state, 'rule', flag, 'full');\n\n    if (!source) {\n        return source;\n    }\n\n    if (typeof source === 'function') {\n        const args = source.length ? [Clone(state.ancestors[0]), helpers] : [];\n\n        try {\n            return source(...args);\n        }\n        catch (err) {\n            errors.push(schema.$_createError(`any.${flag}`, null, { error: err }, state, prefs));\n            return;\n        }\n    }\n\n    if (typeof source !== 'object') {\n        return source;\n    }\n\n    if (source[Common.symbols.literal]) {\n        return source.literal;\n    }\n\n    if (Common.isResolvable(source)) {\n        return source.resolve(value, state, prefs);\n    }\n\n    return Clone(source);\n};\n\n\ninternals.trim = function (value, schema) {\n\n    if (typeof value !== 'string') {\n        return value;\n    }\n\n    const trim = schema.$_getRule('trim');\n    if (!trim ||\n        !trim.args.enabled) {\n\n        return value;\n    }\n\n    return value.trim();\n};\n\n\ninternals.ignore = {\n    active: false,\n    debug: Ignore,\n    entry: Ignore,\n    filter: Ignore,\n    log: Ignore,\n    resolve: Ignore,\n    value: Ignore\n};\n\n\ninternals.errorsArray = function () {\n\n    const errors = [];\n    errors[Common.symbols.errors] = true;\n    return errors;\n};\n","'use strict';\n\nconst internals = {};\n\n\nmodule.exports = function (input) {\n\n    if (!input) {\n        return '';\n    }\n\n    let escaped = '';\n\n    for (let i = 0; i < input.length; ++i) {\n\n        const charCode = input.charCodeAt(i);\n\n        if (internals.isSafe(charCode)) {\n            escaped += input[i];\n        }\n        else {\n            escaped += internals.escapeHtmlChar(charCode);\n        }\n    }\n\n    return escaped;\n};\n\n\ninternals.escapeHtmlChar = function (charCode) {\n\n    const namedEscape = internals.namedHtml.get(charCode);\n    if (namedEscape) {\n        return namedEscape;\n    }\n\n    if (charCode >= 256) {\n        return '&#' + charCode + ';';\n    }\n\n    const hexValue = charCode.toString(16).padStart(2, '0');\n    return `&#x${hexValue};`;\n};\n\n\ninternals.isSafe = function (charCode) {\n\n    return internals.safeCharCodes.has(charCode);\n};\n\n\ninternals.namedHtml = new Map([\n    [38, '&amp;'],\n    [60, '&lt;'],\n    [62, '&gt;'],\n    [34, '&quot;'],\n    [160, '&nbsp;'],\n    [162, '&cent;'],\n    [163, '&pound;'],\n    [164, '&curren;'],\n    [169, '&copy;'],\n    [174, '&reg;']\n]);\n\n\ninternals.safeCharCodes = (function () {\n\n    const safe = new Set();\n\n    for (let i = 32; i < 123; ++i) {\n\n        if ((i >= 97) ||                    // a-z\n            (i >= 65 && i <= 90) ||         // A-Z\n            (i >= 48 && i <= 57) ||         // 0-9\n            i === 32 ||                     // space\n            i === 46 ||                     // .\n            i === 44 ||                     // ,\n            i === 45 ||                     // -\n            i === 58 ||                     // :\n            i === 95) {                     // _\n\n            safe.add(i);\n        }\n    }\n\n    return safe;\n}());\n","'use strict';\n\nconst Assert = require('./assert');\nconst Clone = require('./clone');\nconst Utils = require('./utils');\n\n\nconst internals = {};\n\n\nmodule.exports = internals.merge = function (target, source, options) {\n\n    Assert(target && typeof target === 'object', 'Invalid target value: must be an object');\n    Assert(source === null || source === undefined || typeof source === 'object', 'Invalid source value: must be null, undefined, or an object');\n\n    if (!source) {\n        return target;\n    }\n\n    options = Object.assign({ nullOverride: true, mergeArrays: true }, options);\n\n    if (Array.isArray(source)) {\n        Assert(Array.isArray(target), 'Cannot merge array onto an object');\n        if (!options.mergeArrays) {\n            target.length = 0;                                                          // Must not change target assignment\n        }\n\n        for (let i = 0; i < source.length; ++i) {\n            target.push(Clone(source[i], { symbols: options.symbols }));\n        }\n\n        return target;\n    }\n\n    const keys = Utils.keys(source, options);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (key === '__proto__' ||\n            !Object.prototype.propertyIsEnumerable.call(source, key)) {\n\n            continue;\n        }\n\n        const value = source[key];\n        if (value &&\n            typeof value === 'object') {\n\n            if (target[key] === value) {\n                continue;                                           // Can occur for shallow merges\n            }\n\n            if (!target[key] ||\n                typeof target[key] !== 'object' ||\n                (Array.isArray(target[key]) !== Array.isArray(value)) ||\n                value instanceof Date ||\n                (Buffer && Buffer.isBuffer(value)) ||               // $lab:coverage:ignore$\n                value instanceof RegExp) {\n\n                target[key] = Clone(value, { symbols: options.symbols });\n            }\n            else {\n                internals.merge(target[key], value, options);\n            }\n        }\n        else {\n            if (value !== null &&\n                value !== undefined) {                              // Explicit to preserve empty strings\n\n                target[key] = value;\n            }\n            else if (options.nullOverride) {\n                target[key] = value;\n            }\n        }\n    }\n\n    return target;\n};\n","'use strict';\n\nconst Assert = require('./assert');\nconst Clone = require('./clone');\nconst Merge = require('./merge');\nconst Reach = require('./reach');\n\n\nconst internals = {};\n\n\nmodule.exports = function (defaults, source, options = {}) {\n\n    Assert(defaults && typeof defaults === 'object', 'Invalid defaults value: must be an object');\n    Assert(!source || source === true || typeof source === 'object', 'Invalid source value: must be true, falsy or an object');\n    Assert(typeof options === 'object', 'Invalid options: must be an object');\n\n    if (!source) {                                                  // If no source, return null\n        return null;\n    }\n\n    if (options.shallow) {\n        return internals.applyToDefaultsWithShallow(defaults, source, options);\n    }\n\n    const copy = Clone(defaults);\n\n    if (source === true) {                                          // If source is set to true, use defaults\n        return copy;\n    }\n\n    const nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;\n    return Merge(copy, source, { nullOverride, mergeArrays: false });\n};\n\n\ninternals.applyToDefaultsWithShallow = function (defaults, source, options) {\n\n    const keys = options.shallow;\n    Assert(Array.isArray(keys), 'Invalid keys');\n\n    const seen = new Map();\n    const merge = source === true ? null : new Set();\n\n    for (let key of keys) {\n        key = Array.isArray(key) ? key : key.split('.');            // Pre-split optimization\n\n        const ref = Reach(defaults, key);\n        if (ref &&\n            typeof ref === 'object') {\n\n            seen.set(ref, merge && Reach(source, key) || ref);\n        }\n        else if (merge) {\n            merge.add(key);\n        }\n    }\n\n    const copy = Clone(defaults, {}, seen);\n\n    if (!merge) {\n        return copy;\n    }\n\n    for (const key of merge) {\n        internals.reachCopy(copy, source, key);\n    }\n\n    const nullOverride = options.nullOverride !== undefined ? options.nullOverride : false;\n    return Merge(copy, source, { nullOverride, mergeArrays: false });\n};\n\n\ninternals.reachCopy = function (dst, src, path) {\n\n    for (const segment of path) {\n        if (!(segment in src)) {\n            return;\n        }\n\n        const val = src[segment];\n\n        if (typeof val !== 'object' || val === null) {\n            return;\n        }\n\n        src = val;\n    }\n\n    const value = src;\n    let ref = dst;\n    for (let i = 0; i < path.length - 1; ++i) {\n        const segment = path[i];\n        if (typeof ref[segment] !== 'object') {\n            ref[segment] = {};\n        }\n\n        ref = ref[segment];\n    }\n\n    ref[path[path.length - 1]] = value;\n};\n","'use strict';\n\nconst Keys = require('./keys');\n\n\nconst internals = {};\n\n\nmodule.exports = Keys.extend({\n\n    type: 'object',\n\n    cast: {\n        map: {\n            from: (value) => value && typeof value === 'object',\n            to(value, helpers) {\n\n                return new Map(Object.entries(value));\n            }\n        }\n    }\n});\n","'use strict';\n\nconst ApplyToDefaults = require('@hapi/hoek/lib/applyToDefaults');\nconst Assert = require('@hapi/hoek/lib/assert');\nconst Clone = require('@hapi/hoek/lib/clone');\nconst Topo = require('@hapi/topo');\n\nconst Any = require('./any');\nconst Common = require('../common');\nconst Compile = require('../compile');\nconst Errors = require('../errors');\nconst Ref = require('../ref');\nconst Template = require('../template');\n\n\nconst internals = {\n    renameDefaults: {\n        alias: false,                   // Keep old value in place\n        multiple: false,                // Allow renaming multiple keys into the same target\n        override: false                 // Overrides an existing key\n    }\n};\n\n\nmodule.exports = Any.extend({\n\n    type: '_keys',\n\n    properties: {\n\n        typeof: 'object'\n    },\n\n    flags: {\n\n        unknown: { default: undefined }\n    },\n\n    terms: {\n\n        dependencies: { init: null },\n        keys: { init: null, manifest: { mapped: { from: 'schema', to: 'key' } } },\n        patterns: { init: null },\n        renames: { init: null }\n    },\n\n    args(schema, keys) {\n\n        return schema.keys(keys);\n    },\n\n    validate(value, { schema, error, state, prefs }) {\n\n        if (!value ||\n            typeof value !== schema.$_property('typeof') ||\n            Array.isArray(value)) {\n\n            return { value, errors: error('object.base', { type: schema.$_property('typeof') }) };\n        }\n\n        // Skip if there are no other rules to test\n\n        if (!schema.$_terms.renames &&\n            !schema.$_terms.dependencies &&\n            !schema.$_terms.keys &&                       // null allows any keys\n            !schema.$_terms.patterns &&\n            !schema.$_terms.externals) {\n\n            return;\n        }\n\n        // Shallow clone value\n\n        value = internals.clone(value, prefs);\n        const errors = [];\n\n        // Rename keys\n\n        if (schema.$_terms.renames &&\n            !internals.rename(schema, value, state, prefs, errors)) {\n\n            return { value, errors };\n        }\n\n        // Anything allowed\n\n        if (!schema.$_terms.keys &&                       // null allows any keys\n            !schema.$_terms.patterns &&\n            !schema.$_terms.dependencies) {\n\n            return { value, errors };\n        }\n\n        // Defined keys\n\n        const unprocessed = new Set(Object.keys(value));\n\n        if (schema.$_terms.keys) {\n            const ancestors = [value, ...state.ancestors];\n\n            for (const child of schema.$_terms.keys) {\n                const key = child.key;\n                const item = value[key];\n\n                unprocessed.delete(key);\n\n                const localState = state.localize([...state.path, key], ancestors, child);\n                const result = child.schema.$_validate(item, localState, prefs);\n\n                if (result.errors) {\n                    if (prefs.abortEarly) {\n                        return { value, errors: result.errors };\n                    }\n\n                    if (result.value !== undefined) {\n                        value[key] = result.value;\n                    }\n\n                    errors.push(...result.errors);\n                }\n                else if (child.schema._flags.result === 'strip' ||\n                    result.value === undefined && item !== undefined) {\n\n                    delete value[key];\n                }\n                else if (result.value !== undefined) {\n                    value[key] = result.value;\n                }\n            }\n        }\n\n        // Unknown keys\n\n        if (unprocessed.size ||\n            schema._flags._hasPatternMatch) {\n\n            const early = internals.unknown(schema, value, unprocessed, errors, state, prefs);\n            if (early) {\n                return early;\n            }\n        }\n\n        // Validate dependencies\n\n        if (schema.$_terms.dependencies) {\n            for (const dep of schema.$_terms.dependencies) {\n                if (\n                    dep.key !== null &&\n                    internals.isPresent(dep.options)(dep.key.resolve(value, state, prefs, null, { shadow: false })) === false\n                ) {\n\n                    continue;\n                }\n\n                const failed = internals.dependencies[dep.rel](schema, dep, value, state, prefs);\n                if (failed) {\n                    const report = schema.$_createError(failed.code, value, failed.context, state, prefs);\n                    if (prefs.abortEarly) {\n                        return { value, errors: report };\n                    }\n\n                    errors.push(report);\n                }\n            }\n        }\n\n        return { value, errors };\n    },\n\n    rules: {\n\n        and: {\n            method(...peers /*, [options] */) {\n\n                Common.verifyFlat(peers, 'and');\n\n                return internals.dependency(this, 'and', null, peers);\n            }\n        },\n\n        append: {\n            method(schema) {\n\n                if (schema === null ||\n                    schema === undefined ||\n                    Object.keys(schema).length === 0) {\n\n                    return this;\n                }\n\n                return this.keys(schema);\n            }\n        },\n\n        assert: {\n            method(subject, schema, message) {\n\n                if (!Template.isTemplate(subject)) {\n                    subject = Compile.ref(subject);\n                }\n\n                Assert(message === undefined || typeof message === 'string', 'Message must be a string');\n\n                schema = this.$_compile(schema, { appendPath: true });\n\n                const obj = this.$_addRule({ name: 'assert', args: { subject, schema, message } });\n                obj.$_mutateRegister(subject);\n                obj.$_mutateRegister(schema);\n                return obj;\n            },\n            validate(value, { error, prefs, state }, { subject, schema, message }) {\n\n                const about = subject.resolve(value, state, prefs);\n                const path = Ref.isRef(subject) ? subject.absolute(state) : [];\n                if (schema.$_match(about, state.localize(path, [value, ...state.ancestors], schema), prefs)) {\n                    return value;\n                }\n\n                return error('object.assert', { subject, message });\n            },\n            args: ['subject', 'schema', 'message'],\n            multi: true\n        },\n\n        instance: {\n            method(constructor, name) {\n\n                Assert(typeof constructor === 'function', 'constructor must be a function');\n\n                name = name || constructor.name;\n\n                return this.$_addRule({ name: 'instance', args: { constructor, name } });\n            },\n            validate(value, helpers, { constructor, name }) {\n\n                if (value instanceof constructor) {\n                    return value;\n                }\n\n                return helpers.error('object.instance', { type: name, value });\n            },\n            args: ['constructor', 'name']\n        },\n\n        keys: {\n            method(schema) {\n\n                Assert(schema === undefined || typeof schema === 'object', 'Object schema must be a valid object');\n                Assert(!Common.isSchema(schema), 'Object schema cannot be a joi schema');\n\n                const obj = this.clone();\n\n                if (!schema) {                                      // Allow all\n                    obj.$_terms.keys = null;\n                }\n                else if (!Object.keys(schema).length) {             // Allow none\n                    obj.$_terms.keys = new internals.Keys();\n                }\n                else {\n                    obj.$_terms.keys = obj.$_terms.keys ? obj.$_terms.keys.filter((child) => !schema.hasOwnProperty(child.key)) : new internals.Keys();\n                    for (const key in schema) {\n                        Common.tryWithPath(() => obj.$_terms.keys.push({ key, schema: this.$_compile(schema[key]) }), key);\n                    }\n                }\n\n                return obj.$_mutateRebuild();\n            }\n        },\n\n        length: {\n            method(limit) {\n\n                return this.$_addRule({ name: 'length', args: { limit }, operator: '=' });\n            },\n            validate(value, helpers, { limit }, { name, operator, args }) {\n\n                if (Common.compare(Object.keys(value).length, limit, operator)) {\n                    return value;\n                }\n\n                return helpers.error('object.' + name, { limit: args.limit, value });\n            },\n            args: [\n                {\n                    name: 'limit',\n                    ref: true,\n                    assert: Common.limit,\n                    message: 'must be a positive integer'\n                }\n            ]\n        },\n\n        max: {\n            method(limit) {\n\n                return this.$_addRule({ name: 'max', method: 'length', args: { limit }, operator: '<=' });\n            }\n        },\n\n        min: {\n            method(limit) {\n\n                return this.$_addRule({ name: 'min', method: 'length', args: { limit }, operator: '>=' });\n            }\n        },\n\n        nand: {\n            method(...peers /*, [options] */) {\n\n                Common.verifyFlat(peers, 'nand');\n\n                return internals.dependency(this, 'nand', null, peers);\n            }\n        },\n\n        or: {\n            method(...peers /*, [options] */) {\n\n                Common.verifyFlat(peers, 'or');\n\n                return internals.dependency(this, 'or', null, peers);\n            }\n        },\n\n        oxor: {\n            method(...peers /*, [options] */) {\n\n                return internals.dependency(this, 'oxor', null, peers);\n            }\n        },\n\n        pattern: {\n            method(pattern, schema, options = {}) {\n\n                const isRegExp = pattern instanceof RegExp;\n                if (!isRegExp) {\n                    pattern = this.$_compile(pattern, { appendPath: true });\n                }\n\n                Assert(schema !== undefined, 'Invalid rule');\n                Common.assertOptions(options, ['fallthrough', 'matches']);\n\n                if (isRegExp) {\n                    Assert(!pattern.flags.includes('g') && !pattern.flags.includes('y'), 'pattern should not use global or sticky mode');\n                }\n\n                schema = this.$_compile(schema, { appendPath: true });\n\n                const obj = this.clone();\n                obj.$_terms.patterns = obj.$_terms.patterns || [];\n                const config = { [isRegExp ? 'regex' : 'schema']: pattern, rule: schema };\n                if (options.matches) {\n                    config.matches = this.$_compile(options.matches);\n                    if (config.matches.type !== 'array') {\n                        config.matches = config.matches.$_root.array().items(config.matches);\n                    }\n\n                    obj.$_mutateRegister(config.matches);\n                    obj.$_setFlag('_hasPatternMatch', true, { clone: false });\n                }\n\n                if (options.fallthrough) {\n                    config.fallthrough = true;\n                }\n\n                obj.$_terms.patterns.push(config);\n                obj.$_mutateRegister(schema);\n                return obj;\n            }\n        },\n\n        ref: {\n            method() {\n\n                return this.$_addRule('ref');\n            },\n            validate(value, helpers) {\n\n                if (Ref.isRef(value)) {\n                    return value;\n                }\n\n                return helpers.error('object.refType', { value });\n            }\n        },\n\n        regex: {\n            method() {\n\n                return this.$_addRule('regex');\n            },\n            validate(value, helpers) {\n\n                if (value instanceof RegExp) {\n                    return value;\n                }\n\n                return helpers.error('object.regex', { value });\n            }\n        },\n\n        rename: {\n            method(from, to, options = {}) {\n\n                Assert(typeof from === 'string' || from instanceof RegExp, 'Rename missing the from argument');\n                Assert(typeof to === 'string' || to instanceof Template, 'Invalid rename to argument');\n                Assert(to !== from, 'Cannot rename key to same name:', from);\n\n                Common.assertOptions(options, ['alias', 'ignoreUndefined', 'override', 'multiple']);\n\n                const obj = this.clone();\n\n                obj.$_terms.renames = obj.$_terms.renames || [];\n                for (const rename of obj.$_terms.renames) {\n                    Assert(rename.from !== from, 'Cannot rename the same key multiple times');\n                }\n\n                if (to instanceof Template) {\n                    obj.$_mutateRegister(to);\n                }\n\n                obj.$_terms.renames.push({\n                    from,\n                    to,\n                    options: ApplyToDefaults(internals.renameDefaults, options)\n                });\n\n                return obj;\n            }\n        },\n\n        schema: {\n            method(type = 'any') {\n\n                return this.$_addRule({ name: 'schema', args: { type } });\n            },\n            validate(value, helpers, { type }) {\n\n                if (Common.isSchema(value) &&\n                    (type === 'any' || value.type === type)) {\n\n                    return value;\n                }\n\n                return helpers.error('object.schema', { type });\n            }\n        },\n\n        unknown: {\n            method(allow) {\n\n                return this.$_setFlag('unknown', allow !== false);\n            }\n        },\n\n        with: {\n            method(key, peers, options = {}) {\n\n                return internals.dependency(this, 'with', key, peers, options);\n            }\n        },\n\n        without: {\n            method(key, peers, options = {}) {\n\n                return internals.dependency(this, 'without', key, peers, options);\n            }\n        },\n\n        xor: {\n            method(...peers /*, [options] */) {\n\n                Common.verifyFlat(peers, 'xor');\n\n                return internals.dependency(this, 'xor', null, peers);\n            }\n        }\n    },\n\n    overrides: {\n\n        default(value, options) {\n\n            if (value === undefined) {\n                value = Common.symbols.deepDefault;\n            }\n\n            return this.$_parent('default', value, options);\n        }\n    },\n\n    rebuild(schema) {\n\n        if (schema.$_terms.keys) {\n            const topo = new Topo.Sorter();\n            for (const child of schema.$_terms.keys) {\n                Common.tryWithPath(() => topo.add(child, { after: child.schema.$_rootReferences(), group: child.key }), child.key);\n            }\n\n            schema.$_terms.keys = new internals.Keys(...topo.nodes);\n        }\n    },\n\n    manifest: {\n\n        build(obj, desc) {\n\n            if (desc.keys) {\n                obj = obj.keys(desc.keys);\n            }\n\n            if (desc.dependencies) {\n                for (const { rel, key = null, peers, options } of desc.dependencies) {\n                    obj = internals.dependency(obj, rel, key, peers, options);\n                }\n            }\n\n            if (desc.patterns) {\n                for (const { regex, schema, rule, fallthrough, matches } of desc.patterns) {\n                    obj = obj.pattern(regex || schema, rule, { fallthrough, matches });\n                }\n            }\n\n            if (desc.renames) {\n                for (const { from, to, options } of desc.renames) {\n                    obj = obj.rename(from, to, options);\n                }\n            }\n\n            return obj;\n        }\n    },\n\n    messages: {\n        'object.and': '{{#label}} contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}',\n        'object.assert': '{{#label}} is invalid because {if(#subject.key, `\"` + #subject.key + `\" failed to ` + (#message || \"pass the assertion test\"), #message || \"the assertion failed\")}',\n        'object.base': '{{#label}} must be of type {{#type}}',\n        'object.instance': '{{#label}} must be an instance of {{:#type}}',\n        'object.length': '{{#label}} must have {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\n        'object.max': '{{#label}} must have less than or equal to {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\n        'object.min': '{{#label}} must have at least {{#limit}} key{if(#limit == 1, \"\", \"s\")}',\n        'object.missing': '{{#label}} must contain at least one of {{#peersWithLabels}}',\n        'object.nand': '{{:#mainWithLabel}} must not exist simultaneously with {{#peersWithLabels}}',\n        'object.oxor': '{{#label}} contains a conflict between optional exclusive peers {{#peersWithLabels}}',\n        'object.pattern.match': '{{#label}} keys failed to match pattern requirements',\n        'object.refType': '{{#label}} must be a Joi reference',\n        'object.regex': '{{#label}} must be a RegExp object',\n        'object.rename.multiple': '{{#label}} cannot rename {{:#from}} because multiple renames are disabled and another key was already renamed to {{:#to}}',\n        'object.rename.override': '{{#label}} cannot rename {{:#from}} because override is disabled and target {{:#to}} exists',\n        'object.schema': '{{#label}} must be a Joi schema of {{#type}} type',\n        'object.unknown': '{{#label}} is not allowed',\n        'object.with': '{{:#mainWithLabel}} missing required peer {{:#peerWithLabel}}',\n        'object.without': '{{:#mainWithLabel}} conflict with forbidden peer {{:#peerWithLabel}}',\n        'object.xor': '{{#label}} contains a conflict between exclusive peers {{#peersWithLabels}}'\n    }\n});\n\n\n// Helpers\n\ninternals.clone = function (value, prefs) {\n\n    // Object\n\n    if (typeof value === 'object') {\n        if (prefs.nonEnumerables) {\n            return Clone(value, { shallow: true });\n        }\n\n        const clone = Object.create(Object.getPrototypeOf(value));\n        Object.assign(clone, value);\n        return clone;\n    }\n\n    // Function\n\n    const clone = function (...args) {\n\n        return value.apply(this, args);\n    };\n\n    clone.prototype = Clone(value.prototype);\n    Object.defineProperty(clone, 'name', { value: value.name, writable: false });\n    Object.defineProperty(clone, 'length', { value: value.length, writable: false });\n    Object.assign(clone, value);\n    return clone;\n};\n\n\ninternals.dependency = function (schema, rel, key, peers, options) {\n\n    Assert(key === null || typeof key === 'string', rel, 'key must be a strings');\n\n    // Extract options from peers array\n\n    if (!options) {\n        options = peers.length > 1 && typeof peers[peers.length - 1] === 'object' ? peers.pop() : {};\n    }\n\n    Common.assertOptions(options, ['separator', 'isPresent']);\n\n    peers = [].concat(peers);\n\n    // Cast peer paths\n\n    const separator = Common.default(options.separator, '.');\n    const paths = [];\n    for (const peer of peers) {\n        Assert(typeof peer === 'string', rel, 'peers must be strings');\n        paths.push(Compile.ref(peer, { separator, ancestor: 0, prefix: false }));\n    }\n\n    // Cast key\n\n    if (key !== null) {\n        key = Compile.ref(key, { separator, ancestor: 0, prefix: false });\n    }\n\n    // Add rule\n\n    const obj = schema.clone();\n    obj.$_terms.dependencies = obj.$_terms.dependencies || [];\n    obj.$_terms.dependencies.push(new internals.Dependency(rel, key, paths, peers, options));\n    return obj;\n};\n\n\ninternals.dependencies = {\n\n    and(schema, dep, value, state, prefs) {\n\n        const missing = [];\n        const present = [];\n        const count = dep.peers.length;\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers) {\n            if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false })) === false) {\n                missing.push(peer.key);\n            }\n            else {\n                present.push(peer.key);\n            }\n        }\n\n        if (missing.length !== count &&\n            present.length !== count) {\n\n            return {\n                code: 'object.and',\n                context: {\n                    present,\n                    presentWithLabels: internals.keysToLabels(schema, present),\n                    missing,\n                    missingWithLabels: internals.keysToLabels(schema, missing)\n                }\n            };\n        }\n    },\n\n    nand(schema, dep, value, state, prefs) {\n\n        const present = [];\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers) {\n            if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false }))) {\n                present.push(peer.key);\n            }\n        }\n\n        if (present.length !== dep.peers.length) {\n            return;\n        }\n\n        const main = dep.paths[0];\n        const values = dep.paths.slice(1);\n        return {\n            code: 'object.nand',\n            context: {\n                main,\n                mainWithLabel: internals.keysToLabels(schema, main),\n                peers: values,\n                peersWithLabels: internals.keysToLabels(schema, values)\n            }\n        };\n    },\n\n    or(schema, dep, value, state, prefs) {\n\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers) {\n            if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false }))) {\n                return;\n            }\n        }\n\n        return {\n            code: 'object.missing',\n            context: {\n                peers: dep.paths,\n                peersWithLabels: internals.keysToLabels(schema, dep.paths)\n            }\n        };\n    },\n\n    oxor(schema, dep, value, state, prefs) {\n\n        const present = [];\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers) {\n            if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false }))) {\n                present.push(peer.key);\n            }\n        }\n\n        if (!present.length ||\n            present.length === 1) {\n\n            return;\n        }\n\n        const context = { peers: dep.paths, peersWithLabels: internals.keysToLabels(schema, dep.paths) };\n        context.present = present;\n        context.presentWithLabels = internals.keysToLabels(schema, present);\n        return { code: 'object.oxor', context };\n    },\n\n    with(schema, dep, value, state, prefs) {\n\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers) {\n            if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false })) === false) {\n                return {\n                    code: 'object.with',\n                    context: {\n                        main: dep.key.key,\n                        mainWithLabel: internals.keysToLabels(schema, dep.key.key),\n                        peer: peer.key,\n                        peerWithLabel: internals.keysToLabels(schema, peer.key)\n                    }\n                };\n            }\n        }\n    },\n\n    without(schema, dep, value, state, prefs) {\n\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers) {\n            if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false }))) {\n                return {\n                    code: 'object.without',\n                    context: {\n                        main: dep.key.key,\n                        mainWithLabel: internals.keysToLabels(schema, dep.key.key),\n                        peer: peer.key,\n                        peerWithLabel: internals.keysToLabels(schema, peer.key)\n                    }\n                };\n            }\n        }\n    },\n\n    xor(schema, dep, value, state, prefs) {\n\n        const present = [];\n        const isPresent = internals.isPresent(dep.options);\n        for (const peer of dep.peers) {\n            if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false }))) {\n                present.push(peer.key);\n            }\n        }\n\n        if (present.length === 1) {\n            return;\n        }\n\n        const context = { peers: dep.paths, peersWithLabels: internals.keysToLabels(schema, dep.paths) };\n        if (present.length === 0) {\n            return { code: 'object.missing', context };\n        }\n\n        context.present = present;\n        context.presentWithLabels = internals.keysToLabels(schema, present);\n        return { code: 'object.xor', context };\n    }\n};\n\n\ninternals.keysToLabels = function (schema, keys) {\n\n    if (Array.isArray(keys)) {\n        return keys.map((key) => schema.$_mapLabels(key));\n    }\n\n    return schema.$_mapLabels(keys);\n};\n\n\ninternals.isPresent = function (options) {\n\n    return typeof options.isPresent === 'function' ? options.isPresent : (resolved) => resolved !== undefined;\n};\n\n\ninternals.rename = function (schema, value, state, prefs, errors) {\n\n    const renamed = {};\n    for (const rename of schema.$_terms.renames) {\n        const matches = [];\n        const pattern = typeof rename.from !== 'string';\n\n        if (!pattern) {\n            if (Object.prototype.hasOwnProperty.call(value, rename.from) &&\n                (value[rename.from] !== undefined || !rename.options.ignoreUndefined)) {\n\n                matches.push(rename);\n            }\n        }\n        else {\n            for (const from in value) {\n                if (value[from] === undefined &&\n                    rename.options.ignoreUndefined) {\n\n                    continue;\n                }\n\n                if (from === rename.to) {\n                    continue;\n                }\n\n                const match = rename.from.exec(from);\n                if (!match) {\n                    continue;\n                }\n\n                matches.push({ from, to: rename.to, match });\n            }\n        }\n\n        for (const match of matches) {\n            const from = match.from;\n            let to = match.to;\n            if (to instanceof Template) {\n                to = to.render(value, state, prefs, match.match);\n            }\n\n            if (from === to) {\n                continue;\n            }\n\n            if (!rename.options.multiple &&\n                renamed[to]) {\n\n                errors.push(schema.$_createError('object.rename.multiple', value, { from, to, pattern }, state, prefs));\n                if (prefs.abortEarly) {\n                    return false;\n                }\n            }\n\n            if (Object.prototype.hasOwnProperty.call(value, to) &&\n                !rename.options.override &&\n                !renamed[to]) {\n\n                errors.push(schema.$_createError('object.rename.override', value, { from, to, pattern }, state, prefs));\n                if (prefs.abortEarly) {\n                    return false;\n                }\n            }\n\n            if (value[from] === undefined) {\n                delete value[to];\n            }\n            else {\n                value[to] = value[from];\n            }\n\n            renamed[to] = true;\n\n            if (!rename.options.alias) {\n                delete value[from];\n            }\n        }\n    }\n\n    return true;\n};\n\n\ninternals.unknown = function (schema, value, unprocessed, errors, state, prefs) {\n\n    if (schema.$_terms.patterns) {\n        let hasMatches = false;\n        const matches = schema.$_terms.patterns.map((pattern) => {\n\n            if (pattern.matches) {\n                hasMatches = true;\n                return [];\n            }\n        });\n\n        const ancestors = [value, ...state.ancestors];\n\n        for (const key of unprocessed) {\n            const item = value[key];\n            const path = [...state.path, key];\n\n            for (let i = 0; i < schema.$_terms.patterns.length; ++i) {\n                const pattern = schema.$_terms.patterns[i];\n                if (pattern.regex) {\n                    const match = pattern.regex.test(key);\n                    state.mainstay.tracer.debug(state, 'rule', `pattern.${i}`, match ? 'pass' : 'error');\n                    if (!match) {\n                        continue;\n                    }\n                }\n                else {\n                    if (!pattern.schema.$_match(key, state.nest(pattern.schema, `pattern.${i}`), prefs)) {\n                        continue;\n                    }\n                }\n\n                unprocessed.delete(key);\n\n                const localState = state.localize(path, ancestors, { schema: pattern.rule, key });\n                const result = pattern.rule.$_validate(item, localState, prefs);\n                if (result.errors) {\n                    if (prefs.abortEarly) {\n                        return { value, errors: result.errors };\n                    }\n\n                    errors.push(...result.errors);\n                }\n\n                if (pattern.matches) {\n                    matches[i].push(key);\n                }\n\n                value[key] = result.value;\n                if (!pattern.fallthrough) {\n                    break;\n                }\n            }\n        }\n\n        // Validate pattern matches rules\n\n        if (hasMatches) {\n            for (let i = 0; i < matches.length; ++i) {\n                const match = matches[i];\n                if (!match) {\n                    continue;\n                }\n\n                const stpm = schema.$_terms.patterns[i].matches;\n                const localState = state.localize(state.path, ancestors, stpm);\n                const result = stpm.$_validate(match, localState, prefs);\n                if (result.errors) {\n                    const details = Errors.details(result.errors, { override: false });\n                    details.matches = match;\n                    const report = schema.$_createError('object.pattern.match', value, details, state, prefs);\n                    if (prefs.abortEarly) {\n                        return { value, errors: report };\n                    }\n\n                    errors.push(report);\n                }\n            }\n        }\n    }\n\n    if (!unprocessed.size ||\n        !schema.$_terms.keys && !schema.$_terms.patterns) {     // If no keys or patterns specified, unknown keys allowed\n\n        return;\n    }\n\n    if (prefs.stripUnknown && typeof schema._flags.unknown === 'undefined' ||\n        prefs.skipFunctions) {\n\n        const stripUnknown = prefs.stripUnknown ? (prefs.stripUnknown === true ? true : !!prefs.stripUnknown.objects) : false;\n\n        for (const key of unprocessed) {\n            if (stripUnknown) {\n                delete value[key];\n                unprocessed.delete(key);\n            }\n            else if (typeof value[key] === 'function') {\n                unprocessed.delete(key);\n            }\n        }\n    }\n\n    const forbidUnknown = !Common.default(schema._flags.unknown, prefs.allowUnknown);\n    if (forbidUnknown) {\n        for (const unprocessedKey of unprocessed) {\n            const localState = state.localize([...state.path, unprocessedKey], []);\n            const report = schema.$_createError('object.unknown', value[unprocessedKey], { child: unprocessedKey }, localState, prefs, { flags: false });\n            if (prefs.abortEarly) {\n                return { value, errors: report };\n            }\n\n            errors.push(report);\n        }\n    }\n};\n\n\ninternals.Dependency = class {\n\n    constructor(rel, key, peers, paths, options) {\n\n        this.rel = rel;\n        this.key = key;\n        this.peers = peers;\n        this.paths = paths;\n        this.options = options;\n    }\n\n    describe() {\n\n        const desc = {\n            rel: this.rel,\n            peers: this.paths\n        };\n\n        if (this.key !== null) {\n            desc.key = this.key.key;\n        }\n\n        if (this.peers[0].separator !== '.') {\n            desc.options = { ...desc.options, separator: this.peers[0].separator };\n        }\n\n        if (this.options.isPresent) {\n            desc.options = { ...desc.options, isPresent: this.options.isPresent };\n        }\n\n        return desc;\n    }\n};\n\n\ninternals.Keys = class extends Array {\n\n    concat(source) {\n\n        const result = this.slice();\n\n        const keys = new Map();\n        for (let i = 0; i < result.length; ++i) {\n            keys.set(result[i].key, i);\n        }\n\n        for (const item of source) {\n            const key = item.key;\n            const pos = keys.get(key);\n            if (pos !== undefined) {\n                result[pos] = { key, schema: result[pos].schema.concat(item.schema) };\n            }\n            else {\n                result.push(item);\n            }\n        }\n\n        return result;\n    }\n};\n","'use strict';\n\nconst Types = require('./types');\n\n\nconst internals = {\n    mismatched: null\n};\n\n\nmodule.exports = function (obj, ref, options) {\n\n    options = Object.assign({ prototype: true }, options);\n\n    return !!internals.isDeepEqual(obj, ref, options, []);\n};\n\n\ninternals.isDeepEqual = function (obj, ref, options, seen) {\n\n    if (obj === ref) {                                                      // Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql\n        return obj !== 0 || 1 / obj === 1 / ref;\n    }\n\n    const type = typeof obj;\n\n    if (type !== typeof ref) {\n        return false;\n    }\n\n    if (obj === null ||\n        ref === null) {\n\n        return false;\n    }\n\n    if (type === 'function') {\n        if (!options.deepFunction ||\n            obj.toString() !== ref.toString()) {\n\n            return false;\n        }\n\n        // Continue as object\n    }\n    else if (type !== 'object') {\n        return obj !== obj && ref !== ref;                                  // NaN\n    }\n\n    const instanceType = internals.getSharedType(obj, ref, !!options.prototype);\n    switch (instanceType) {\n        case Types.buffer:\n            return Buffer && Buffer.prototype.equals.call(obj, ref);        // $lab:coverage:ignore$\n        case Types.promise:\n            return obj === ref;\n        case Types.regex:\n            return obj.toString() === ref.toString();\n        case internals.mismatched:\n            return false;\n    }\n\n    for (let i = seen.length - 1; i >= 0; --i) {\n        if (seen[i].isSame(obj, ref)) {\n            return true;                                                    // If previous comparison failed, it would have stopped execution\n        }\n    }\n\n    seen.push(new internals.SeenEntry(obj, ref));\n\n    try {\n        return !!internals.isDeepEqualObj(instanceType, obj, ref, options, seen);\n    }\n    finally {\n        seen.pop();\n    }\n};\n\n\ninternals.getSharedType = function (obj, ref, checkPrototype) {\n\n    if (checkPrototype) {\n        if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {\n            return internals.mismatched;\n        }\n\n        return Types.getInternalProto(obj);\n    }\n\n    const type = Types.getInternalProto(obj);\n    if (type !== Types.getInternalProto(ref)) {\n        return internals.mismatched;\n    }\n\n    return type;\n};\n\n\ninternals.valueOf = function (obj) {\n\n    const objValueOf = obj.valueOf;\n    if (objValueOf === undefined) {\n        return obj;\n    }\n\n    try {\n        return objValueOf.call(obj);\n    }\n    catch (err) {\n        return err;\n    }\n};\n\n\ninternals.hasOwnEnumerableProperty = function (obj, key) {\n\n    return Object.prototype.propertyIsEnumerable.call(obj, key);\n};\n\n\ninternals.isSetSimpleEqual = function (obj, ref) {\n\n    for (const entry of Set.prototype.values.call(obj)) {\n        if (!Set.prototype.has.call(ref, entry)) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n\ninternals.isDeepEqualObj = function (instanceType, obj, ref, options, seen) {\n\n    const { isDeepEqual, valueOf, hasOwnEnumerableProperty } = internals;\n    const { keys, getOwnPropertySymbols } = Object;\n\n    if (instanceType === Types.array) {\n        if (options.part) {\n\n            // Check if any index match any other index\n\n            for (const objValue of obj) {\n                for (const refValue of ref) {\n                    if (isDeepEqual(objValue, refValue, options, seen)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        else {\n            if (obj.length !== ref.length) {\n                return false;\n            }\n\n            for (let i = 0; i < obj.length; ++i) {\n                if (!isDeepEqual(obj[i], ref[i], options, seen)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n    else if (instanceType === Types.set) {\n        if (obj.size !== ref.size) {\n            return false;\n        }\n\n        if (!internals.isSetSimpleEqual(obj, ref)) {\n\n            // Check for deep equality\n\n            const ref2 = new Set(Set.prototype.values.call(ref));\n            for (const objEntry of Set.prototype.values.call(obj)) {\n                if (ref2.delete(objEntry)) {\n                    continue;\n                }\n\n                let found = false;\n                for (const refEntry of ref2) {\n                    if (isDeepEqual(objEntry, refEntry, options, seen)) {\n                        ref2.delete(refEntry);\n                        found = true;\n                        break;\n                    }\n                }\n\n                if (!found) {\n                    return false;\n                }\n            }\n        }\n    }\n    else if (instanceType === Types.map) {\n        if (obj.size !== ref.size) {\n            return false;\n        }\n\n        for (const [key, value] of Map.prototype.entries.call(obj)) {\n            if (value === undefined && !Map.prototype.has.call(ref, key)) {\n                return false;\n            }\n\n            if (!isDeepEqual(value, Map.prototype.get.call(ref, key), options, seen)) {\n                return false;\n            }\n        }\n    }\n    else if (instanceType === Types.error) {\n\n        // Always check name and message\n\n        if (obj.name !== ref.name ||\n            obj.message !== ref.message) {\n\n            return false;\n        }\n    }\n\n    // Check .valueOf()\n\n    const valueOfObj = valueOf(obj);\n    const valueOfRef = valueOf(ref);\n    if ((obj !== valueOfObj || ref !== valueOfRef) &&\n        !isDeepEqual(valueOfObj, valueOfRef, options, seen)) {\n\n        return false;\n    }\n\n    // Check properties\n\n    const objKeys = keys(obj);\n    if (!options.part &&\n        objKeys.length !== keys(ref).length &&\n        !options.skip) {\n\n        return false;\n    }\n\n    let skipped = 0;\n    for (const key of objKeys) {\n        if (options.skip &&\n            options.skip.includes(key)) {\n\n            if (ref[key] === undefined) {\n                ++skipped;\n            }\n\n            continue;\n        }\n\n        if (!hasOwnEnumerableProperty(ref, key)) {\n            return false;\n        }\n\n        if (!isDeepEqual(obj[key], ref[key], options, seen)) {\n            return false;\n        }\n    }\n\n    if (!options.part &&\n        objKeys.length - skipped !== keys(ref).length) {\n\n        return false;\n    }\n\n    // Check symbols\n\n    if (options.symbols !== false) {                                // Defaults to true\n        const objSymbols = getOwnPropertySymbols(obj);\n        const refSymbols = new Set(getOwnPropertySymbols(ref));\n\n        for (const key of objSymbols) {\n            if (!options.skip ||\n                !options.skip.includes(key)) {\n\n                if (hasOwnEnumerableProperty(obj, key)) {\n                    if (!hasOwnEnumerableProperty(ref, key)) {\n                        return false;\n                    }\n\n                    if (!isDeepEqual(obj[key], ref[key], options, seen)) {\n                        return false;\n                    }\n                }\n                else if (hasOwnEnumerableProperty(ref, key)) {\n                    return false;\n                }\n            }\n\n            refSymbols.delete(key);\n        }\n\n        for (const key of refSymbols) {\n            if (hasOwnEnumerableProperty(ref, key)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\n\ninternals.SeenEntry = class {\n\n    constructor(obj, ref) {\n\n        this.obj = obj;\n        this.ref = ref;\n    }\n\n    isSame(obj, ref) {\n\n        return this.obj === obj && this.ref === ref;\n    }\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Any = require('./any');\nconst Common = require('../common');\nconst Compile = require('../compile');\nconst Errors = require('../errors');\n\n\nconst internals = {};\n\n\nmodule.exports = Any.extend({\n\n    type: 'link',\n\n    properties: {\n        schemaChain: true\n    },\n\n    terms: {\n\n        link: { init: null, manifest: 'single', register: false }\n    },\n\n    args(schema, ref) {\n\n        return schema.ref(ref);\n    },\n\n    validate(value, { schema, state, prefs }) {\n\n        Assert(schema.$_terms.link, 'Uninitialized link schema');\n\n        const linked = internals.generate(schema, value, state, prefs);\n        const ref = schema.$_terms.link[0].ref;\n        return linked.$_validate(value, state.nest(linked, `link:${ref.display}:${linked.type}`), prefs);\n    },\n\n    generate(schema, value, state, prefs) {\n\n        return internals.generate(schema, value, state, prefs);\n    },\n\n    rules: {\n\n        ref: {\n            method(ref) {\n\n                Assert(!this.$_terms.link, 'Cannot reinitialize schema');\n\n                ref = Compile.ref(ref);\n\n                Assert(ref.type === 'value' || ref.type === 'local', 'Invalid reference type:', ref.type);\n                Assert(ref.type === 'local' || ref.ancestor === 'root' || ref.ancestor > 0, 'Link cannot reference itself');\n\n                const obj = this.clone();\n                obj.$_terms.link = [{ ref }];\n                return obj;\n            }\n        },\n\n        relative: {\n            method(enabled = true) {\n\n                return this.$_setFlag('relative', enabled);\n            }\n        }\n    },\n\n    overrides: {\n\n        concat(source) {\n\n            Assert(this.$_terms.link, 'Uninitialized link schema');\n            Assert(Common.isSchema(source), 'Invalid schema object');\n            Assert(source.type !== 'link', 'Cannot merge type link with another link');\n\n            const obj = this.clone();\n\n            if (!obj.$_terms.whens) {\n                obj.$_terms.whens = [];\n            }\n\n            obj.$_terms.whens.push({ concat: source });\n            return obj.$_mutateRebuild();\n        }\n    },\n\n    manifest: {\n\n        build(obj, desc) {\n\n            Assert(desc.link, 'Invalid link description missing link');\n            return obj.ref(desc.link);\n        }\n    }\n});\n\n\n// Helpers\n\ninternals.generate = function (schema, value, state, prefs) {\n\n    let linked = state.mainstay.links.get(schema);\n    if (linked) {\n        return linked._generate(value, state, prefs).schema;\n    }\n\n    const ref = schema.$_terms.link[0].ref;\n    const { perspective, path } = internals.perspective(ref, state);\n    internals.assert(perspective, 'which is outside of schema boundaries', ref, schema, state, prefs);\n\n    try {\n        linked = path.length ? perspective.$_reach(path) : perspective;\n    }\n    catch (ignoreErr) {\n        internals.assert(false, 'to non-existing schema', ref, schema, state, prefs);\n    }\n\n    internals.assert(linked.type !== 'link', 'which is another link', ref, schema, state, prefs);\n\n    if (!schema._flags.relative) {\n        state.mainstay.links.set(schema, linked);\n    }\n\n    return linked._generate(value, state, prefs).schema;\n};\n\n\ninternals.perspective = function (ref, state) {\n\n    if (ref.type === 'local') {\n        for (const { schema, key } of state.schemas) {                              // From parent to root\n            const id = schema._flags.id || key;\n            if (id === ref.path[0]) {\n                return { perspective: schema, path: ref.path.slice(1) };\n            }\n\n            if (schema.$_terms.shared) {\n                for (const shared of schema.$_terms.shared) {\n                    if (shared._flags.id === ref.path[0]) {\n                        return { perspective: shared, path: ref.path.slice(1) };\n                    }\n                }\n            }\n        }\n\n        return { perspective: null, path: null };\n    }\n\n    if (ref.ancestor === 'root') {\n        return { perspective: state.schemas[state.schemas.length - 1].schema, path: ref.path };\n    }\n\n    return { perspective: state.schemas[ref.ancestor] && state.schemas[ref.ancestor].schema, path: ref.path };\n};\n\n\ninternals.assert = function (condition, message, ref, schema, state, prefs) {\n\n    if (condition) {                // Manual check to avoid generating error message on success\n        return;\n    }\n\n    Assert(false, `\"${Errors.label(schema._flags, state, prefs)}\" contains link reference \"${ref.display}\" ${message}`);\n};\n","'use strict';\n\nconst internals = {};\n\n\nexports.location = function (depth = 0) {\n\n    const orig = Error.prepareStackTrace;\n    Error.prepareStackTrace = (ignore, stack) => stack;\n\n    const capture = {};\n    Error.captureStackTrace(capture, this);\n    const line = capture.stack[depth + 1];\n\n    Error.prepareStackTrace = orig;\n\n    return {\n        filename: line.getFileName(),\n        line: line.getLineNumber()\n    };\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Any = require('./any');\nconst Common = require('../common');\nconst Values = require('../values');\n\n\nconst internals = {};\n\n\ninternals.isBool = function (value) {\n\n    return typeof value === 'boolean';\n};\n\n\nmodule.exports = Any.extend({\n\n    type: 'boolean',\n\n    flags: {\n\n        sensitive: { default: false }\n    },\n\n    terms: {\n\n        falsy: {\n            init: null,\n            manifest: 'values'\n        },\n\n        truthy: {\n            init: null,\n            manifest: 'values'\n        }\n    },\n\n    coerce(value, { schema }) {\n\n        if (typeof value === 'boolean') {\n            return;\n        }\n\n        if (typeof value === 'string') {\n            const normalized = schema._flags.sensitive ? value : value.toLowerCase();\n            value = normalized === 'true' ? true : (normalized === 'false' ? false : value);\n        }\n\n        if (typeof value !== 'boolean') {\n            value = schema.$_terms.truthy && schema.$_terms.truthy.has(value, null, null, !schema._flags.sensitive) ||\n                (schema.$_terms.falsy && schema.$_terms.falsy.has(value, null, null, !schema._flags.sensitive) ? false : value);\n        }\n\n        return { value };\n    },\n\n    validate(value, { error }) {\n\n        if (typeof value !== 'boolean') {\n            return { value, errors: error('boolean.base') };\n        }\n    },\n\n    rules: {\n        truthy: {\n            method(...values) {\n\n                Common.verifyFlat(values, 'truthy');\n\n                const obj = this.clone();\n                obj.$_terms.truthy = obj.$_terms.truthy || new Values();\n\n                for (let i = 0; i < values.length; ++i) {\n                    const value = values[i];\n\n                    Assert(value !== undefined, 'Cannot call truthy with undefined');\n                    obj.$_terms.truthy.add(value);\n                }\n\n                return obj;\n            }\n        },\n\n        falsy: {\n            method(...values) {\n\n                Common.verifyFlat(values, 'falsy');\n\n                const obj = this.clone();\n                obj.$_terms.falsy = obj.$_terms.falsy || new Values();\n\n                for (let i = 0; i < values.length; ++i) {\n                    const value = values[i];\n\n                    Assert(value !== undefined, 'Cannot call falsy with undefined');\n                    obj.$_terms.falsy.add(value);\n                }\n\n                return obj;\n            }\n        },\n\n        sensitive: {\n            method(enabled = true) {\n\n                return this.$_setFlag('sensitive', enabled);\n            }\n        }\n    },\n\n    cast: {\n        number: {\n            from: internals.isBool,\n            to(value, helpers) {\n\n                return value ? 1 : 0;\n            }\n        },\n        string: {\n            from: internals.isBool,\n            to(value, helpers) {\n\n                return value ? 'true' : 'false';\n            }\n        }\n    },\n\n    manifest: {\n\n        build(obj, desc) {\n\n            if (desc.truthy) {\n                obj = obj.truthy(...desc.truthy);\n            }\n\n            if (desc.falsy) {\n                obj = obj.falsy(...desc.falsy);\n            }\n\n            return obj;\n        }\n    },\n\n    messages: {\n        'boolean.base': '{{#label}} must be a boolean'\n    }\n});\n","'use strict';\n\nconst internals = {};\n\n\nexports.keys = function (obj, options = {}) {\n\n    return options.symbols !== false ? Reflect.ownKeys(obj) : Object.getOwnPropertyNames(obj);  // Defaults to true\n};\n","'use strict';\n\nconst Joi = require('./index');\n\n\nconst internals = {};\n\n\n// Preferences\n\ninternals.wrap = Joi.string()\n    .min(1)\n    .max(2)\n    .allow(false);\n\n\nexports.preferences = Joi.object({\n    allowUnknown: Joi.boolean(),\n    abortEarly: Joi.boolean(),\n    artifacts: Joi.boolean(),\n    cache: Joi.boolean(),\n    context: Joi.object(),\n    convert: Joi.boolean(),\n    dateFormat: Joi.valid('date', 'iso', 'string', 'time', 'utc'),\n    debug: Joi.boolean(),\n    errors: {\n        escapeHtml: Joi.boolean(),\n        label: Joi.valid('path', 'key', false),\n        language: [\n            Joi.string(),\n            Joi.object().ref()\n        ],\n        render: Joi.boolean(),\n        stack: Joi.boolean(),\n        wrap: {\n            label: internals.wrap,\n            array: internals.wrap,\n            string: internals.wrap\n        }\n    },\n    externals: Joi.boolean(),\n    messages: Joi.object(),\n    noDefaults: Joi.boolean(),\n    nonEnumerables: Joi.boolean(),\n    presence: Joi.valid('required', 'optional', 'forbidden'),\n    skipFunctions: Joi.boolean(),\n    stripUnknown: Joi.object({\n        arrays: Joi.boolean(),\n        objects: Joi.boolean()\n    })\n        .or('arrays', 'objects')\n        .allow(true, false),\n    warnings: Joi.boolean()\n})\n    .strict();\n\n\n// Extensions\n\ninternals.nameRx = /^[a-zA-Z0-9]\\w*$/;\n\n\ninternals.rule = Joi.object({\n    alias: Joi.array().items(Joi.string().pattern(internals.nameRx)).single(),\n    args: Joi.array().items(\n        Joi.string(),\n        Joi.object({\n            name: Joi.string().pattern(internals.nameRx).required(),\n            ref: Joi.boolean(),\n            assert: Joi.alternatives([\n                Joi.function(),\n                Joi.object().schema()\n            ])\n                .conditional('ref', { is: true, then: Joi.required() }),\n            normalize: Joi.function(),\n            message: Joi.string().when('assert', { is: Joi.function(), then: Joi.required() })\n        })\n    ),\n    convert: Joi.boolean(),\n    manifest: Joi.boolean(),\n    method: Joi.function().allow(false),\n    multi: Joi.boolean(),\n    validate: Joi.function()\n});\n\n\nexports.extension = Joi.object({\n    type: Joi.alternatives([\n        Joi.string(),\n        Joi.object().regex()\n    ])\n        .required(),\n    args: Joi.function(),\n    cast: Joi.object().pattern(internals.nameRx, Joi.object({\n        from: Joi.function().maxArity(1).required(),\n        to: Joi.function().minArity(1).maxArity(2).required()\n    })),\n    base: Joi.object().schema()\n        .when('type', { is: Joi.object().regex(), then: Joi.forbidden() }),\n    coerce: [\n        Joi.function().maxArity(3),\n        Joi.object({ method: Joi.function().maxArity(3).required(), from: Joi.array().items(Joi.string()).single() })\n    ],\n    flags: Joi.object().pattern(internals.nameRx, Joi.object({\n        setter: Joi.string(),\n        default: Joi.any()\n    })),\n    manifest: {\n        build: Joi.function().arity(2)\n    },\n    messages: [Joi.object(), Joi.string()],\n    modifiers: Joi.object().pattern(internals.nameRx, Joi.function().minArity(1).maxArity(2)),\n    overrides: Joi.object().pattern(internals.nameRx, Joi.function()),\n    prepare: Joi.function().maxArity(3),\n    rebuild: Joi.function().arity(1),\n    rules: Joi.object().pattern(internals.nameRx, internals.rule),\n    terms: Joi.object().pattern(internals.nameRx, Joi.object({\n        init: Joi.array().allow(null).required(),\n        manifest: Joi.object().pattern(/.+/, [\n            Joi.valid('schema', 'single'),\n            Joi.object({\n                mapped: Joi.object({\n                    from: Joi.string().required(),\n                    to: Joi.string().required()\n                })\n                    .required()\n            })\n        ])\n    })),\n    validate: Joi.function().maxArity(3)\n})\n    .strict();\n\n\nexports.extensions = Joi.array().items(Joi.object(), Joi.function().arity(1)).strict();\n\n\n// Manifest\n\ninternals.desc = {\n\n    buffer: Joi.object({\n        buffer: Joi.string()\n    }),\n\n    func: Joi.object({\n        function: Joi.function().required(),\n        options: {\n            literal: true\n        }\n    }),\n\n    override: Joi.object({\n        override: true\n    }),\n\n    ref: Joi.object({\n        ref: Joi.object({\n            type: Joi.valid('value', 'global', 'local'),\n            path: Joi.array().required(),\n            separator: Joi.string().length(1).allow(false),\n            ancestor: Joi.number().min(0).integer().allow('root'),\n            map: Joi.array().items(Joi.array().length(2)).min(1),\n            adjust: Joi.function(),\n            iterables: Joi.boolean(),\n            in: Joi.boolean(),\n            render: Joi.boolean()\n        })\n            .required()\n    }),\n\n    regex: Joi.object({\n        regex: Joi.string().min(3)\n    }),\n\n    special: Joi.object({\n        special: Joi.valid('deep').required()\n    }),\n\n    template: Joi.object({\n        template: Joi.string().required(),\n        options: Joi.object()\n    }),\n\n    value: Joi.object({\n        value: Joi.alternatives([Joi.object(), Joi.array()]).required()\n    })\n};\n\n\ninternals.desc.entity = Joi.alternatives([\n    Joi.array().items(Joi.link('...')),\n    Joi.boolean(),\n    Joi.function(),\n    Joi.number(),\n    Joi.string(),\n    internals.desc.buffer,\n    internals.desc.func,\n    internals.desc.ref,\n    internals.desc.regex,\n    internals.desc.special,\n    internals.desc.template,\n    internals.desc.value,\n    Joi.link('/')\n]);\n\n\ninternals.desc.values = Joi.array()\n    .items(\n        null,\n        Joi.boolean(),\n        Joi.function(),\n        Joi.number().allow(Infinity, -Infinity),\n        Joi.string().allow(''),\n        Joi.symbol(),\n        internals.desc.buffer,\n        internals.desc.func,\n        internals.desc.override,\n        internals.desc.ref,\n        internals.desc.regex,\n        internals.desc.template,\n        internals.desc.value\n    );\n\n\ninternals.desc.messages = Joi.object()\n    .pattern(/.+/, [\n        Joi.string(),\n        internals.desc.template,\n        Joi.object().pattern(/.+/, [Joi.string(), internals.desc.template])\n    ]);\n\n\nexports.description = Joi.object({\n    type: Joi.string().required(),\n    flags: Joi.object({\n        cast: Joi.string(),\n        default: Joi.any(),\n        description: Joi.string(),\n        empty: Joi.link('/'),\n        failover: internals.desc.entity,\n        id: Joi.string(),\n        label: Joi.string(),\n        only: true,\n        presence: ['optional', 'required', 'forbidden'],\n        result: ['raw', 'strip'],\n        strip: Joi.boolean(),\n        unit: Joi.string()\n    })\n        .unknown(),\n    preferences: {\n        allowUnknown: Joi.boolean(),\n        abortEarly: Joi.boolean(),\n        artifacts: Joi.boolean(),\n        cache: Joi.boolean(),\n        convert: Joi.boolean(),\n        dateFormat: ['date', 'iso', 'string', 'time', 'utc'],\n        errors: {\n            escapeHtml: Joi.boolean(),\n            label: ['path', 'key'],\n            language: [\n                Joi.string(),\n                internals.desc.ref\n            ],\n            wrap: {\n                label: internals.wrap,\n                array: internals.wrap\n            }\n        },\n        externals: Joi.boolean(),\n        messages: internals.desc.messages,\n        noDefaults: Joi.boolean(),\n        nonEnumerables: Joi.boolean(),\n        presence: ['required', 'optional', 'forbidden'],\n        skipFunctions: Joi.boolean(),\n        stripUnknown: Joi.object({\n            arrays: Joi.boolean(),\n            objects: Joi.boolean()\n        })\n            .or('arrays', 'objects')\n            .allow(true, false),\n        warnings: Joi.boolean()\n    },\n    allow: internals.desc.values,\n    invalid: internals.desc.values,\n    rules: Joi.array().min(1).items({\n        name: Joi.string().required(),\n        args: Joi.object().min(1),\n        keep: Joi.boolean(),\n        message: [\n            Joi.string(),\n            internals.desc.messages\n        ],\n        warn: Joi.boolean()\n    }),\n\n    // Terms\n\n    keys: Joi.object().pattern(/.*/, Joi.link('/')),\n    link: internals.desc.ref\n})\n    .pattern(/^[a-z]\\w*$/, Joi.any());\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\n\nconst internals = {};\n\n\nexports.Sorter = class {\n\n    constructor() {\n\n        this._items = [];\n        this.nodes = [];\n    }\n\n    add(nodes, options) {\n\n        options = options || {};\n\n        // Validate rules\n\n        const before = [].concat(options.before || []);\n        const after = [].concat(options.after || []);\n        const group = options.group || '?';\n        const sort = options.sort || 0;                   // Used for merging only\n\n        Assert(!before.includes(group), `Item cannot come before itself: ${group}`);\n        Assert(!before.includes('?'), 'Item cannot come before unassociated items');\n        Assert(!after.includes(group), `Item cannot come after itself: ${group}`);\n        Assert(!after.includes('?'), 'Item cannot come after unassociated items');\n\n        if (!Array.isArray(nodes)) {\n            nodes = [nodes];\n        }\n\n        for (const node of nodes) {\n            const item = {\n                seq: this._items.length,\n                sort,\n                before,\n                after,\n                group,\n                node\n            };\n\n            this._items.push(item);\n        }\n\n        // Insert event\n\n        if (!options.manual) {\n            const valid = this._sort();\n            Assert(valid, 'item', group !== '?' ? `added into group ${group}` : '', 'created a dependencies error');\n        }\n\n        return this.nodes;\n    }\n\n    merge(others) {\n\n        if (!Array.isArray(others)) {\n            others = [others];\n        }\n\n        for (const other of others) {\n            if (other) {\n                for (const item of other._items) {\n                    this._items.push(Object.assign({}, item));      // Shallow cloned\n                }\n            }\n        }\n\n        // Sort items\n\n        this._items.sort(internals.mergeSort);\n        for (let i = 0; i < this._items.length; ++i) {\n            this._items[i].seq = i;\n        }\n\n        const valid = this._sort();\n        Assert(valid, 'merge created a dependencies error');\n\n        return this.nodes;\n    }\n\n    sort() {\n\n        const valid = this._sort();\n        Assert(valid, 'sort created a dependencies error');\n\n        return this.nodes;\n    }\n\n    _sort() {\n\n        // Construct graph\n\n        const graph = {};\n        const graphAfters = Object.create(null);            // A prototype can bungle lookups w/ false positives\n        const groups = Object.create(null);\n\n        for (const item of this._items) {\n            const seq = item.seq;                           // Unique across all items\n            const group = item.group;\n\n            // Determine Groups\n\n            groups[group] = groups[group] || [];\n            groups[group].push(seq);\n\n            // Build intermediary graph using 'before'\n\n            graph[seq] = item.before;\n\n            // Build second intermediary graph with 'after'\n\n            for (const after of item.after) {\n                graphAfters[after] = graphAfters[after] || [];\n                graphAfters[after].push(seq);\n            }\n        }\n\n        // Expand intermediary graph\n\n        for (const node in graph) {\n            const expandedGroups = [];\n\n            for (const graphNodeItem in graph[node]) {\n                const group = graph[node][graphNodeItem];\n                groups[group] = groups[group] || [];\n                expandedGroups.push(...groups[group]);\n            }\n\n            graph[node] = expandedGroups;\n        }\n\n        // Merge intermediary graph using graphAfters into final graph\n\n        for (const group in graphAfters) {\n            if (groups[group]) {\n                for (const node of groups[group]) {\n                    graph[node].push(...graphAfters[group]);\n                }\n            }\n        }\n\n        // Compile ancestors\n\n        const ancestors = {};\n        for (const node in graph) {\n            const children = graph[node];\n            for (const child of children) {\n                ancestors[child] = ancestors[child] || [];\n                ancestors[child].push(node);\n            }\n        }\n\n        // Topo sort\n\n        const visited = {};\n        const sorted = [];\n\n        for (let i = 0; i < this._items.length; ++i) {          // Looping through item.seq values out of order\n            let next = i;\n\n            if (ancestors[i]) {\n                next = null;\n                for (let j = 0; j < this._items.length; ++j) {  // As above, these are item.seq values\n                    if (visited[j] === true) {\n                        continue;\n                    }\n\n                    if (!ancestors[j]) {\n                        ancestors[j] = [];\n                    }\n\n                    const shouldSeeCount = ancestors[j].length;\n                    let seenCount = 0;\n                    for (let k = 0; k < shouldSeeCount; ++k) {\n                        if (visited[ancestors[j][k]]) {\n                            ++seenCount;\n                        }\n                    }\n\n                    if (seenCount === shouldSeeCount) {\n                        next = j;\n                        break;\n                    }\n                }\n            }\n\n            if (next !== null) {\n                visited[next] = true;\n                sorted.push(next);\n            }\n        }\n\n        if (sorted.length !== this._items.length) {\n            return false;\n        }\n\n        const seqIndex = {};\n        for (const item of this._items) {\n            seqIndex[item.seq] = item;\n        }\n\n        this._items = [];\n        this.nodes = [];\n\n        for (const value of sorted) {\n            const sortedItem = seqIndex[value];\n            this.nodes.push(sortedItem.node);\n            this._items.push(sortedItem);\n        }\n\n        return true;\n    }\n};\n\n\ninternals.mergeSort = (a, b) => {\n\n    return a.sort === b.sort ? 0 : (a.sort < b.sort ? -1 : 1);\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst Clone = require('@hapi/hoek/lib/clone');\n\nconst Cache = require('./cache');\nconst Common = require('./common');\nconst Compile = require('./compile');\nconst Errors = require('./errors');\nconst Extend = require('./extend');\nconst Manifest = require('./manifest');\nconst Ref = require('./ref');\nconst Template = require('./template');\nconst Trace = require('./trace');\n\nlet Schemas;\n\n\nconst internals = {\n    types: {\n        alternatives: require('./types/alternatives'),\n        any: require('./types/any'),\n        array: require('./types/array'),\n        boolean: require('./types/boolean'),\n        date: require('./types/date'),\n        function: require('./types/function'),\n        link: require('./types/link'),\n        number: require('./types/number'),\n        object: require('./types/object'),\n        string: require('./types/string'),\n        symbol: require('./types/symbol')\n    },\n    aliases: {\n        alt: 'alternatives',\n        bool: 'boolean',\n        func: 'function'\n    }\n};\n\n\nif (Buffer) {                                                           // $lab:coverage:ignore$\n    internals.types.binary = require('./types/binary');\n}\n\n\ninternals.root = function () {\n\n    const root = {\n        _types: new Set(Object.keys(internals.types))\n    };\n\n    // Types\n\n    for (const type of root._types) {\n        root[type] = function (...args) {\n\n            Assert(!args.length || ['alternatives', 'link', 'object'].includes(type), 'The', type, 'type does not allow arguments');\n            return internals.generate(this, internals.types[type], args);\n        };\n    }\n\n    // Shortcuts\n\n    for (const method of ['allow', 'custom', 'disallow', 'equal', 'exist', 'forbidden', 'invalid', 'not', 'only', 'optional', 'options', 'prefs', 'preferences', 'required', 'strip', 'valid', 'when']) {\n        root[method] = function (...args) {\n\n            return this.any()[method](...args);\n        };\n    }\n\n    // Methods\n\n    Object.assign(root, internals.methods);\n\n    // Aliases\n\n    for (const alias in internals.aliases) {\n        const target = internals.aliases[alias];\n        root[alias] = root[target];\n    }\n\n    root.x = root.expression;\n\n    // Trace\n\n    if (Trace.setup) {                                          // $lab:coverage:ignore$\n        Trace.setup(root);\n    }\n\n    return root;\n};\n\n\ninternals.methods = {\n\n    ValidationError: Errors.ValidationError,\n    version: Common.version,\n    cache: Cache.provider,\n\n    assert(value, schema, ...args /* [message], [options] */) {\n\n        internals.assert(value, schema, true, args);\n    },\n\n    attempt(value, schema, ...args /* [message], [options] */) {\n\n        return internals.assert(value, schema, false, args);\n    },\n\n    build(desc) {\n\n        Assert(typeof Manifest.build === 'function', 'Manifest functionality disabled');\n        return Manifest.build(this, desc);\n    },\n\n    checkPreferences(prefs) {\n\n        Common.checkPreferences(prefs);\n    },\n\n    compile(schema, options) {\n\n        return Compile.compile(this, schema, options);\n    },\n\n    defaults(modifier) {\n\n        Assert(typeof modifier === 'function', 'modifier must be a function');\n\n        const joi = Object.assign({}, this);\n        for (const type of joi._types) {\n            const schema = modifier(joi[type]());\n            Assert(Common.isSchema(schema), 'modifier must return a valid schema object');\n\n            joi[type] = function (...args) {\n\n                return internals.generate(this, schema, args);\n            };\n        }\n\n        return joi;\n    },\n\n    expression(...args) {\n\n        return new Template(...args);\n    },\n\n    extend(...extensions) {\n\n        Common.verifyFlat(extensions, 'extend');\n\n        Schemas = Schemas || require('./schemas');\n\n        Assert(extensions.length, 'You need to provide at least one extension');\n        this.assert(extensions, Schemas.extensions);\n\n        const joi = Object.assign({}, this);\n        joi._types = new Set(joi._types);\n\n        for (let extension of extensions) {\n            if (typeof extension === 'function') {\n                extension = extension(joi);\n            }\n\n            this.assert(extension, Schemas.extension);\n\n            const expanded = internals.expandExtension(extension, joi);\n            for (const item of expanded) {\n                Assert(joi[item.type] === undefined || joi._types.has(item.type), 'Cannot override name', item.type);\n\n                const base = item.base || this.any();\n                const schema = Extend.type(base, item);\n\n                joi._types.add(item.type);\n                joi[item.type] = function (...args) {\n\n                    return internals.generate(this, schema, args);\n                };\n            }\n        }\n\n        return joi;\n    },\n\n    isError: Errors.ValidationError.isError,\n    isExpression: Template.isTemplate,\n    isRef: Ref.isRef,\n    isSchema: Common.isSchema,\n\n    in(...args) {\n\n        return Ref.in(...args);\n    },\n\n    override: Common.symbols.override,\n\n    ref(...args) {\n\n        return Ref.create(...args);\n    },\n\n    types() {\n\n        const types = {};\n        for (const type of this._types) {\n            types[type] = this[type]();\n        }\n\n        for (const target in internals.aliases) {\n            types[target] = this[target]();\n        }\n\n        return types;\n    }\n};\n\n\n// Helpers\n\ninternals.assert = function (value, schema, annotate, args /* [message], [options] */) {\n\n    const message = args[0] instanceof Error || typeof args[0] === 'string' ? args[0] : null;\n    const options = message !== null ? args[1] : args[0];\n    const result = schema.validate(value, Common.preferences({ errors: { stack: true } }, options || {}));\n\n    let error = result.error;\n    if (!error) {\n        return result.value;\n    }\n\n    if (message instanceof Error) {\n        throw message;\n    }\n\n    const display = annotate && typeof error.annotate === 'function' ? error.annotate() : error.message;\n\n    if (error instanceof Errors.ValidationError === false) {\n        error = Clone(error);\n    }\n\n    error.message = message ? `${message} ${display}` : display;\n    throw error;\n};\n\n\ninternals.generate = function (root, schema, args) {\n\n    Assert(root, 'Must be invoked on a Joi instance.');\n\n    schema.$_root = root;\n\n    if (!schema._definition.args ||\n        !args.length) {\n\n        return schema;\n    }\n\n    return schema._definition.args(schema, ...args);\n};\n\n\ninternals.expandExtension = function (extension, joi) {\n\n    if (typeof extension.type === 'string') {\n        return [extension];\n    }\n\n    const extended = [];\n    for (const type of joi._types) {\n        if (extension.type.test(type)) {\n            const item = Object.assign({}, extension);\n            item.type = type;\n            item.base = joi[type]();\n            extended.push(item);\n        }\n    }\n\n    return extended;\n};\n\n\nmodule.exports = internals.root();\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst Domain = require('@sideway/address/lib/domain');\nconst Email = require('@sideway/address/lib/email');\nconst Ip = require('@sideway/address/lib/ip');\nconst EscapeRegex = require('@hapi/hoek/lib/escapeRegex');\nconst Tlds = require('@sideway/address/lib/tlds');\nconst Uri = require('@sideway/address/lib/uri');\n\nconst Any = require('./any');\nconst Common = require('../common');\n\n\nconst internals = {\n    tlds: Tlds instanceof Set ? { tlds: { allow: Tlds, deny: null } } : false,              // $lab:coverage:ignore$\n    base64Regex: {\n        // paddingRequired\n        true: {\n            // urlSafe\n            true: /^(?:[\\w\\-]{2}[\\w\\-]{2})*(?:[\\w\\-]{2}==|[\\w\\-]{3}=)?$/,\n            false: /^(?:[A-Za-z0-9+\\/]{2}[A-Za-z0-9+\\/]{2})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/\n        },\n        false: {\n            true: /^(?:[\\w\\-]{2}[\\w\\-]{2})*(?:[\\w\\-]{2}(==)?|[\\w\\-]{3}=?)?$/,\n            false: /^(?:[A-Za-z0-9+\\/]{2}[A-Za-z0-9+\\/]{2})*(?:[A-Za-z0-9+\\/]{2}(==)?|[A-Za-z0-9+\\/]{3}=?)?$/\n        }\n    },\n    dataUriRegex: /^data:[\\w+.-]+\\/[\\w+.-]+;((charset=[\\w-]+|base64),)?(.*)$/,\n    hexRegex: {\n        withPrefix: /^0x[0-9a-f]+$/i,\n        withOptionalPrefix: /^(?:0x)?[0-9a-f]+$/i,\n        withoutPrefix: /^[0-9a-f]+$/i\n    },\n    ipRegex: Ip.regex({ cidr: 'forbidden' }).regex,\n    isoDurationRegex: /^P(?!$)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(?=\\d)(\\d+H)?(\\d+M)?(\\d+S)?)?$/,\n\n    guidBrackets: {\n        '{': '}', '[': ']', '(': ')', '': ''\n    },\n    guidVersions: {\n        uuidv1: '1',\n        uuidv2: '2',\n        uuidv3: '3',\n        uuidv4: '4',\n        uuidv5: '5',\n        uuidv6: '6',\n        uuidv7: '7',\n        uuidv8: '8'\n    },\n    guidSeparators: new Set([undefined, true, false, '-', ':']),\n\n    normalizationForms: ['NFC', 'NFD', 'NFKC', 'NFKD']\n};\n\n\nmodule.exports = Any.extend({\n\n    type: 'string',\n\n    flags: {\n\n        insensitive: { default: false },\n        truncate: { default: false }\n    },\n\n    terms: {\n\n        replacements: { init: null }\n    },\n\n    coerce: {\n        from: 'string',\n        method(value, { schema, state, prefs }) {\n\n            const normalize = schema.$_getRule('normalize');\n            if (normalize) {\n                value = value.normalize(normalize.args.form);\n            }\n\n            const casing = schema.$_getRule('case');\n            if (casing) {\n                value = casing.args.direction === 'upper' ? value.toLocaleUpperCase() : value.toLocaleLowerCase();\n            }\n\n            const trim = schema.$_getRule('trim');\n            if (trim &&\n                trim.args.enabled) {\n\n                value = value.trim();\n            }\n\n            if (schema.$_terms.replacements) {\n                for (const replacement of schema.$_terms.replacements) {\n                    value = value.replace(replacement.pattern, replacement.replacement);\n                }\n            }\n\n            const hex = schema.$_getRule('hex');\n            if (hex &&\n                hex.args.options.byteAligned &&\n                value.length % 2 !== 0) {\n\n                value = `0${value}`;\n            }\n\n            if (schema.$_getRule('isoDate')) {\n                const iso = internals.isoDate(value);\n                if (iso) {\n                    value = iso;\n                }\n            }\n\n            if (schema._flags.truncate) {\n                const rule = schema.$_getRule('max');\n                if (rule) {\n                    let limit = rule.args.limit;\n                    if (Common.isResolvable(limit)) {\n                        limit = limit.resolve(value, state, prefs);\n                        if (!Common.limit(limit)) {\n                            return { value, errors: schema.$_createError('any.ref', limit, { ref: rule.args.limit, arg: 'limit', reason: 'must be a positive integer' }, state, prefs) };\n                        }\n                    }\n\n                    value = value.slice(0, limit);\n                }\n            }\n\n            return { value };\n        }\n    },\n\n    validate(value, { schema, error }) {\n\n        if (typeof value !== 'string') {\n            return { value, errors: error('string.base') };\n        }\n\n        if (value === '') {\n            const min = schema.$_getRule('min');\n            if (min &&\n                min.args.limit === 0) {\n\n                return;\n            }\n\n            return { value, errors: error('string.empty') };\n        }\n    },\n\n    rules: {\n\n        alphanum: {\n            method() {\n\n                return this.$_addRule('alphanum');\n            },\n            validate(value, helpers) {\n\n                if (/^[a-zA-Z0-9]+$/.test(value)) {\n                    return value;\n                }\n\n                return helpers.error('string.alphanum');\n            }\n        },\n\n        base64: {\n            method(options = {}) {\n\n                Common.assertOptions(options, ['paddingRequired', 'urlSafe']);\n\n                options = { urlSafe: false, paddingRequired: true, ...options };\n                Assert(typeof options.paddingRequired === 'boolean', 'paddingRequired must be boolean');\n                Assert(typeof options.urlSafe === 'boolean', 'urlSafe must be boolean');\n\n                return this.$_addRule({ name: 'base64', args: { options } });\n            },\n            validate(value, helpers, { options }) {\n\n                const regex = internals.base64Regex[options.paddingRequired][options.urlSafe];\n                if (regex.test(value)) {\n                    return value;\n                }\n\n                return helpers.error('string.base64');\n            }\n        },\n\n        case: {\n            method(direction) {\n\n                Assert(['lower', 'upper'].includes(direction), 'Invalid case:', direction);\n\n                return this.$_addRule({ name: 'case', args: { direction } });\n            },\n            validate(value, helpers, { direction }) {\n\n                if (direction === 'lower' && value === value.toLocaleLowerCase() ||\n                    direction === 'upper' && value === value.toLocaleUpperCase()) {\n\n                    return value;\n                }\n\n                return helpers.error(`string.${direction}case`);\n            },\n            convert: true\n        },\n\n        creditCard: {\n            method() {\n\n                return this.$_addRule('creditCard');\n            },\n            validate(value, helpers) {\n\n                let i = value.length;\n                let sum = 0;\n                let mul = 1;\n\n                while (i--) {\n                    const char = value.charAt(i) * mul;\n                    sum = sum + (char - (char > 9) * 9);\n                    mul = mul ^ 3;\n                }\n\n                if (sum > 0 &&\n                    sum % 10 === 0) {\n\n                    return value;\n                }\n\n                return helpers.error('string.creditCard');\n            }\n        },\n\n        dataUri: {\n            method(options = {}) {\n\n                Common.assertOptions(options, ['paddingRequired']);\n\n                options = { paddingRequired: true, ...options };\n                Assert(typeof options.paddingRequired === 'boolean', 'paddingRequired must be boolean');\n\n                return this.$_addRule({ name: 'dataUri', args: { options } });\n            },\n            validate(value, helpers, { options }) {\n\n                const matches = value.match(internals.dataUriRegex);\n\n                if (matches) {\n                    if (!matches[2]) {\n                        return value;\n                    }\n\n                    if (matches[2] !== 'base64') {\n                        return value;\n                    }\n\n                    const base64regex = internals.base64Regex[options.paddingRequired].false;\n                    if (base64regex.test(matches[3])) {\n                        return value;\n                    }\n                }\n\n                return helpers.error('string.dataUri');\n            }\n        },\n\n        domain: {\n            method(options) {\n\n                if (options) {\n                    Common.assertOptions(options, ['allowFullyQualified', 'allowUnicode', 'maxDomainSegments', 'minDomainSegments', 'tlds']);\n                }\n\n                const address = internals.addressOptions(options);\n                return this.$_addRule({ name: 'domain', args: { options }, address });\n            },\n            validate(value, helpers, args, { address }) {\n\n                if (Domain.isValid(value, address)) {\n                    return value;\n                }\n\n                return helpers.error('string.domain');\n            }\n        },\n\n        email: {\n            method(options = {}) {\n\n                Common.assertOptions(options, ['allowFullyQualified', 'allowUnicode', 'ignoreLength', 'maxDomainSegments', 'minDomainSegments', 'multiple', 'separator', 'tlds']);\n                Assert(options.multiple === undefined || typeof options.multiple === 'boolean', 'multiple option must be an boolean');\n\n                const address = internals.addressOptions(options);\n                const regex = new RegExp(`\\\\s*[${options.separator ? EscapeRegex(options.separator) : ','}]\\\\s*`);\n\n                return this.$_addRule({ name: 'email', args: { options }, regex, address });\n            },\n            validate(value, helpers, { options }, { regex, address }) {\n\n                const emails = options.multiple ? value.split(regex) : [value];\n                const invalids = [];\n                for (const email of emails) {\n                    if (!Email.isValid(email, address)) {\n                        invalids.push(email);\n                    }\n                }\n\n                if (!invalids.length) {\n                    return value;\n                }\n\n                return helpers.error('string.email', { value, invalids });\n            }\n        },\n\n        guid: {\n            alias: 'uuid',\n            method(options = {}) {\n\n                Common.assertOptions(options, ['version', 'separator']);\n\n                let versionNumbers = '';\n\n                if (options.version) {\n                    const versions = [].concat(options.version);\n\n                    Assert(versions.length >= 1, 'version must have at least 1 valid version specified');\n                    const set = new Set();\n\n                    for (let i = 0; i < versions.length; ++i) {\n                        const version = versions[i];\n                        Assert(typeof version === 'string', 'version at position ' + i + ' must be a string');\n                        const versionNumber = internals.guidVersions[version.toLowerCase()];\n                        Assert(versionNumber, 'version at position ' + i + ' must be one of ' + Object.keys(internals.guidVersions).join(', '));\n                        Assert(!set.has(versionNumber), 'version at position ' + i + ' must not be a duplicate');\n\n                        versionNumbers += versionNumber;\n                        set.add(versionNumber);\n                    }\n                }\n\n                Assert(internals.guidSeparators.has(options.separator), 'separator must be one of true, false, \"-\", or \":\"');\n                const separator = options.separator === undefined ? '[:-]?' :\n                    options.separator === true ? '[:-]' :\n                        options.separator === false ? '[]?' : `\\\\${options.separator}`;\n\n                const regex = new RegExp(`^([\\\\[{\\\\(]?)[0-9A-F]{8}(${separator})[0-9A-F]{4}\\\\2?[${versionNumbers || '0-9A-F'}][0-9A-F]{3}\\\\2?[${versionNumbers ? '89AB' : '0-9A-F'}][0-9A-F]{3}\\\\2?[0-9A-F]{12}([\\\\]}\\\\)]?)$`, 'i');\n\n                return this.$_addRule({ name: 'guid', args: { options }, regex });\n            },\n            validate(value, helpers, args, { regex }) {\n\n                const results = regex.exec(value);\n\n                if (!results) {\n                    return helpers.error('string.guid');\n                }\n\n                // Matching braces\n\n                if (internals.guidBrackets[results[1]] !== results[results.length - 1]) {\n                    return helpers.error('string.guid');\n                }\n\n                return value;\n            }\n        },\n\n        hex: {\n            method(options = {}) {\n\n                Common.assertOptions(options, ['byteAligned', 'prefix']);\n\n                options = { byteAligned: false, prefix: false, ...options };\n                Assert(typeof options.byteAligned === 'boolean', 'byteAligned must be boolean');\n                Assert(typeof options.prefix === 'boolean' || options.prefix === 'optional', 'prefix must be boolean or \"optional\"');\n\n                return this.$_addRule({ name: 'hex', args: { options } });\n            },\n            validate(value, helpers, { options }) {\n\n                const re = options.prefix === 'optional' ?\n                    internals.hexRegex.withOptionalPrefix :\n                    options.prefix === true ?\n                        internals.hexRegex.withPrefix :\n                        internals.hexRegex.withoutPrefix;\n                if (!re.test(value)) {\n                    return helpers.error('string.hex');\n                }\n\n                if (options.byteAligned &&\n                    value.length % 2 !== 0) {\n\n                    return helpers.error('string.hexAlign');\n                }\n\n                return value;\n            }\n        },\n\n        hostname: {\n            method() {\n\n                return this.$_addRule('hostname');\n            },\n            validate(value, helpers) {\n\n                if (Domain.isValid(value, { minDomainSegments: 1 }) ||\n                    internals.ipRegex.test(value)) {\n\n                    return value;\n                }\n\n                return helpers.error('string.hostname');\n            }\n        },\n\n        insensitive: {\n            method() {\n\n                return this.$_setFlag('insensitive', true);\n            }\n        },\n\n        ip: {\n            method(options = {}) {\n\n                Common.assertOptions(options, ['cidr', 'version']);\n\n                const { cidr, versions, regex } = Ip.regex(options);\n                const version = options.version ? versions : undefined;\n                return this.$_addRule({ name: 'ip', args: { options: { cidr, version } }, regex });\n            },\n            validate(value, helpers, { options }, { regex }) {\n\n                if (regex.test(value)) {\n                    return value;\n                }\n\n                if (options.version) {\n                    return helpers.error('string.ipVersion', { value, cidr: options.cidr, version: options.version });\n                }\n\n                return helpers.error('string.ip', { value, cidr: options.cidr });\n            }\n        },\n\n        isoDate: {\n            method() {\n\n                return this.$_addRule('isoDate');\n            },\n            validate(value, { error }) {\n\n                if (internals.isoDate(value)) {\n                    return value;\n                }\n\n                return error('string.isoDate');\n            }\n        },\n\n        isoDuration: {\n            method() {\n\n                return this.$_addRule('isoDuration');\n            },\n            validate(value, helpers) {\n\n                if (internals.isoDurationRegex.test(value)) {\n                    return value;\n                }\n\n                return helpers.error('string.isoDuration');\n            }\n        },\n\n        length: {\n            method(limit, encoding) {\n\n                return internals.length(this, 'length', limit, '=', encoding);\n            },\n            validate(value, helpers, { limit, encoding }, { name, operator, args }) {\n\n                const length = encoding ? Buffer && Buffer.byteLength(value, encoding) : value.length;      // $lab:coverage:ignore$\n                if (Common.compare(length, limit, operator)) {\n                    return value;\n                }\n\n                return helpers.error('string.' + name, { limit: args.limit, value, encoding });\n            },\n            args: [\n                {\n                    name: 'limit',\n                    ref: true,\n                    assert: Common.limit,\n                    message: 'must be a positive integer'\n                },\n                'encoding'\n            ]\n        },\n\n        lowercase: {\n            method() {\n\n                return this.case('lower');\n            }\n        },\n\n        max: {\n            method(limit, encoding) {\n\n                return internals.length(this, 'max', limit, '<=', encoding);\n            },\n            args: ['limit', 'encoding']\n        },\n\n        min: {\n            method(limit, encoding) {\n\n                return internals.length(this, 'min', limit, '>=', encoding);\n            },\n            args: ['limit', 'encoding']\n        },\n\n        normalize: {\n            method(form = 'NFC') {\n\n                Assert(internals.normalizationForms.includes(form), 'normalization form must be one of ' + internals.normalizationForms.join(', '));\n\n                return this.$_addRule({ name: 'normalize', args: { form } });\n            },\n            validate(value, { error }, { form }) {\n\n                if (value === value.normalize(form)) {\n                    return value;\n                }\n\n                return error('string.normalize', { value, form });\n            },\n            convert: true\n        },\n\n        pattern: {\n            alias: 'regex',\n            method(regex, options = {}) {\n\n                Assert(regex instanceof RegExp, 'regex must be a RegExp');\n                Assert(!regex.flags.includes('g') && !regex.flags.includes('y'), 'regex should not use global or sticky mode');\n\n                if (typeof options === 'string') {\n                    options = { name: options };\n                }\n\n                Common.assertOptions(options, ['invert', 'name']);\n\n                const errorCode = ['string.pattern', options.invert ? '.invert' : '', options.name ? '.name' : '.base'].join('');\n                return this.$_addRule({ name: 'pattern', args: { regex, options }, errorCode });\n            },\n            validate(value, helpers, { regex, options }, { errorCode }) {\n\n                const patternMatch = regex.test(value);\n\n                if (patternMatch ^ options.invert) {\n                    return value;\n                }\n\n                return helpers.error(errorCode, { name: options.name, regex, value });\n            },\n            args: ['regex', 'options'],\n            multi: true\n        },\n\n        replace: {\n            method(pattern, replacement) {\n\n                if (typeof pattern === 'string') {\n                    pattern = new RegExp(EscapeRegex(pattern), 'g');\n                }\n\n                Assert(pattern instanceof RegExp, 'pattern must be a RegExp');\n                Assert(typeof replacement === 'string', 'replacement must be a String');\n\n                const obj = this.clone();\n\n                if (!obj.$_terms.replacements) {\n                    obj.$_terms.replacements = [];\n                }\n\n                obj.$_terms.replacements.push({ pattern, replacement });\n                return obj;\n            }\n        },\n\n        token: {\n            method() {\n\n                return this.$_addRule('token');\n            },\n            validate(value, helpers) {\n\n                if (/^\\w+$/.test(value)) {\n                    return value;\n                }\n\n                return helpers.error('string.token');\n            }\n        },\n\n        trim: {\n            method(enabled = true) {\n\n                Assert(typeof enabled === 'boolean', 'enabled must be a boolean');\n\n                return this.$_addRule({ name: 'trim', args: { enabled } });\n            },\n            validate(value, helpers, { enabled }) {\n\n                if (!enabled ||\n                    value === value.trim()) {\n\n                    return value;\n                }\n\n                return helpers.error('string.trim');\n            },\n            convert: true\n        },\n\n        truncate: {\n            method(enabled = true) {\n\n                Assert(typeof enabled === 'boolean', 'enabled must be a boolean');\n\n                return this.$_setFlag('truncate', enabled);\n            }\n        },\n\n        uppercase: {\n            method() {\n\n                return this.case('upper');\n            }\n        },\n\n        uri: {\n            method(options = {}) {\n\n                Common.assertOptions(options, ['allowRelative', 'allowQuerySquareBrackets', 'domain', 'relativeOnly', 'scheme', 'encodeUri']);\n\n                if (options.domain) {\n                    Common.assertOptions(options.domain, ['allowFullyQualified', 'allowUnicode', 'maxDomainSegments', 'minDomainSegments', 'tlds']);\n                }\n\n                const { regex, scheme } = Uri.regex(options);\n                const domain = options.domain ? internals.addressOptions(options.domain) : null;\n                return this.$_addRule({ name: 'uri', args: { options }, regex, domain, scheme });\n            },\n            validate(value, helpers, { options }, { regex, domain, scheme }) {\n\n                if (['http:/', 'https:/'].includes(value)) {            // scheme:/ is technically valid but makes no sense\n                    return helpers.error('string.uri');\n                }\n\n                let match = regex.exec(value);\n\n                if (!match && helpers.prefs.convert && options.encodeUri) {\n                    const encoded = encodeURI(value);\n                    match = regex.exec(encoded);\n                    if (match) {\n                        value = encoded;\n                    }\n                }\n\n                if (match) {\n                    const matched = match[1] || match[2];\n                    if (domain &&\n                        (!options.allowRelative || matched) &&\n                        !Domain.isValid(matched, domain)) {\n\n                        return helpers.error('string.domain', { value: matched });\n                    }\n\n                    return value;\n                }\n\n                if (options.relativeOnly) {\n                    return helpers.error('string.uriRelativeOnly');\n                }\n\n                if (options.scheme) {\n                    return helpers.error('string.uriCustomScheme', { scheme, value });\n                }\n\n                return helpers.error('string.uri');\n            }\n        }\n    },\n\n    manifest: {\n\n        build(obj, desc) {\n\n            if (desc.replacements) {\n                for (const { pattern, replacement } of desc.replacements) {\n                    obj = obj.replace(pattern, replacement);\n                }\n            }\n\n            return obj;\n        }\n    },\n\n    messages: {\n        'string.alphanum': '{{#label}} must only contain alpha-numeric characters',\n        'string.base': '{{#label}} must be a string',\n        'string.base64': '{{#label}} must be a valid base64 string',\n        'string.creditCard': '{{#label}} must be a credit card',\n        'string.dataUri': '{{#label}} must be a valid dataUri string',\n        'string.domain': '{{#label}} must contain a valid domain name',\n        'string.email': '{{#label}} must be a valid email',\n        'string.empty': '{{#label}} is not allowed to be empty',\n        'string.guid': '{{#label}} must be a valid GUID',\n        'string.hex': '{{#label}} must only contain hexadecimal characters',\n        'string.hexAlign': '{{#label}} hex decoded representation must be byte aligned',\n        'string.hostname': '{{#label}} must be a valid hostname',\n        'string.ip': '{{#label}} must be a valid ip address with a {{#cidr}} CIDR',\n        'string.ipVersion': '{{#label}} must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR',\n        'string.isoDate': '{{#label}} must be in iso format',\n        'string.isoDuration': '{{#label}} must be a valid ISO 8601 duration',\n        'string.length': '{{#label}} length must be {{#limit}} characters long',\n        'string.lowercase': '{{#label}} must only contain lowercase characters',\n        'string.max': '{{#label}} length must be less than or equal to {{#limit}} characters long',\n        'string.min': '{{#label}} length must be at least {{#limit}} characters long',\n        'string.normalize': '{{#label}} must be unicode normalized in the {{#form}} form',\n        'string.token': '{{#label}} must only contain alpha-numeric and underscore characters',\n        'string.pattern.base': '{{#label}} with value {:[.]} fails to match the required pattern: {{#regex}}',\n        'string.pattern.name': '{{#label}} with value {:[.]} fails to match the {{#name}} pattern',\n        'string.pattern.invert.base': '{{#label}} with value {:[.]} matches the inverted pattern: {{#regex}}',\n        'string.pattern.invert.name': '{{#label}} with value {:[.]} matches the inverted {{#name}} pattern',\n        'string.trim': '{{#label}} must not have leading or trailing whitespace',\n        'string.uri': '{{#label}} must be a valid uri',\n        'string.uriCustomScheme': '{{#label}} must be a valid uri with a scheme matching the {{#scheme}} pattern',\n        'string.uriRelativeOnly': '{{#label}} must be a valid relative uri',\n        'string.uppercase': '{{#label}} must only contain uppercase characters'\n    }\n});\n\n\n// Helpers\n\ninternals.addressOptions = function (options) {\n\n    if (!options) {\n        return internals.tlds || options;      // $lab:coverage:ignore$\n    }\n\n    // minDomainSegments\n\n    Assert(options.minDomainSegments === undefined ||\n        Number.isSafeInteger(options.minDomainSegments) && options.minDomainSegments > 0, 'minDomainSegments must be a positive integer');\n\n    // maxDomainSegments\n\n    Assert(options.maxDomainSegments === undefined ||\n        Number.isSafeInteger(options.maxDomainSegments) && options.maxDomainSegments > 0, 'maxDomainSegments must be a positive integer');\n\n    // tlds\n\n    if (options.tlds === false) {\n        return options;\n    }\n\n    if (options.tlds === true ||\n        options.tlds === undefined) {\n\n        Assert(internals.tlds, 'Built-in TLD list disabled');\n        return Object.assign({}, options, internals.tlds);\n    }\n\n    Assert(typeof options.tlds === 'object', 'tlds must be true, false, or an object');\n\n    const deny = options.tlds.deny;\n    if (deny) {\n        if (Array.isArray(deny)) {\n            options = Object.assign({}, options, { tlds: { deny: new Set(deny) } });\n        }\n\n        Assert(options.tlds.deny instanceof Set, 'tlds.deny must be an array, Set, or boolean');\n        Assert(!options.tlds.allow, 'Cannot specify both tlds.allow and tlds.deny lists');\n        internals.validateTlds(options.tlds.deny, 'tlds.deny');\n        return options;\n    }\n\n    const allow = options.tlds.allow;\n    if (!allow) {\n        return options;\n    }\n\n    if (allow === true) {\n        Assert(internals.tlds, 'Built-in TLD list disabled');\n        return Object.assign({}, options, internals.tlds);\n    }\n\n    if (Array.isArray(allow)) {\n        options = Object.assign({}, options, { tlds: { allow: new Set(allow) } });\n    }\n\n    Assert(options.tlds.allow instanceof Set, 'tlds.allow must be an array, Set, or boolean');\n    internals.validateTlds(options.tlds.allow, 'tlds.allow');\n    return options;\n};\n\n\ninternals.validateTlds = function (set, source) {\n\n    for (const tld of set) {\n        Assert(Domain.isValid(tld, { minDomainSegments: 1, maxDomainSegments: 1 }), `${source} must contain valid top level domain names`);\n    }\n};\n\n\ninternals.isoDate = function (value) {\n\n    if (!Common.isIsoDate(value)) {\n        return null;\n    }\n\n    if (/.*T.*[+-]\\d\\d$/.test(value)) {             // Add missing trailing zeros to timeshift\n        value += '00';\n    }\n\n    const date = new Date(value);\n    if (isNaN(date.getTime())) {\n        return null;\n    }\n\n    return date.toISOString();\n};\n\n\ninternals.length = function (schema, name, limit, operator, encoding) {\n\n    Assert(!encoding || Buffer && Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);      // $lab:coverage:ignore$\n\n    return schema.$_addRule({ name, method: 'length', args: { limit, encoding }, operator });\n};\n","'use strict';\n\nconst Annotate = require('./annotate');\nconst Common = require('./common');\nconst Template = require('./template');\n\n\nconst internals = {};\n\n\nexports.Report = class {\n\n    constructor(code, value, local, flags, messages, state, prefs) {\n\n        this.code = code;\n        this.flags = flags;\n        this.messages = messages;\n        this.path = state.path;\n        this.prefs = prefs;\n        this.state = state;\n        this.value = value;\n\n        this.message = null;\n        this.template = null;\n\n        this.local = local || {};\n        this.local.label = exports.label(this.flags, this.state, this.prefs, this.messages);\n\n        if (this.value !== undefined &&\n            !this.local.hasOwnProperty('value')) {\n\n            this.local.value = this.value;\n        }\n\n        if (this.path.length) {\n            const key = this.path[this.path.length - 1];\n            if (typeof key !== 'object') {\n                this.local.key = key;\n            }\n        }\n    }\n\n    _setTemplate(template) {\n\n        this.template = template;\n\n        if (!this.flags.label &&\n            this.path.length === 0) {\n\n            const localized = this._template(this.template, 'root');\n            if (localized) {\n                this.local.label = localized;\n            }\n        }\n    }\n\n    toString() {\n\n        if (this.message) {\n            return this.message;\n        }\n\n        const code = this.code;\n\n        if (!this.prefs.errors.render) {\n            return this.code;\n        }\n\n        const template = this._template(this.template) ||\n            this._template(this.prefs.messages) ||\n            this._template(this.messages);\n\n        if (template === undefined) {\n            return `Error code \"${code}\" is not defined, your custom type is missing the correct messages definition`;\n        }\n\n        // Render and cache result\n\n        this.message = template.render(this.value, this.state, this.prefs, this.local, { errors: this.prefs.errors, messages: [this.prefs.messages, this.messages] });\n        if (!this.prefs.errors.label) {\n            this.message = this.message.replace(/^\"\" /, '').trim();\n        }\n\n        return this.message;\n    }\n\n    _template(messages, code) {\n\n        return exports.template(this.value, messages, code || this.code, this.state, this.prefs);\n    }\n};\n\n\nexports.path = function (path) {\n\n    let label = '';\n    for (const segment of path) {\n        if (typeof segment === 'object') {          // Exclude array single path segment\n            continue;\n        }\n\n        if (typeof segment === 'string') {\n            if (label) {\n                label += '.';\n            }\n\n            label += segment;\n        }\n        else {\n            label += `[${segment}]`;\n        }\n    }\n\n    return label;\n};\n\n\nexports.template = function (value, messages, code, state, prefs) {\n\n    if (!messages) {\n        return;\n    }\n\n    if (Template.isTemplate(messages)) {\n        return code !== 'root' ? messages : null;\n    }\n\n    let lang = prefs.errors.language;\n    if (Common.isResolvable(lang)) {\n        lang = lang.resolve(value, state, prefs);\n    }\n\n    if (lang &&\n        messages[lang]) {\n\n        if (messages[lang][code] !== undefined) {\n            return messages[lang][code];\n        }\n\n        if (messages[lang]['*'] !== undefined) {\n            return messages[lang]['*'];\n        }\n    }\n\n    if (!messages[code]) {\n        return messages['*'];\n    }\n\n    return messages[code];\n};\n\n\nexports.label = function (flags, state, prefs, messages) {\n\n    if (!prefs.errors.label) {\n        return '';\n    }\n\n    if (flags.label) {\n        return flags.label;\n    }\n\n    let path = state.path;\n    if (prefs.errors.label === 'key' &&\n        state.path.length > 1) {\n\n        path = state.path.slice(-1);\n    }\n\n    const normalized = exports.path(path);\n    if (normalized) {\n        return normalized;\n    }\n\n    return exports.template(null, prefs.messages, 'root', state, prefs) ||\n        messages && exports.template(null, messages, 'root', state, prefs) ||\n        'value';\n};\n\n\nexports.process = function (errors, original, prefs) {\n\n    if (!errors) {\n        return null;\n    }\n\n    const { override, message, details } = exports.details(errors);\n    if (override) {\n        return override;\n    }\n\n    if (prefs.errors.stack) {\n        return new exports.ValidationError(message, details, original);\n    }\n\n    const limit = Error.stackTraceLimit;\n    Error.stackTraceLimit = 0;\n    const validationError = new exports.ValidationError(message, details, original);\n    Error.stackTraceLimit = limit;\n    return validationError;\n};\n\n\nexports.details = function (errors, options = {}) {\n\n    let messages = [];\n    const details = [];\n\n    for (const item of errors) {\n\n        // Override\n\n        if (item instanceof Error) {\n            if (options.override !== false) {\n                return { override: item };\n            }\n\n            const message = item.toString();\n            messages.push(message);\n\n            details.push({\n                message,\n                type: 'override',\n                context: { error: item }\n            });\n\n            continue;\n        }\n\n        // Report\n\n        const message = item.toString();\n        messages.push(message);\n\n        details.push({\n            message,\n            path: item.path.filter((v) => typeof v !== 'object'),\n            type: item.code,\n            context: item.local\n        });\n    }\n\n    if (messages.length > 1) {\n        messages = [...new Set(messages)];\n    }\n\n    return { message: messages.join('. '), details };\n};\n\n\nexports.ValidationError = class extends Error {\n\n    constructor(message, details, original) {\n\n        super(message);\n        this._original = original;\n        this.details = details;\n    }\n\n    static isError(err) {\n\n        return err instanceof exports.ValidationError;\n    }\n};\n\n\nexports.ValidationError.prototype.isJoi = true;\n\nexports.ValidationError.prototype.name = 'ValidationError';\n\nexports.ValidationError.prototype.annotate = Annotate.error;\n","// 위치 기반 침수 데이터 Lambda 함수 구현\r\n// GET /api/flood-data/location Lambda 함수\r\n\r\nconst { success, error: errorResponse, validationError } = require('../utils/response');\r\nconst { logRequest, logResponse, error } = require('../utils/logger');\r\nconst DynamoDBService = require('../services/DynamoDBService');\r\nconst Joi = require('joi');\r\n\r\n// 서비스 인스턴스 생성\r\nconst dynamoDBService = new DynamoDBService();\r\n\r\n/**\r\n * 위치 기반 침수 데이터 조회 핸들러\r\n * GET /api/flood-data/location\r\n */\r\nasync function getFloodDataByLocation(event, context) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    logRequest(event, 'getFloodDataByLocation');\r\n\r\n    // 쿼리 파라미터 검증\r\n    const queryParams = event.queryStringParameters || {};\r\n    const validationResult = validateLocationQuery(queryParams);\r\n    \r\n    if (validationResult.error) {\r\n      const response = validationError(\r\n        'Invalid query parameters',\r\n        validationResult.error.details\r\n      );\r\n      logResponse(response, 'getFloodDataByLocation', Date.now() - startTime);\r\n      return response;\r\n    }\r\n\r\n    const { \r\n      latitude, \r\n      longitude, \r\n      radius, \r\n      severity, \r\n      alertType, \r\n      limit, \r\n      offset \r\n    } = validationResult.value;\r\n\r\n    // 위치 기반 침수 데이터 조회\r\n    const locationData = await getFloodPointsNearLocation(\r\n      latitude,\r\n      longitude,\r\n      radius,\r\n      { severity, alertType, limit, offset }\r\n    );\r\n\r\n    const response = success(locationData);\r\n    logResponse(response, 'getFloodDataByLocation', Date.now() - startTime);\r\n    return response;\r\n\r\n  } catch (err) {\r\n    error('Failed to get flood data by location', err, {\r\n      queryParams: event.queryStringParameters,\r\n    });\r\n\r\n    const response = errorResponse(\r\n      'Failed to retrieve location-based flood data',\r\n      500,\r\n      'LOCATION_FLOOD_ERROR'\r\n    );\r\n    logResponse(response, 'getFloodDataByLocation', Date.now() - startTime);\r\n    return response;\r\n  }\r\n}\r\n\r\n/**\r\n * 쿼리 파라미터 검증\r\n * @param {Object} queryParams - 쿼리 파라미터\r\n * @returns {Object} 검증 결과\r\n */\r\nfunction validateLocationQuery(queryParams) {\r\n  const schema = Joi.object({\r\n    latitude: Joi.number().min(-90).max(90).required(),\r\n    longitude: Joi.number().min(-180).max(180).required(),\r\n    radius: Joi.number().min(100).max(50000).default(5000), // 100m ~ 50km\r\n    severity: Joi.string().valid('low', 'medium', 'high'),\r\n    alertType: Joi.string().valid('주의보', '경보', '특보'),\r\n    limit: Joi.number().min(1).max(500).default(100),\r\n    offset: Joi.number().min(0).default(0),\r\n  });\r\n\r\n  return schema.validate(queryParams);\r\n}\r\n\r\n/**\r\n * 위치 주변 침수 지점 조회\r\n * @param {number} latitude - 위도\r\n * @param {number} longitude - 경도\r\n * @param {number} radius - 반경 (미터)\r\n * @param {Object} options - 추가 옵션\r\n * @returns {Promise<Object>} 위치 기반 침수 데이터\r\n */\r\nasync function getFloodPointsNearLocation(latitude, longitude, radius, options = {}) {\r\n  try {\r\n    // 활성 상태의 모든 침수 데이터 조회\r\n    const allData = await dynamoDBService.getItemsByStatus('active', {\r\n      limit: options.limit * 2, // 거리 필터링을 고려하여 더 많이 조회\r\n    });\r\n\r\n    // 거리 기반 필터링 및 거리 계산\r\n    const nearbyPoints = allData.items\r\n      .filter(item => {\r\n        if (!item.latitude || !item.longitude) return false;\r\n\r\n        const distance = calculateDistance(\r\n          latitude,\r\n          longitude,\r\n          item.latitude,\r\n          item.longitude\r\n        );\r\n\r\n        return distance <= radius;\r\n      })\r\n      .map(item => ({\r\n        id: item.id,\r\n        locationId: item.locationId,\r\n        latitude: item.latitude,\r\n        longitude: item.longitude,\r\n        alertType: item.alertType,\r\n        severity: item.severity,\r\n        timestamp: item.timestamp,\r\n        status: item.status,\r\n        sources: item.sources || [],\r\n        availableAPIs: item.availableAPIs || [],\r\n        distance: calculateDistance(latitude, longitude, item.latitude, item.longitude),\r\n        address: item.address,\r\n      }));\r\n\r\n    // 심각도 필터링\r\n    let filteredPoints = nearbyPoints;\r\n    if (options.severity) {\r\n      filteredPoints = nearbyPoints.filter(point => point.severity === options.severity);\r\n    }\r\n\r\n    // 경보 유형 필터링\r\n    if (options.alertType) {\r\n      filteredPoints = filteredPoints.filter(point => point.alertType === options.alertType);\r\n    }\r\n\r\n    // 거리순 정렬\r\n    filteredPoints.sort((a, b) => a.distance - b.distance);\r\n\r\n    // 페이지네이션\r\n    const offset = options.offset || 0;\r\n    const limit = options.limit || 100;\r\n    const paginatedPoints = filteredPoints.slice(offset, offset + limit);\r\n\r\n    // 응답 데이터 구성\r\n    return {\r\n      center: { latitude, longitude },\r\n      radius,\r\n      floodPoints: paginatedPoints,\r\n      totalCount: filteredPoints.length,\r\n      searchArea: {\r\n        center: { latitude, longitude },\r\n        radius,\r\n        unit: 'meters',\r\n      },\r\n      pagination: {\r\n        limit,\r\n        offset,\r\n        total: filteredPoints.length,\r\n        hasMore: offset + limit < filteredPoints.length,\r\n      },\r\n      summary: {\r\n        nearbyCount: filteredPoints.length,\r\n        returnedCount: paginatedPoints.length,\r\n        closestDistance: paginatedPoints.length > 0 ? paginatedPoints[0].distance : null,\r\n        averageDistance: filteredPoints.length > 0 ? \r\n          filteredPoints.reduce((sum, point) => sum + point.distance, 0) / filteredPoints.length : 0,\r\n        severityDistribution: calculateSeverityDistribution(filteredPoints),\r\n        alertTypeDistribution: calculateAlertTypeDistribution(filteredPoints),\r\n      },\r\n    };\r\n  } catch (err) {\r\n    error('Failed to get flood points near location', err, { latitude, longitude, radius });\r\n    throw err;\r\n  }\r\n}\r\n\r\n/**\r\n * 거리 계산 (Haversine 공식)\r\n * @param {number} lat1 - 첫 번째 위도\r\n * @param {number} lon1 - 첫 번째 경도\r\n * @param {number} lat2 - 두 번째 위도\r\n * @param {number} lon2 - 두 번째 경도\r\n * @returns {number} 거리 (미터)\r\n */\r\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\r\n  const R = 6371000; // 지구 반지름 (미터)\r\n  const φ1 = lat1 * Math.PI / 180;\r\n  const φ2 = lat2 * Math.PI / 180;\r\n  const Δφ = (lat2 - lat1) * Math.PI / 180;\r\n  const Δλ = (lon2 - lon1) * Math.PI / 180;\r\n\r\n  const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n            Math.cos(φ1) * Math.cos(φ2) *\r\n            Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n  return R * c;\r\n}\r\n\r\n/**\r\n * 심각도 분포 계산\r\n * @param {Array} points - 침수 지점 배열\r\n * @returns {Object} 심각도별 분포\r\n */\r\nfunction calculateSeverityDistribution(points) {\r\n  const distribution = { low: 0, medium: 0, high: 0 };\r\n  \r\n  points.forEach(point => {\r\n    if (distribution[point.severity] !== undefined) {\r\n      distribution[point.severity]++;\r\n    }\r\n  });\r\n  \r\n  return distribution;\r\n}\r\n\r\n/**\r\n * 경보 유형 분포 계산\r\n * @param {Array} points - 침수 지점 배열\r\n * @returns {Object} 경보 유형별 분포\r\n */\r\nfunction calculateAlertTypeDistribution(points) {\r\n  const distribution = { '주의보': 0, '경보': 0, '특보': 0 };\r\n  \r\n  points.forEach(point => {\r\n    if (distribution[point.alertType] !== undefined) {\r\n      distribution[point.alertType]++;\r\n    }\r\n  });\r\n  \r\n  return distribution;\r\n}\r\n\r\nmodule.exports = {\r\n  getFloodDataByLocation,\r\n};","const AWS = require('aws-sdk');\r\n\r\n// AWS 설정\r\nconst awsConfig = {\r\n  region: process.env.REGION || 'ap-northeast-2',\r\n};\r\n\r\n// 로컬 개발 환경에서는 DynamoDB Local 사용\r\nif (process.env.NODE_ENV === 'development' || process.env.IS_OFFLINE) {\r\n  awsConfig.endpoint = 'http://localhost:8000';\r\n  awsConfig.accessKeyId = 'local';\r\n  awsConfig.secretAccessKey = 'local';\r\n}\r\n\r\nAWS.config.update(awsConfig);\r\n\r\n// DynamoDB 클라이언트 생성\r\nconst dynamodb = new AWS.DynamoDB.DocumentClient();\r\n\r\n// S3 클라이언트 생성 (필요시)\r\nconst s3 = new AWS.S3();\r\n\r\n// Lambda 클라이언트 생성 (필요시)\r\nconst lambda = new AWS.Lambda();\r\n\r\nmodule.exports = {\r\n  AWS,\r\n  dynamodb,\r\n  s3,\r\n  lambda,\r\n  awsConfig,\r\n};","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst Merge = require('@hapi/hoek/lib/merge');\n\nconst Any = require('./any');\nconst Common = require('../common');\nconst Compile = require('../compile');\nconst Errors = require('../errors');\nconst Ref = require('../ref');\n\n\nconst internals = {};\n\n\nmodule.exports = Any.extend({\n\n    type: 'alternatives',\n\n    flags: {\n\n        match: { default: 'any' }                 // 'any', 'one', 'all'\n    },\n\n    terms: {\n\n        matches: { init: [], register: Ref.toSibling }\n    },\n\n    args(schema, ...schemas) {\n\n        if (schemas.length === 1) {\n            if (Array.isArray(schemas[0])) {\n                return schema.try(...schemas[0]);\n            }\n        }\n\n        return schema.try(...schemas);\n    },\n\n    validate(value, helpers) {\n\n        const { schema, error, state, prefs } = helpers;\n\n        // Match all or one\n\n        if (schema._flags.match) {\n            const matched = [];\n            const failed = [];\n\n            for (let i = 0; i < schema.$_terms.matches.length; ++i) {\n                const item = schema.$_terms.matches[i];\n                const localState = state.nest(item.schema, `match.${i}`);\n                localState.snapshot();\n\n                const result = item.schema.$_validate(value, localState, prefs);\n                if (!result.errors) {\n                    matched.push(result.value);\n                    localState.commit();\n                }\n                else {\n                    failed.push(result.errors);\n                    localState.restore();\n                }\n            }\n\n            if (matched.length === 0) {\n                const context = {\n                    details: failed.map((f) => Errors.details(f, { override: false }))\n                };\n\n                return { errors: error('alternatives.any', context) };\n            }\n\n            // Match one\n\n            if (schema._flags.match === 'one') {\n                return matched.length === 1 ? { value: matched[0] } : { errors: error('alternatives.one') };\n            }\n\n            // Match all\n\n            if (matched.length !== schema.$_terms.matches.length) {\n                const context = {\n                    details: failed.map((f) => Errors.details(f, { override: false }))\n                };\n\n                return { errors: error('alternatives.all', context) };\n            }\n\n            const isAnyObj = (alternative) => {\n\n                return alternative.$_terms.matches.some((v) => {\n\n                    return v.schema.type === 'object' ||\n                        (v.schema.type === 'alternatives' && isAnyObj(v.schema));\n                });\n            };\n\n            return isAnyObj(schema) ? { value: matched.reduce((acc, v) => Merge(acc, v, { mergeArrays: false })) } : { value: matched[matched.length - 1] };\n        }\n\n        // Match any\n\n        const errors = [];\n        for (let i = 0; i < schema.$_terms.matches.length; ++i) {\n            const item = schema.$_terms.matches[i];\n\n            // Try\n\n            if (item.schema) {\n                const localState = state.nest(item.schema, `match.${i}`);\n                localState.snapshot();\n\n                const result = item.schema.$_validate(value, localState, prefs);\n                if (!result.errors) {\n                    localState.commit();\n                    return result;\n                }\n\n                localState.restore();\n                errors.push({ schema: item.schema, reports: result.errors });\n                continue;\n            }\n\n            // Conditional\n\n            const input = item.ref ? item.ref.resolve(value, state, prefs) : value;\n            const tests = item.is ? [item] : item.switch;\n\n            for (let j = 0; j < tests.length; ++j) {\n                const test = tests[j];\n                const { is, then, otherwise } = test;\n\n                const id = `match.${i}${item.switch ? '.' + j : ''}`;\n                if (!is.$_match(input, state.nest(is, `${id}.is`), prefs)) {\n                    if (otherwise) {\n                        return otherwise.$_validate(value, state.nest(otherwise, `${id}.otherwise`), prefs);\n                    }\n                }\n                else if (then) {\n                    return then.$_validate(value, state.nest(then, `${id}.then`), prefs);\n                }\n            }\n        }\n\n        return internals.errors(errors, helpers);\n    },\n\n    rules: {\n\n        conditional: {\n            method(condition, options) {\n\n                Assert(!this._flags._endedSwitch, 'Unreachable condition');\n                Assert(!this._flags.match, 'Cannot combine match mode', this._flags.match, 'with conditional rule');\n                Assert(options.break === undefined, 'Cannot use break option with alternatives conditional');\n\n                const obj = this.clone();\n\n                const match = Compile.when(obj, condition, options);\n                const conditions = match.is ? [match] : match.switch;\n                for (const item of conditions) {\n                    if (item.then &&\n                        item.otherwise) {\n\n                        obj.$_setFlag('_endedSwitch', true, { clone: false });\n                        break;\n                    }\n                }\n\n                obj.$_terms.matches.push(match);\n                return obj.$_mutateRebuild();\n            }\n        },\n\n        match: {\n            method(mode) {\n\n                Assert(['any', 'one', 'all'].includes(mode), 'Invalid alternatives match mode', mode);\n\n                if (mode !== 'any') {\n                    for (const match of this.$_terms.matches) {\n                        Assert(match.schema, 'Cannot combine match mode', mode, 'with conditional rules');\n                    }\n                }\n\n                return this.$_setFlag('match', mode);\n            }\n        },\n\n        try: {\n            method(...schemas) {\n\n                Assert(schemas.length, 'Missing alternative schemas');\n                Common.verifyFlat(schemas, 'try');\n\n                Assert(!this._flags._endedSwitch, 'Unreachable condition');\n\n                const obj = this.clone();\n                for (const schema of schemas) {\n                    obj.$_terms.matches.push({ schema: obj.$_compile(schema) });\n                }\n\n                return obj.$_mutateRebuild();\n            }\n        }\n    },\n\n    overrides: {\n\n        label(name) {\n\n            const obj = this.$_parent('label', name);\n            const each = (item, source) => {\n\n                return source.path[0] !== 'is' && typeof item._flags.label !== 'string' ? item.label(name) : undefined;\n            };\n\n            return obj.$_modify({ each, ref: false });\n        }\n    },\n\n    rebuild(schema) {\n\n        // Flag when an alternative type is an array\n\n        const each = (item) => {\n\n            if (Common.isSchema(item) &&\n                item.type === 'array') {\n\n                schema.$_setFlag('_arrayItems', true, { clone: false });\n            }\n        };\n\n        schema.$_modify({ each });\n    },\n\n    manifest: {\n\n        build(obj, desc) {\n\n            if (desc.matches) {\n                for (const match of desc.matches) {\n                    const { schema, ref, is, not, then, otherwise } = match;\n                    if (schema) {\n                        obj = obj.try(schema);\n                    }\n                    else if (ref) {\n                        obj = obj.conditional(ref, { is, then, not, otherwise, switch: match.switch });\n                    }\n                    else {\n                        obj = obj.conditional(is, { then, otherwise });\n                    }\n                }\n            }\n\n            return obj;\n        }\n    },\n\n    messages: {\n        'alternatives.all': '{{#label}} does not match all of the required types',\n        'alternatives.any': '{{#label}} does not match any of the allowed types',\n        'alternatives.match': '{{#label}} does not match any of the allowed types',\n        'alternatives.one': '{{#label}} matches more than one allowed type',\n        'alternatives.types': '{{#label}} must be one of {{#types}}'\n    }\n});\n\n\n// Helpers\n\ninternals.errors = function (failures, { error, state }) {\n\n    // Nothing matched due to type criteria rules\n\n    if (!failures.length) {\n        return { errors: error('alternatives.any') };\n    }\n\n    // Single error\n\n    if (failures.length === 1) {\n        return { errors: failures[0].reports };\n    }\n\n    // Analyze reasons\n\n    const valids = new Set();\n    const complex = [];\n\n    for (const { reports, schema } of failures) {\n\n        // Multiple errors (!abortEarly)\n\n        if (reports.length > 1) {\n            return internals.unmatched(failures, error);\n        }\n\n        // Custom error\n\n        const report = reports[0];\n        if (report instanceof Errors.Report === false) {\n            return internals.unmatched(failures, error);\n        }\n\n        // Internal object or array error\n\n        if (report.state.path.length !== state.path.length) {\n            complex.push({ type: schema.type, report });\n            continue;\n        }\n\n        // Valids\n\n        if (report.code === 'any.only') {\n            for (const valid of report.local.valids) {\n                valids.add(valid);\n            }\n\n            continue;\n        }\n\n        // Base type\n\n        const [type, code] = report.code.split('.');\n        if (code !== 'base') {\n            complex.push({ type: schema.type, report });\n        }\n        else if (report.code === 'object.base') {\n            valids.add(report.local.type);\n        }\n        else {\n            valids.add(type);\n        }\n    }\n\n    // All errors are base types or valids\n\n    if (!complex.length) {\n        return { errors: error('alternatives.types', { types: [...valids] }) };\n    }\n\n    // Single complex error\n\n    if (complex.length === 1) {\n        return { errors: complex[0].report };\n    }\n\n    return internals.unmatched(failures, error);\n};\n\n\ninternals.unmatched = function (failures, error) {\n\n    const errors = [];\n    for (const failure of failures) {\n        errors.push(...failure.reports);\n    }\n\n    return { errors: error('alternatives.match', Errors.details(errors, { override: false })) };\n};\n","module.exports = require(\"url\");","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Common = require('./common');\nconst Ref = require('./ref');\n\n\nconst internals = {};\n\n\nexports.schema = function (Joi, config, options = {}) {\n\n    Common.assertOptions(options, ['appendPath', 'override']);\n\n    try {\n        return internals.schema(Joi, config, options);\n    }\n    catch (err) {\n        if (options.appendPath &&\n            err.path !== undefined) {\n\n            err.message = `${err.message} (${err.path})`;\n        }\n\n        throw err;\n    }\n};\n\n\ninternals.schema = function (Joi, config, options) {\n\n    Assert(config !== undefined, 'Invalid undefined schema');\n\n    if (Array.isArray(config)) {\n        Assert(config.length, 'Invalid empty array schema');\n\n        if (config.length === 1) {\n            config = config[0];\n        }\n    }\n\n    const valid = (base, ...values) => {\n\n        if (options.override !== false) {\n            return base.valid(Joi.override, ...values);\n        }\n\n        return base.valid(...values);\n    };\n\n    if (internals.simple(config)) {\n        return valid(Joi, config);\n    }\n\n    if (typeof config === 'function') {\n        return Joi.custom(config);\n    }\n\n    Assert(typeof config === 'object', 'Invalid schema content:', typeof config);\n\n    if (Common.isResolvable(config)) {\n        return valid(Joi, config);\n    }\n\n    if (Common.isSchema(config)) {\n        return config;\n    }\n\n    if (Array.isArray(config)) {\n        for (const item of config) {\n            if (!internals.simple(item)) {\n                return Joi.alternatives().try(...config);\n            }\n        }\n\n        return valid(Joi, ...config);\n    }\n\n    if (config instanceof RegExp) {\n        return Joi.string().regex(config);\n    }\n\n    if (config instanceof Date) {\n        return valid(Joi.date(), config);\n    }\n\n    Assert(Object.getPrototypeOf(config) === Object.getPrototypeOf({}), 'Schema can only contain plain objects');\n\n    return Joi.object().keys(config);\n};\n\n\nexports.ref = function (id, options) {\n\n    return Ref.isRef(id) ? id : Ref.create(id, options);\n};\n\n\nexports.compile = function (root, schema, options = {}) {\n\n    Common.assertOptions(options, ['legacy']);\n\n    // Compiled by any supported version\n\n    const any = schema && schema[Common.symbols.any];\n    if (any) {\n        Assert(options.legacy || any.version === Common.version, 'Cannot mix different versions of joi schemas:', any.version, Common.version);\n        return schema;\n    }\n\n    // Uncompiled root\n\n    if (typeof schema !== 'object' ||\n        !options.legacy) {\n\n        return exports.schema(root, schema, { appendPath: true });          // Will error if schema contains other versions\n    }\n\n    // Scan schema for compiled parts\n\n    const compiler = internals.walk(schema);\n    if (!compiler) {\n        return exports.schema(root, schema, { appendPath: true });\n    }\n\n    return compiler.compile(compiler.root, schema);\n};\n\n\ninternals.walk = function (schema) {\n\n    if (typeof schema !== 'object') {\n        return null;\n    }\n\n    if (Array.isArray(schema)) {\n        for (const item of schema) {\n            const compiler = internals.walk(item);\n            if (compiler) {\n                return compiler;\n            }\n        }\n\n        return null;\n    }\n\n    const any = schema[Common.symbols.any];\n    if (any) {\n        return { root: schema[any.root], compile: any.compile };\n    }\n\n    Assert(Object.getPrototypeOf(schema) === Object.getPrototypeOf({}), 'Schema can only contain plain objects');\n\n    for (const key in schema) {\n        const compiler = internals.walk(schema[key]);\n        if (compiler) {\n            return compiler;\n        }\n    }\n\n    return null;\n};\n\n\ninternals.simple = function (value) {\n\n    return value === null || ['boolean', 'string', 'number'].includes(typeof value);\n};\n\n\nexports.when = function (schema, condition, options) {\n\n    if (options === undefined) {\n        Assert(condition && typeof condition === 'object', 'Missing options');\n\n        options = condition;\n        condition = Ref.create('.');\n    }\n\n    if (Array.isArray(options)) {\n        options = { switch: options };\n    }\n\n    Common.assertOptions(options, ['is', 'not', 'then', 'otherwise', 'switch', 'break']);\n\n    // Schema condition\n\n    if (Common.isSchema(condition)) {\n        Assert(options.is === undefined, '\"is\" can not be used with a schema condition');\n        Assert(options.not === undefined, '\"not\" can not be used with a schema condition');\n        Assert(options.switch === undefined, '\"switch\" can not be used with a schema condition');\n\n        return internals.condition(schema, { is: condition, then: options.then, otherwise: options.otherwise, break: options.break });\n    }\n\n    // Single condition\n\n    Assert(Ref.isRef(condition) || typeof condition === 'string', 'Invalid condition:', condition);\n    Assert(options.not === undefined || options.is === undefined, 'Cannot combine \"is\" with \"not\"');\n\n    if (options.switch === undefined) {\n        let rule = options;\n        if (options.not !== undefined) {\n            rule = { is: options.not, then: options.otherwise, otherwise: options.then, break: options.break };\n        }\n\n        let is = rule.is !== undefined ? schema.$_compile(rule.is) : schema.$_root.invalid(null, false, 0, '').required();\n        Assert(rule.then !== undefined || rule.otherwise !== undefined, 'options must have at least one of \"then\", \"otherwise\", or \"switch\"');\n        Assert(rule.break === undefined || rule.then === undefined || rule.otherwise === undefined, 'Cannot specify then, otherwise, and break all together');\n\n        if (options.is !== undefined &&\n            !Ref.isRef(options.is) &&\n            !Common.isSchema(options.is)) {\n\n            is = is.required();                     // Only apply required if this wasn't already a schema or a ref\n        }\n\n        return internals.condition(schema, { ref: exports.ref(condition), is, then: rule.then, otherwise: rule.otherwise, break: rule.break });\n    }\n\n    // Switch statement\n\n    Assert(Array.isArray(options.switch), '\"switch\" must be an array');\n    Assert(options.is === undefined, 'Cannot combine \"switch\" with \"is\"');\n    Assert(options.not === undefined, 'Cannot combine \"switch\" with \"not\"');\n    Assert(options.then === undefined, 'Cannot combine \"switch\" with \"then\"');\n\n    const rule = {\n        ref: exports.ref(condition),\n        switch: [],\n        break: options.break\n    };\n\n    for (let i = 0; i < options.switch.length; ++i) {\n        const test = options.switch[i];\n        const last = i === options.switch.length - 1;\n\n        Common.assertOptions(test, last ? ['is', 'then', 'otherwise'] : ['is', 'then']);\n\n        Assert(test.is !== undefined, 'Switch statement missing \"is\"');\n        Assert(test.then !== undefined, 'Switch statement missing \"then\"');\n\n        const item = {\n            is: schema.$_compile(test.is),\n            then: schema.$_compile(test.then)\n        };\n\n        if (!Ref.isRef(test.is) &&\n            !Common.isSchema(test.is)) {\n\n            item.is = item.is.required();           // Only apply required if this wasn't already a schema or a ref\n        }\n\n        if (last) {\n            Assert(options.otherwise === undefined || test.otherwise === undefined, 'Cannot specify \"otherwise\" inside and outside a \"switch\"');\n            const otherwise = options.otherwise !== undefined ? options.otherwise : test.otherwise;\n            if (otherwise !== undefined) {\n                Assert(rule.break === undefined, 'Cannot specify both otherwise and break');\n                item.otherwise = schema.$_compile(otherwise);\n            }\n        }\n\n        rule.switch.push(item);\n    }\n\n    return rule;\n};\n\n\ninternals.condition = function (schema, condition) {\n\n    for (const key of ['then', 'otherwise']) {\n        if (condition[key] === undefined) {\n            delete condition[key];\n        }\n        else {\n            condition[key] = schema.$_compile(condition[key]);\n        }\n    }\n\n    return condition;\n};\n","// DynamoDBService 구현\r\n// DynamoDB CRUD 작업 서비스\r\n\r\nconst { dynamodb } = require('../config/aws');\r\nconst { info, error, debug } = require('../utils/logger');\r\nconst environment = require('../config/environment');\r\n\r\n/**\r\n * DynamoDB 서비스 클래스\r\n */\r\nclass DynamoDBService {\r\n  constructor() {\r\n    this.tableName = environment.dynamodbTableName;\r\n    this.client = dynamodb;\r\n  }\r\n\r\n  /**\r\n   * 아이템 생성/업데이트\r\n   * @param {Object} item - 저장할 아이템\r\n   * @returns {Promise<Object>} 결과\r\n   */\r\n  async putItem(item) {\r\n    try {\r\n      debug('DynamoDB putItem', { tableName: this.tableName, itemId: item.id });\r\n\r\n      const params = {\r\n        TableName: this.tableName,\r\n        Item: item,\r\n        ReturnValues: 'ALL_OLD',\r\n      };\r\n\r\n      const result = await this.client.put(params).promise();\r\n      \r\n      info('DynamoDB item saved successfully', { \r\n        itemId: item.id,\r\n        isUpdate: !!result.Attributes,\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        data: item,\r\n        isUpdate: !!result.Attributes,\r\n        previousData: result.Attributes,\r\n      };\r\n    } catch (err) {\r\n      error('Failed to put item to DynamoDB', err, { \r\n        tableName: this.tableName,\r\n        itemId: item.id,\r\n      });\r\n      \r\n      throw new Error(`DynamoDB put operation failed: ${err.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 아이템 조회\r\n   * @param {string} id - 아이템 ID\r\n   * @returns {Promise<Object|null>} 아이템 또는 null\r\n   */\r\n  async getItem(id) {\r\n    try {\r\n      debug('DynamoDB getItem', { tableName: this.tableName, id });\r\n\r\n      const params = {\r\n        TableName: this.tableName,\r\n        Key: { id },\r\n      };\r\n\r\n      const result = await this.client.get(params).promise();\r\n      \r\n      if (!result.Item) {\r\n        debug('Item not found', { id });\r\n        return null;\r\n      }\r\n\r\n      info('DynamoDB item retrieved successfully', { id });\r\n      return result.Item;\r\n    } catch (err) {\r\n      error('Failed to get item from DynamoDB', err, { \r\n        tableName: this.tableName,\r\n        id,\r\n      });\r\n      \r\n      throw new Error(`DynamoDB get operation failed: ${err.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 아이템 삭제\r\n   * @param {string} id - 아이템 ID\r\n   * @returns {Promise<Object>} 결과\r\n   */\r\n  async deleteItem(id) {\r\n    try {\r\n      debug('DynamoDB deleteItem', { tableName: this.tableName, id });\r\n\r\n      const params = {\r\n        TableName: this.tableName,\r\n        Key: { id },\r\n        ReturnValues: 'ALL_OLD',\r\n      };\r\n\r\n      const result = await this.client.delete(params).promise();\r\n      \r\n      info('DynamoDB item deleted successfully', { \r\n        id,\r\n        existed: !!result.Attributes,\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        existed: !!result.Attributes,\r\n        deletedData: result.Attributes,\r\n      };\r\n    } catch (err) {\r\n      error('Failed to delete item from DynamoDB', err, { \r\n        tableName: this.tableName,\r\n        id,\r\n      });\r\n      \r\n      throw new Error(`DynamoDB delete operation failed: ${err.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 위치 기반 아이템 조회\r\n   * @param {string} locationId - 위치 ID\r\n   * @param {Object} options - 조회 옵션\r\n   * @returns {Promise<Array>} 아이템 배열\r\n   */\r\n  async getItemsByLocation(locationId, options = {}) {\r\n    try {\r\n      debug('DynamoDB getItemsByLocation', { \r\n        tableName: this.tableName,\r\n        locationId,\r\n        options,\r\n      });\r\n\r\n      const params = {\r\n        TableName: this.tableName,\r\n        IndexName: 'LocationIndex',\r\n        KeyConditionExpression: 'locationId = :locationId',\r\n        ExpressionAttributeValues: {\r\n          ':locationId': locationId,\r\n        },\r\n      };\r\n\r\n      // 정렬 옵션\r\n      if (options.sortDescending) {\r\n        params.ScanIndexForward = false;\r\n      }\r\n\r\n      // 제한 옵션\r\n      if (options.limit) {\r\n        params.Limit = options.limit;\r\n      }\r\n\r\n      // 시작 키 (페이지네이션)\r\n      if (options.exclusiveStartKey) {\r\n        params.ExclusiveStartKey = options.exclusiveStartKey;\r\n      }\r\n\r\n      // 필터 표현식\r\n      if (options.status) {\r\n        params.FilterExpression = '#status = :status';\r\n        params.ExpressionAttributeNames = { '#status': 'status' };\r\n        params.ExpressionAttributeValues[':status'] = options.status;\r\n      }\r\n\r\n      const result = await this.client.query(params).promise();\r\n      \r\n      info('DynamoDB location query completed', { \r\n        locationId,\r\n        itemCount: result.Items.length,\r\n        hasMore: !!result.LastEvaluatedKey,\r\n      });\r\n\r\n      return {\r\n        items: result.Items,\r\n        lastEvaluatedKey: result.LastEvaluatedKey,\r\n        count: result.Count,\r\n        scannedCount: result.ScannedCount,\r\n      };\r\n    } catch (err) {\r\n      error('Failed to query items by location', err, { \r\n        tableName: this.tableName,\r\n        locationId,\r\n      });\r\n      \r\n      throw new Error(`DynamoDB location query failed: ${err.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * API 타입별 아이템 조회\r\n   * @param {string} apiType - API 타입\r\n   * @param {Object} options - 조회 옵션\r\n   * @returns {Promise<Array>} 아이템 배열\r\n   */\r\n  async getItemsByAPIType(apiType, options = {}) {\r\n    try {\r\n      debug('DynamoDB getItemsByAPIType', { \r\n        tableName: this.tableName,\r\n        apiType,\r\n        options,\r\n      });\r\n\r\n      const params = {\r\n        TableName: this.tableName,\r\n        IndexName: 'APITypeIndex',\r\n        KeyConditionExpression: 'apiType = :apiType',\r\n        ExpressionAttributeValues: {\r\n          ':apiType': apiType,\r\n        },\r\n      };\r\n\r\n      // 시간 범위 필터\r\n      if (options.fromTime) {\r\n        params.KeyConditionExpression += ' AND #timestamp >= :fromTime';\r\n        params.ExpressionAttributeNames = { '#timestamp': 'timestamp' };\r\n        params.ExpressionAttributeValues[':fromTime'] = options.fromTime;\r\n      }\r\n\r\n      if (options.toTime) {\r\n        if (options.fromTime) {\r\n          params.KeyConditionExpression += ' AND #timestamp <= :toTime';\r\n        } else {\r\n          params.KeyConditionExpression += ' AND #timestamp <= :toTime';\r\n          params.ExpressionAttributeNames = { '#timestamp': 'timestamp' };\r\n        }\r\n        params.ExpressionAttributeValues[':toTime'] = options.toTime;\r\n      }\r\n\r\n      // 정렬 및 제한\r\n      if (options.sortDescending) {\r\n        params.ScanIndexForward = false;\r\n      }\r\n\r\n      if (options.limit) {\r\n        params.Limit = options.limit;\r\n      }\r\n\r\n      const result = await this.client.query(params).promise();\r\n      \r\n      info('DynamoDB API type query completed', { \r\n        apiType,\r\n        itemCount: result.Items.length,\r\n      });\r\n\r\n      return {\r\n        items: result.Items,\r\n        lastEvaluatedKey: result.LastEvaluatedKey,\r\n        count: result.Count,\r\n      };\r\n    } catch (err) {\r\n      error('Failed to query items by API type', err, { \r\n        tableName: this.tableName,\r\n        apiType,\r\n      });\r\n      \r\n      throw new Error(`DynamoDB API type query failed: ${err.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 상태별 아이템 조회\r\n   * @param {string} status - 상태 (active, resolved)\r\n   * @param {Object} options - 조회 옵션\r\n   * @returns {Promise<Array>} 아이템 배열\r\n   */\r\n  async getItemsByStatus(status, options = {}) {\r\n    try {\r\n      debug('DynamoDB getItemsByStatus', { \r\n        tableName: this.tableName,\r\n        status,\r\n        options,\r\n      });\r\n\r\n      const params = {\r\n        TableName: this.tableName,\r\n        IndexName: 'StatusIndex',\r\n        KeyConditionExpression: '#status = :status',\r\n        ExpressionAttributeNames: {\r\n          '#status': 'status',\r\n        },\r\n        ExpressionAttributeValues: {\r\n          ':status': status,\r\n        },\r\n      };\r\n\r\n      // 시간 범위 필터\r\n      if (options.fromTime || options.toTime) {\r\n        params.ExpressionAttributeNames['#timestamp'] = 'timestamp';\r\n        \r\n        if (options.fromTime && options.toTime) {\r\n          params.KeyConditionExpression += ' AND #timestamp BETWEEN :fromTime AND :toTime';\r\n          params.ExpressionAttributeValues[':fromTime'] = options.fromTime;\r\n          params.ExpressionAttributeValues[':toTime'] = options.toTime;\r\n        } else if (options.fromTime) {\r\n          params.KeyConditionExpression += ' AND #timestamp >= :fromTime';\r\n          params.ExpressionAttributeValues[':fromTime'] = options.fromTime;\r\n        } else if (options.toTime) {\r\n          params.KeyConditionExpression += ' AND #timestamp <= :toTime';\r\n          params.ExpressionAttributeValues[':toTime'] = options.toTime;\r\n        }\r\n      }\r\n\r\n      if (options.limit) {\r\n        params.Limit = options.limit;\r\n      }\r\n\r\n      const result = await this.client.query(params).promise();\r\n      \r\n      info('DynamoDB status query completed', { \r\n        status,\r\n        itemCount: result.Items.length,\r\n      });\r\n\r\n      return {\r\n        items: result.Items,\r\n        lastEvaluatedKey: result.LastEvaluatedKey,\r\n        count: result.Count,\r\n      };\r\n    } catch (err) {\r\n      error('Failed to query items by status', err, { \r\n        tableName: this.tableName,\r\n        status,\r\n      });\r\n      \r\n      throw new Error(`DynamoDB status query failed: ${err.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 배치 쓰기 작업\r\n   * @param {Array} items - 저장할 아이템 배열\r\n   * @returns {Promise<Object>} 결과\r\n   */\r\n  async batchWriteItems(items) {\r\n    try {\r\n      debug('DynamoDB batchWriteItems', { \r\n        tableName: this.tableName,\r\n        itemCount: items.length,\r\n      });\r\n\r\n      if (!items || items.length === 0) {\r\n        return { success: true, processedItems: 0, unprocessedItems: [] };\r\n      }\r\n\r\n      // DynamoDB 배치 쓰기는 최대 25개 아이템\r\n      const batches = [];\r\n      for (let i = 0; i < items.length; i += 25) {\r\n        batches.push(items.slice(i, i + 25));\r\n      }\r\n\r\n      let processedItems = 0;\r\n      let unprocessedItems = [];\r\n\r\n      for (const batch of batches) {\r\n        const params = {\r\n          RequestItems: {\r\n            [this.tableName]: batch.map(item => ({\r\n              PutRequest: {\r\n                Item: item,\r\n              },\r\n            })),\r\n          },\r\n        };\r\n\r\n        const result = await this.client.batchWrite(params).promise();\r\n        \r\n        processedItems += batch.length;\r\n        \r\n        // 처리되지 않은 아이템 처리\r\n        if (result.UnprocessedItems && result.UnprocessedItems[this.tableName]) {\r\n          unprocessedItems.push(...result.UnprocessedItems[this.tableName]);\r\n        }\r\n      }\r\n\r\n      info('DynamoDB batch write completed', { \r\n        totalItems: items.length,\r\n        processedItems,\r\n        unprocessedItems: unprocessedItems.length,\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        processedItems,\r\n        unprocessedItems,\r\n        totalItems: items.length,\r\n      };\r\n    } catch (err) {\r\n      error('Failed to batch write items', err, { \r\n        tableName: this.tableName,\r\n        itemCount: items.length,\r\n      });\r\n      \r\n      throw new Error(`DynamoDB batch write failed: ${err.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 배치 삭제 작업\r\n   * @param {Array<string>} ids - 삭제할 아이템 ID 배열\r\n   * @returns {Promise<Object>} 결과\r\n   */\r\n  async batchDeleteItems(ids) {\r\n    try {\r\n      debug('DynamoDB batchDeleteItems', { \r\n        tableName: this.tableName,\r\n        itemCount: ids.length,\r\n      });\r\n\r\n      if (!ids || ids.length === 0) {\r\n        return { success: true, deletedItems: 0, unprocessedItems: [] };\r\n      }\r\n\r\n      // DynamoDB 배치 삭제는 최대 25개 아이템\r\n      const batches = [];\r\n      for (let i = 0; i < ids.length; i += 25) {\r\n        batches.push(ids.slice(i, i + 25));\r\n      }\r\n\r\n      let deletedItems = 0;\r\n      let unprocessedItems = [];\r\n\r\n      for (const batch of batches) {\r\n        const params = {\r\n          RequestItems: {\r\n            [this.tableName]: batch.map(id => ({\r\n              DeleteRequest: {\r\n                Key: { id },\r\n              },\r\n            })),\r\n          },\r\n        };\r\n\r\n        const result = await this.client.batchWrite(params).promise();\r\n        \r\n        deletedItems += batch.length;\r\n        \r\n        // 처리되지 않은 아이템 처리\r\n        if (result.UnprocessedItems && result.UnprocessedItems[this.tableName]) {\r\n          unprocessedItems.push(...result.UnprocessedItems[this.tableName]);\r\n        }\r\n      }\r\n\r\n      info('DynamoDB batch delete completed', { \r\n        totalItems: ids.length,\r\n        deletedItems,\r\n        unprocessedItems: unprocessedItems.length,\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        deletedItems,\r\n        unprocessedItems,\r\n        totalItems: ids.length,\r\n      };\r\n    } catch (err) {\r\n      error('Failed to batch delete items', err, { \r\n        tableName: this.tableName,\r\n        itemCount: ids.length,\r\n      });\r\n      \r\n      throw new Error(`DynamoDB batch delete failed: ${err.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 전체 스캔 (주의: 비용이 많이 듦)\r\n   * @param {Object} options - 스캔 옵션\r\n   * @returns {Promise<Array>} 아이템 배열\r\n   */\r\n  async scanItems(options = {}) {\r\n    try {\r\n      debug('DynamoDB scanItems', { \r\n        tableName: this.tableName,\r\n        options,\r\n      });\r\n\r\n      const params = {\r\n        TableName: this.tableName,\r\n      };\r\n\r\n      // 필터 표현식\r\n      if (options.filterExpression) {\r\n        params.FilterExpression = options.filterExpression;\r\n      }\r\n\r\n      if (options.expressionAttributeNames) {\r\n        params.ExpressionAttributeNames = options.expressionAttributeNames;\r\n      }\r\n\r\n      if (options.expressionAttributeValues) {\r\n        params.ExpressionAttributeValues = options.expressionAttributeValues;\r\n      }\r\n\r\n      // 제한\r\n      if (options.limit) {\r\n        params.Limit = options.limit;\r\n      }\r\n\r\n      // 시작 키\r\n      if (options.exclusiveStartKey) {\r\n        params.ExclusiveStartKey = options.exclusiveStartKey;\r\n      }\r\n\r\n      const result = await this.client.scan(params).promise();\r\n      \r\n      info('DynamoDB scan completed', { \r\n        itemCount: result.Items.length,\r\n        scannedCount: result.ScannedCount,\r\n        hasMore: !!result.LastEvaluatedKey,\r\n      });\r\n\r\n      return {\r\n        items: result.Items,\r\n        lastEvaluatedKey: result.LastEvaluatedKey,\r\n        count: result.Count,\r\n        scannedCount: result.ScannedCount,\r\n      };\r\n    } catch (err) {\r\n      error('Failed to scan items', err, { \r\n        tableName: this.tableName,\r\n      });\r\n      \r\n      throw new Error(`DynamoDB scan failed: ${err.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 조건부 업데이트\r\n   * @param {string} id - 아이템 ID\r\n   * @param {Object} updateExpression - 업데이트 표현식\r\n   * @param {Object} conditionExpression - 조건 표현식\r\n   * @returns {Promise<Object>} 결과\r\n   */\r\n  async conditionalUpdate(id, updateExpression, conditionExpression = null) {\r\n    try {\r\n      debug('DynamoDB conditionalUpdate', { \r\n        tableName: this.tableName,\r\n        id,\r\n        updateExpression,\r\n        conditionExpression,\r\n      });\r\n\r\n      const params = {\r\n        TableName: this.tableName,\r\n        Key: { id },\r\n        UpdateExpression: updateExpression.expression,\r\n        ExpressionAttributeValues: updateExpression.values,\r\n        ReturnValues: 'ALL_NEW',\r\n      };\r\n\r\n      if (updateExpression.names) {\r\n        params.ExpressionAttributeNames = updateExpression.names;\r\n      }\r\n\r\n      if (conditionExpression) {\r\n        params.ConditionExpression = conditionExpression.expression;\r\n        if (conditionExpression.values) {\r\n          params.ExpressionAttributeValues = {\r\n            ...params.ExpressionAttributeValues,\r\n            ...conditionExpression.values,\r\n          };\r\n        }\r\n        if (conditionExpression.names) {\r\n          params.ExpressionAttributeNames = {\r\n            ...params.ExpressionAttributeNames,\r\n            ...conditionExpression.names,\r\n          };\r\n        }\r\n      }\r\n\r\n      const result = await this.client.update(params).promise();\r\n      \r\n      info('DynamoDB conditional update completed', { \r\n        id,\r\n        updated: !!result.Attributes,\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        data: result.Attributes,\r\n      };\r\n    } catch (err) {\r\n      if (err.code === 'ConditionalCheckFailedException') {\r\n        info('DynamoDB conditional update failed - condition not met', { id });\r\n        return {\r\n          success: false,\r\n          reason: 'CONDITION_NOT_MET',\r\n          error: err.message,\r\n        };\r\n      }\r\n\r\n      error('Failed to conditionally update item', err, { \r\n        tableName: this.tableName,\r\n        id,\r\n      });\r\n      \r\n      throw new Error(`DynamoDB conditional update failed: ${err.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 트랜잭션 쓰기\r\n   * @param {Array} transactItems - 트랜잭션 아이템 배열\r\n   * @returns {Promise<Object>} 결과\r\n   */\r\n  async transactWrite(transactItems) {\r\n    try {\r\n      debug('DynamoDB transactWrite', { \r\n        tableName: this.tableName,\r\n        itemCount: transactItems.length,\r\n      });\r\n\r\n      const params = {\r\n        TransactItems: transactItems.map(item => {\r\n          if (item.Put) {\r\n            return {\r\n              Put: {\r\n                TableName: this.tableName,\r\n                ...item.Put,\r\n              },\r\n            };\r\n          }\r\n          if (item.Update) {\r\n            return {\r\n              Update: {\r\n                TableName: this.tableName,\r\n                ...item.Update,\r\n              },\r\n            };\r\n          }\r\n          if (item.Delete) {\r\n            return {\r\n              Delete: {\r\n                TableName: this.tableName,\r\n                ...item.Delete,\r\n              },\r\n            };\r\n          }\r\n          return item;\r\n        }),\r\n      };\r\n\r\n      await this.client.transactWrite(params).promise();\r\n      \r\n      info('DynamoDB transaction write completed', { \r\n        itemCount: transactItems.length,\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        processedItems: transactItems.length,\r\n      };\r\n    } catch (err) {\r\n      error('Failed to execute transaction write', err, { \r\n        tableName: this.tableName,\r\n        itemCount: transactItems.length,\r\n      });\r\n      \r\n      throw new Error(`DynamoDB transaction write failed: ${err.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 테이블 상태 확인\r\n   * @returns {Promise<Object>} 테이블 상태\r\n   */\r\n  async getTableStatus() {\r\n    try {\r\n      const params = {\r\n        TableName: this.tableName,\r\n      };\r\n\r\n      const result = await this.client.describeTable(params).promise();\r\n      \r\n      return {\r\n        tableName: result.Table.TableName,\r\n        status: result.Table.TableStatus,\r\n        itemCount: result.Table.ItemCount,\r\n        tableSize: result.Table.TableSizeBytes,\r\n        creationDateTime: result.Table.CreationDateTime,\r\n        billingMode: result.Table.BillingModeSummary?.BillingMode,\r\n        indexes: result.Table.GlobalSecondaryIndexes?.map(index => ({\r\n          name: index.IndexName,\r\n          status: index.IndexStatus,\r\n          itemCount: index.ItemCount,\r\n        })),\r\n      };\r\n    } catch (err) {\r\n      error('Failed to get table status', err, { \r\n        tableName: this.tableName,\r\n      });\r\n      \r\n      throw new Error(`Failed to get table status: ${err.message}`);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = DynamoDBService;","'use strict';\n\nconst Assert = require('./assert');\n\n\nconst internals = {};\n\n\nmodule.exports = function (obj, chain, options) {\n\n    if (chain === false ||\n        chain === null ||\n        chain === undefined) {\n\n        return obj;\n    }\n\n    options = options || {};\n    if (typeof options === 'string') {\n        options = { separator: options };\n    }\n\n    const isChainArray = Array.isArray(chain);\n\n    Assert(!isChainArray || !options.separator, 'Separator option is not valid for array-based chain');\n\n    const path = isChainArray ? chain : chain.split(options.separator || '.');\n    let ref = obj;\n    for (let i = 0; i < path.length; ++i) {\n        let key = path[i];\n        const type = options.iterables && internals.iterables(ref);\n\n        if (Array.isArray(ref) ||\n            type === 'set') {\n\n            const number = Number(key);\n            if (Number.isInteger(number)) {\n                key = number < 0 ? ref.length + number : number;\n            }\n        }\n\n        if (!ref ||\n            typeof ref === 'function' && options.functions === false ||         // Defaults to true\n            !type && ref[key] === undefined) {\n\n            Assert(!options.strict || i + 1 === path.length, 'Missing segment', key, 'in reach path ', chain);\n            Assert(typeof ref === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);\n            ref = options.default;\n            break;\n        }\n\n        if (!type) {\n            ref = ref[key];\n        }\n        else if (type === 'set') {\n            ref = [...ref][key];\n        }\n        else {  // type === 'map'\n            ref = ref.get(key);\n        }\n    }\n\n    return ref;\n};\n\n\ninternals.iterables = function (ref) {\n\n    if (ref instanceof Set) {\n        return 'set';\n    }\n\n    if (ref instanceof Map) {\n        return 'map';\n    }\n};\n","'use strict';\n\nconst internals = {\n    operators: ['!', '^', '*', '/', '%', '+', '-', '<', '<=', '>', '>=', '==', '!=', '&&', '||', '??'],\n    operatorCharacters: ['!', '^', '*', '/', '%', '+', '-', '<', '=', '>', '&', '|', '?'],\n    operatorsOrder: [['^'], ['*', '/', '%'], ['+', '-'], ['<', '<=', '>', '>='], ['==', '!='], ['&&'], ['||', '??']],\n    operatorsPrefix: ['!', 'n'],\n\n    literals: {\n        '\"': '\"',\n        '`': '`',\n        '\\'': '\\'',\n        '[': ']'\n    },\n\n    numberRx: /^(?:[0-9]*(\\.[0-9]*)?){1}$/,\n    tokenRx: /^[\\w\\$\\#\\.\\@\\:\\{\\}]+$/,\n\n    symbol: Symbol('formula'),\n    settings: Symbol('settings')\n};\n\n\nexports.Parser = class {\n\n    constructor(string, options = {}) {\n\n        if (!options[internals.settings] &&\n            options.constants) {\n\n            for (const constant in options.constants) {\n                const value = options.constants[constant];\n                if (value !== null &&\n                    !['boolean', 'number', 'string'].includes(typeof value)) {\n\n                    throw new Error(`Formula constant ${constant} contains invalid ${typeof value} value type`);\n                }\n            }\n        }\n\n        this.settings = options[internals.settings] ? options : Object.assign({ [internals.settings]: true, constants: {}, functions: {} }, options);\n        this.single = null;\n\n        this._parts = null;\n        this._parse(string);\n    }\n\n    _parse(string) {\n\n        let parts = [];\n        let current = '';\n        let parenthesis = 0;\n        let literal = false;\n\n        const flush = (inner) => {\n\n            if (parenthesis) {\n                throw new Error('Formula missing closing parenthesis');\n            }\n\n            const last = parts.length ? parts[parts.length - 1] : null;\n\n            if (!literal &&\n                !current &&\n                !inner) {\n\n                return;\n            }\n\n            if (last &&\n                last.type === 'reference' &&\n                inner === ')') {                                                                // Function\n\n                last.type = 'function';\n                last.value = this._subFormula(current, last.value);\n                current = '';\n                return;\n            }\n\n            if (inner === ')') {                                                                // Segment\n                const sub = new exports.Parser(current, this.settings);\n                parts.push({ type: 'segment', value: sub });\n            }\n            else if (literal) {\n                if (literal === ']') {                                                          // Reference\n                    parts.push({ type: 'reference', value: current });\n                    current = '';\n                    return;\n                }\n\n                parts.push({ type: 'literal', value: current });                                // Literal\n            }\n            else if (internals.operatorCharacters.includes(current)) {                          // Operator\n                if (last &&\n                    last.type === 'operator' &&\n                    internals.operators.includes(last.value + current)) {                       // 2 characters operator\n\n                    last.value += current;\n                }\n                else {\n                    parts.push({ type: 'operator', value: current });\n                }\n            }\n            else if (current.match(internals.numberRx)) {                                       // Number\n                parts.push({ type: 'constant', value: parseFloat(current) });\n            }\n            else if (this.settings.constants[current] !== undefined) {                          // Constant\n                parts.push({ type: 'constant', value: this.settings.constants[current] });\n            }\n            else {                                                                              // Reference\n                if (!current.match(internals.tokenRx)) {\n                    throw new Error(`Formula contains invalid token: ${current}`);\n                }\n\n                parts.push({ type: 'reference', value: current });\n            }\n\n            current = '';\n        };\n\n        for (const c of string) {\n            if (literal) {\n                if (c === literal) {\n                    flush();\n                    literal = false;\n                }\n                else {\n                    current += c;\n                }\n            }\n            else if (parenthesis) {\n                if (c === '(') {\n                    current += c;\n                    ++parenthesis;\n                }\n                else if (c === ')') {\n                    --parenthesis;\n                    if (!parenthesis) {\n                        flush(c);\n                    }\n                    else {\n                        current += c;\n                    }\n                }\n                else {\n                    current += c;\n                }\n            }\n            else if (c in internals.literals) {\n                literal = internals.literals[c];\n            }\n            else if (c === '(') {\n                flush();\n                ++parenthesis;\n            }\n            else if (internals.operatorCharacters.includes(c)) {\n                flush();\n                current = c;\n                flush();\n            }\n            else if (c !== ' ') {\n                current += c;\n            }\n            else {\n                flush();\n            }\n        }\n\n        flush();\n\n        // Replace prefix - to internal negative operator\n\n        parts = parts.map((part, i) => {\n\n            if (part.type !== 'operator' ||\n                part.value !== '-' ||\n                i && parts[i - 1].type !== 'operator') {\n\n                return part;\n            }\n\n            return { type: 'operator', value: 'n' };\n        });\n\n        // Validate tokens order\n\n        let operator = false;\n        for (const part of parts) {\n            if (part.type === 'operator') {\n                if (internals.operatorsPrefix.includes(part.value)) {\n                    continue;\n                }\n\n                if (!operator) {\n                    throw new Error('Formula contains an operator in invalid position');\n                }\n\n                if (!internals.operators.includes(part.value)) {\n                    throw new Error(`Formula contains an unknown operator ${part.value}`);\n                }\n            }\n            else if (operator) {\n                throw new Error('Formula missing expected operator');\n            }\n\n            operator = !operator;\n        }\n\n        if (!operator) {\n            throw new Error('Formula contains invalid trailing operator');\n        }\n\n        // Identify single part\n\n        if (parts.length === 1 &&\n            ['reference', 'literal', 'constant'].includes(parts[0].type)) {\n\n            this.single = { type: parts[0].type === 'reference' ? 'reference' : 'value', value: parts[0].value };\n        }\n\n        // Process parts\n\n        this._parts = parts.map((part) => {\n\n            // Operators\n\n            if (part.type === 'operator') {\n                return internals.operatorsPrefix.includes(part.value) ? part : part.value;\n            }\n\n            // Literals, constants, segments\n\n            if (part.type !== 'reference') {\n                return part.value;\n            }\n\n            // References\n\n            if (this.settings.tokenRx &&\n                !this.settings.tokenRx.test(part.value)) {\n\n                throw new Error(`Formula contains invalid reference ${part.value}`);\n            }\n\n            if (this.settings.reference) {\n                return this.settings.reference(part.value);\n            }\n\n            return internals.reference(part.value);\n        });\n    }\n\n    _subFormula(string, name) {\n\n        const method = this.settings.functions[name];\n        if (typeof method !== 'function') {\n            throw new Error(`Formula contains unknown function ${name}`);\n        }\n\n        let args = [];\n        if (string) {\n            let current = '';\n            let parenthesis = 0;\n            let literal = false;\n\n            const flush = () => {\n\n                if (!current) {\n                    throw new Error(`Formula contains function ${name} with invalid arguments ${string}`);\n                }\n\n                args.push(current);\n                current = '';\n            };\n\n            for (let i = 0; i < string.length; ++i) {\n                const c = string[i];\n                if (literal) {\n                    current += c;\n                    if (c === literal) {\n                        literal = false;\n                    }\n                }\n                else if (c in internals.literals &&\n                    !parenthesis) {\n\n                    current += c;\n                    literal = internals.literals[c];\n                }\n                else if (c === ',' &&\n                    !parenthesis) {\n\n                    flush();\n                }\n                else {\n                    current += c;\n                    if (c === '(') {\n                        ++parenthesis;\n                    }\n                    else if (c === ')') {\n                        --parenthesis;\n                    }\n                }\n            }\n\n            flush();\n        }\n\n        args = args.map((arg) => new exports.Parser(arg, this.settings));\n\n        return function (context) {\n\n            const innerValues = [];\n            for (const arg of args) {\n                innerValues.push(arg.evaluate(context));\n            }\n\n            return method.call(context, ...innerValues);\n        };\n    }\n\n    evaluate(context) {\n\n        const parts = this._parts.slice();\n\n        // Prefix operators\n\n        for (let i = parts.length - 2; i >= 0; --i) {\n            const part = parts[i];\n            if (part &&\n                part.type === 'operator') {\n\n                const current = parts[i + 1];\n                parts.splice(i + 1, 1);\n                const value = internals.evaluate(current, context);\n                parts[i] = internals.single(part.value, value);\n            }\n        }\n\n        // Left-right operators\n\n        internals.operatorsOrder.forEach((set) => {\n\n            for (let i = 1; i < parts.length - 1;) {\n                if (set.includes(parts[i])) {\n                    const operator = parts[i];\n                    const left = internals.evaluate(parts[i - 1], context);\n                    const right = internals.evaluate(parts[i + 1], context);\n\n                    parts.splice(i, 2);\n                    const result = internals.calculate(operator, left, right);\n                    parts[i - 1] = result === 0 ? 0 : result;                               // Convert -0\n                }\n                else {\n                    i += 2;\n                }\n            }\n        });\n\n        return internals.evaluate(parts[0], context);\n    }\n};\n\n\nexports.Parser.prototype[internals.symbol] = true;\n\n\ninternals.reference = function (name) {\n\n    return function (context) {\n\n        return context && context[name] !== undefined ? context[name] : null;\n    };\n};\n\n\ninternals.evaluate = function (part, context) {\n\n    if (part === null) {\n        return null;\n    }\n\n    if (typeof part === 'function') {\n        return part(context);\n    }\n\n    if (part[internals.symbol]) {\n        return part.evaluate(context);\n    }\n\n    return part;\n};\n\n\ninternals.single = function (operator, value) {\n\n    if (operator === '!') {\n        return value ? false : true;\n    }\n\n    // operator === 'n'\n\n    const negative = -value;\n    if (negative === 0) {       // Override -0\n        return 0;\n    }\n\n    return negative;\n};\n\n\ninternals.calculate = function (operator, left, right) {\n\n    if (operator === '??') {\n        return internals.exists(left) ? left : right;\n    }\n\n    if (typeof left === 'string' ||\n        typeof right === 'string') {\n\n        if (operator === '+') {\n            left = internals.exists(left) ? left : '';\n            right = internals.exists(right) ? right : '';\n            return left + right;\n        }\n    }\n    else {\n        switch (operator) {\n            case '^': return Math.pow(left, right);\n            case '*': return left * right;\n            case '/': return left / right;\n            case '%': return left % right;\n            case '+': return left + right;\n            case '-': return left - right;\n        }\n    }\n\n    switch (operator) {\n        case '<': return left < right;\n        case '<=': return left <= right;\n        case '>': return left > right;\n        case '>=': return left >= right;\n        case '==': return left === right;\n        case '!=': return left !== right;\n        case '&&': return left && right;\n        case '||': return left || right;\n    }\n\n    return null;\n};\n\n\ninternals.exists = function (value) {\n\n    return value !== null && value !== undefined;\n};\n","'use strict';\n\nconst internals = {};\n\n\nexports = module.exports = {\n    array: Array.prototype,\n    buffer: Buffer && Buffer.prototype,             // $lab:coverage:ignore$\n    date: Date.prototype,\n    error: Error.prototype,\n    generic: Object.prototype,\n    map: Map.prototype,\n    promise: Promise.prototype,\n    regex: RegExp.prototype,\n    set: Set.prototype,\n    weakMap: WeakMap.prototype,\n    weakSet: WeakSet.prototype\n};\n\n\ninternals.typeMap = new Map([\n    ['[object Error]', exports.error],\n    ['[object Map]', exports.map],\n    ['[object Promise]', exports.promise],\n    ['[object Set]', exports.set],\n    ['[object WeakMap]', exports.weakMap],\n    ['[object WeakSet]', exports.weakSet]\n]);\n\n\nexports.getInternalProto = function (obj) {\n\n    if (Array.isArray(obj)) {\n        return exports.array;\n    }\n\n    if (Buffer && obj instanceof Buffer) {          // $lab:coverage:ignore$\n        return exports.buffer;\n    }\n\n    if (obj instanceof Date) {\n        return exports.date;\n    }\n\n    if (obj instanceof RegExp) {\n        return exports.regex;\n    }\n\n    if (obj instanceof Error) {\n        return exports.error;\n    }\n\n    const objName = Object.prototype.toString.call(obj);\n    return internals.typeMap.get(objName) || exports.generic;\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst AssertError = require('@hapi/hoek/lib/error');\n\nconst Pkg = require('../package.json');\n\nlet Messages;\nlet Schemas;\n\n\nconst internals = {\n    isoDate: /^(?:[-+]\\d{2})?(?:\\d{4}(?!\\d{2}\\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\\1(?:[12]\\d|0[1-9]|3[01]))?|W(?:[0-4]\\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\\d|[12]\\d{2}|3(?:[0-5]\\d|6[1-6])))(?![T]$|[T][\\d]+Z$)(?:[T\\s](?:(?:(?:[01]\\d|2[0-3])(?:(:?)[0-5]\\d)?|24\\:?00)(?:[.,]\\d+(?!:))?)(?:\\2[0-5]\\d(?:[.,]\\d+)?)?(?:[Z]|(?:[+-])(?:[01]\\d|2[0-3])(?::?[0-5]\\d)?)?)?)?$/\n};\n\n\nexports.version = Pkg.version;\n\n\nexports.defaults = {\n    abortEarly: true,\n    allowUnknown: false,\n    artifacts: false,\n    cache: true,\n    context: null,\n    convert: true,\n    dateFormat: 'iso',\n    errors: {\n        escapeHtml: false,\n        label: 'path',\n        language: null,\n        render: true,\n        stack: false,\n        wrap: {\n            label: '\"',\n            array: '[]'\n        }\n    },\n    externals: true,\n    messages: {},\n    nonEnumerables: false,\n    noDefaults: false,\n    presence: 'optional',\n    skipFunctions: false,\n    stripUnknown: false,\n    warnings: false\n};\n\n\nexports.symbols = {\n    any: Symbol.for('@hapi/joi/schema'),            // Used to internally identify any-based types (shared with other joi versions)\n    arraySingle: Symbol('arraySingle'),\n    deepDefault: Symbol('deepDefault'),\n    errors: Symbol('errors'),\n    literal: Symbol('literal'),\n    override: Symbol('override'),\n    parent: Symbol('parent'),\n    prefs: Symbol('prefs'),\n    ref: Symbol('ref'),\n    template: Symbol('template'),\n    values: Symbol('values')\n};\n\n\nexports.assertOptions = function (options, keys, name = 'Options') {\n\n    Assert(options && typeof options === 'object' && !Array.isArray(options), 'Options must be of type object');\n    const unknownKeys = Object.keys(options).filter((k) => !keys.includes(k));\n    Assert(unknownKeys.length === 0, `${name} contain unknown keys: ${unknownKeys}`);\n};\n\n\nexports.checkPreferences = function (prefs) {\n\n    Schemas = Schemas || require('./schemas');\n\n    const result = Schemas.preferences.validate(prefs);\n\n    if (result.error) {\n        throw new AssertError([result.error.details[0].message]);\n    }\n};\n\n\nexports.compare = function (a, b, operator) {\n\n    switch (operator) {\n        case '=': return a === b;\n        case '>': return a > b;\n        case '<': return a < b;\n        case '>=': return a >= b;\n        case '<=': return a <= b;\n    }\n};\n\n\nexports.default = function (value, defaultValue) {\n\n    return value === undefined ? defaultValue : value;\n};\n\n\nexports.isIsoDate = function (date) {\n\n    return internals.isoDate.test(date);\n};\n\n\nexports.isNumber = function (value) {\n\n    return typeof value === 'number' && !isNaN(value);\n};\n\n\nexports.isResolvable = function (obj) {\n\n    if (!obj) {\n        return false;\n    }\n\n    return obj[exports.symbols.ref] || obj[exports.symbols.template];\n};\n\n\nexports.isSchema = function (schema, options = {}) {\n\n    const any = schema && schema[exports.symbols.any];\n    if (!any) {\n        return false;\n    }\n\n    Assert(options.legacy || any.version === exports.version, 'Cannot mix different versions of joi schemas');\n    return true;\n};\n\n\nexports.isValues = function (obj) {\n\n    return obj[exports.symbols.values];\n};\n\n\nexports.limit = function (value) {\n\n    return Number.isSafeInteger(value) && value >= 0;\n};\n\n\nexports.preferences = function (target, source) {\n\n    Messages = Messages || require('./messages');\n\n    target = target || {};\n    source = source || {};\n\n    const merged = Object.assign({}, target, source);\n    if (source.errors &&\n        target.errors) {\n\n        merged.errors = Object.assign({}, target.errors, source.errors);\n        merged.errors.wrap = Object.assign({}, target.errors.wrap, source.errors.wrap);\n    }\n\n    if (source.messages) {\n        merged.messages = Messages.compile(source.messages, target.messages);\n    }\n\n    delete merged[exports.symbols.prefs];\n    return merged;\n};\n\n\nexports.tryWithPath = function (fn, key, options = {}) {\n\n    try {\n        return fn();\n    }\n    catch (err) {\n        if (err.path !== undefined) {\n            err.path = key + '.' + err.path;\n        }\n        else {\n            err.path = key;\n        }\n\n        if (options.append) {\n            err.message = `${err.message} (${err.path})`;\n        }\n\n        throw err;\n    }\n};\n\n\nexports.validateArg = function (value, label, { assert, message }) {\n\n    if (exports.isSchema(assert)) {\n        const result = assert.validate(value);\n        if (!result.error) {\n            return;\n        }\n\n        return result.error.message;\n    }\n    else if (!assert(value)) {\n        return label ? `${label} ${message}` : message;\n    }\n};\n\n\nexports.verifyFlat = function (args, method) {\n\n    for (const arg of args) {\n        Assert(!Array.isArray(arg), 'Method no longer accepts array arguments:', method);\n    }\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst Clone = require('@hapi/hoek/lib/clone');\n\nconst Template = require('./template');\n\n\nconst internals = {};\n\n\nexports.compile = function (messages, target) {\n\n    // Single value string ('plain error message', 'template {error} message')\n\n    if (typeof messages === 'string') {\n        Assert(!target, 'Cannot set single message string');\n        return new Template(messages);\n    }\n\n    // Single value template\n\n    if (Template.isTemplate(messages)) {\n        Assert(!target, 'Cannot set single message template');\n        return messages;\n    }\n\n    // By error code { 'number.min': <string | template> }\n\n    Assert(typeof messages === 'object' && !Array.isArray(messages), 'Invalid message options');\n\n    target = target ? Clone(target) : {};\n\n    for (let code in messages) {\n        const message = messages[code];\n\n        if (code === 'root' ||\n            Template.isTemplate(message)) {\n\n            target[code] = message;\n            continue;\n        }\n\n        if (typeof message === 'string') {\n            target[code] = new Template(message);\n            continue;\n        }\n\n        // By language { english: { 'number.min': <string | template> } }\n\n        Assert(typeof message === 'object' && !Array.isArray(message), 'Invalid message for', code);\n\n        const language = code;\n        target[language] = target[language] || {};\n\n        for (code in message) {\n            const localized = message[code];\n\n            if (code === 'root' ||\n                Template.isTemplate(localized)) {\n\n                target[language][code] = localized;\n                continue;\n            }\n\n            Assert(typeof localized === 'string', 'Invalid message for', code, 'in', language);\n            target[language][code] = new Template(localized);\n        }\n    }\n\n    return target;\n};\n\n\nexports.decompile = function (messages) {\n\n    // By error code { 'number.min': <string | template> }\n\n    const target = {};\n    for (let code in messages) {\n        const message = messages[code];\n\n        if (code === 'root') {\n            target.root = message;\n            continue;\n        }\n\n        if (Template.isTemplate(message)) {\n            target[code] = message.describe({ compact: true });\n            continue;\n        }\n\n        // By language { english: { 'number.min': <string | template> } }\n\n        const language = code;\n        target[language] = {};\n\n        for (code in message) {\n            const localized = message[code];\n\n            if (code === 'root') {\n                target[language].root = localized;\n                continue;\n            }\n\n            target[language][code] = localized.describe({ compact: true });\n        }\n    }\n\n    return target;\n};\n\n\nexports.merge = function (base, extended) {\n\n    if (!base) {\n        return exports.compile(extended);\n    }\n\n    if (!extended) {\n        return base;\n    }\n\n    // Single value string\n\n    if (typeof extended === 'string') {\n        return new Template(extended);\n    }\n\n    // Single value template\n\n    if (Template.isTemplate(extended)) {\n        return extended;\n    }\n\n    // By error code { 'number.min': <string | template> }\n\n    const target = Clone(base);\n\n    for (let code in extended) {\n        const message = extended[code];\n\n        if (code === 'root' ||\n            Template.isTemplate(message)) {\n\n            target[code] = message;\n            continue;\n        }\n\n        if (typeof message === 'string') {\n            target[code] = new Template(message);\n            continue;\n        }\n\n        // By language { english: { 'number.min': <string | template> } }\n\n        Assert(typeof message === 'object' && !Array.isArray(message), 'Invalid message for', code);\n\n        const language = code;\n        target[language] = target[language] || {};\n\n        for (code in message) {\n            const localized = message[code];\n\n            if (code === 'root' ||\n                Template.isTemplate(localized)) {\n\n                target[language][code] = localized;\n                continue;\n            }\n\n            Assert(typeof localized === 'string', 'Invalid message for', code, 'in', language);\n            target[language][code] = new Template(localized);\n        }\n    }\n\n    return target;\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Common = require('./common');\nconst Ref = require('./ref');\n\n\nconst internals = {};\n\n\n\nexports.Ids = internals.Ids = class {\n\n    constructor() {\n\n        this._byId = new Map();\n        this._byKey = new Map();\n        this._schemaChain = false;\n    }\n\n    clone() {\n\n        const clone = new internals.Ids();\n        clone._byId = new Map(this._byId);\n        clone._byKey = new Map(this._byKey);\n        clone._schemaChain = this._schemaChain;\n        return clone;\n    }\n\n    concat(source) {\n\n        if (source._schemaChain) {\n            this._schemaChain = true;\n        }\n\n        for (const [id, value] of source._byId.entries()) {\n            Assert(!this._byKey.has(id), 'Schema id conflicts with existing key:', id);\n            this._byId.set(id, value);\n        }\n\n        for (const [key, value] of source._byKey.entries()) {\n            Assert(!this._byId.has(key), 'Schema key conflicts with existing id:', key);\n            this._byKey.set(key, value);\n        }\n    }\n\n    fork(path, adjuster, root) {\n\n        const chain = this._collect(path);\n        chain.push({ schema: root });\n        const tail = chain.shift();\n        let adjusted = { id: tail.id, schema: adjuster(tail.schema) };\n\n        Assert(Common.isSchema(adjusted.schema), 'adjuster function failed to return a joi schema type');\n\n        for (const node of chain) {\n            adjusted = { id: node.id, schema: internals.fork(node.schema, adjusted.id, adjusted.schema) };\n        }\n\n        return adjusted.schema;\n    }\n\n    labels(path, behind = []) {\n\n        const current = path[0];\n        const node = this._get(current);\n        if (!node) {\n            return [...behind, ...path].join('.');\n        }\n\n        const forward = path.slice(1);\n        behind = [...behind, node.schema._flags.label || current];\n        if (!forward.length) {\n            return behind.join('.');\n        }\n\n        return node.schema._ids.labels(forward, behind);\n    }\n\n    reach(path, behind = []) {\n\n        const current = path[0];\n        const node = this._get(current);\n        Assert(node, 'Schema does not contain path', [...behind, ...path].join('.'));\n\n        const forward = path.slice(1);\n        if (!forward.length) {\n            return node.schema;\n        }\n\n        return node.schema._ids.reach(forward, [...behind, current]);\n    }\n\n    register(schema, { key } = {}) {\n\n        if (!schema ||\n            !Common.isSchema(schema)) {\n\n            return;\n        }\n\n        if (schema.$_property('schemaChain') ||\n            schema._ids._schemaChain) {\n\n            this._schemaChain = true;\n        }\n\n        const id = schema._flags.id;\n        if (id) {\n            const existing = this._byId.get(id);\n            Assert(!existing || existing.schema === schema, 'Cannot add different schemas with the same id:', id);\n            Assert(!this._byKey.has(id), 'Schema id conflicts with existing key:', id);\n\n            this._byId.set(id, { schema, id });\n        }\n\n        if (key) {\n            Assert(!this._byKey.has(key), 'Schema already contains key:', key);\n            Assert(!this._byId.has(key), 'Schema key conflicts with existing id:', key);\n\n            this._byKey.set(key, { schema, id: key });\n        }\n    }\n\n    reset() {\n\n        this._byId = new Map();\n        this._byKey = new Map();\n        this._schemaChain = false;\n    }\n\n    _collect(path, behind = [], nodes = []) {\n\n        const current = path[0];\n        const node = this._get(current);\n        Assert(node, 'Schema does not contain path', [...behind, ...path].join('.'));\n\n        nodes = [node, ...nodes];\n\n        const forward = path.slice(1);\n        if (!forward.length) {\n            return nodes;\n        }\n\n        return node.schema._ids._collect(forward, [...behind, current], nodes);\n    }\n\n    _get(id) {\n\n        return this._byId.get(id) || this._byKey.get(id);\n    }\n};\n\n\ninternals.fork = function (schema, id, replacement) {\n\n    const each = (item, { key }) => {\n\n        if (id === (item._flags.id || key)) {\n            return replacement;\n        }\n    };\n\n    const obj = exports.schema(schema, { each, ref: false });\n    return obj ? obj.$_mutateRebuild() : schema;\n};\n\n\nexports.schema = function (schema, options) {\n\n    let obj;\n\n    for (const name in schema._flags) {\n        if (name[0] === '_') {\n            continue;\n        }\n\n        const result = internals.scan(schema._flags[name], { source: 'flags', name }, options);\n        if (result !== undefined) {\n            obj = obj || schema.clone();\n            obj._flags[name] = result;\n        }\n    }\n\n    for (let i = 0; i < schema._rules.length; ++i) {\n        const rule = schema._rules[i];\n        const result = internals.scan(rule.args, { source: 'rules', name: rule.name }, options);\n        if (result !== undefined) {\n            obj = obj || schema.clone();\n            const clone = Object.assign({}, rule);\n            clone.args = result;\n            obj._rules[i] = clone;\n\n            const existingUnique = obj._singleRules.get(rule.name);\n            if (existingUnique === rule) {\n                obj._singleRules.set(rule.name, clone);\n            }\n        }\n    }\n\n    for (const name in schema.$_terms) {\n        if (name[0] === '_') {\n            continue;\n        }\n\n        const result = internals.scan(schema.$_terms[name], { source: 'terms', name }, options);\n        if (result !== undefined) {\n            obj = obj || schema.clone();\n            obj.$_terms[name] = result;\n        }\n    }\n\n    return obj;\n};\n\n\ninternals.scan = function (item, source, options, _path, _key) {\n\n    const path = _path || [];\n\n    if (item === null ||\n        typeof item !== 'object') {\n\n        return;\n    }\n\n    let clone;\n\n    if (Array.isArray(item)) {\n        for (let i = 0; i < item.length; ++i) {\n            const key = source.source === 'terms' && source.name === 'keys' && item[i].key;\n            const result = internals.scan(item[i], source, options, [i, ...path], key);\n            if (result !== undefined) {\n                clone = clone || item.slice();\n                clone[i] = result;\n            }\n        }\n\n        return clone;\n    }\n\n    if (options.schema !== false && Common.isSchema(item) ||\n        options.ref !== false && Ref.isRef(item)) {\n\n        const result = options.each(item, { ...source, path, key: _key });\n        if (result === item) {\n            return;\n        }\n\n        return result;\n    }\n\n    for (const key in item) {\n        if (key[0] === '_') {\n            continue;\n        }\n\n        const result = internals.scan(item[key], source, options, [key, ...path], _key);\n        if (result !== undefined) {\n            clone = clone || Object.assign({}, item);\n            clone[key] = result;\n        }\n    }\n\n    return clone;\n};\n","'use strict';\n\nconst Clone = require('@hapi/hoek/lib/clone');\n\nconst Common = require('./common');\n\n\nconst internals = {\n    annotations: Symbol('annotations')\n};\n\n\nexports.error = function (stripColorCodes) {\n\n    if (!this._original ||\n        typeof this._original !== 'object') {\n\n        return this.details[0].message;\n    }\n\n    const redFgEscape = stripColorCodes ? '' : '\\u001b[31m';\n    const redBgEscape = stripColorCodes ? '' : '\\u001b[41m';\n    const endColor = stripColorCodes ? '' : '\\u001b[0m';\n\n    const obj = Clone(this._original);\n\n    for (let i = this.details.length - 1; i >= 0; --i) {        // Reverse order to process deepest child first\n        const pos = i + 1;\n        const error = this.details[i];\n        const path = error.path;\n        let node = obj;\n        for (let j = 0; ; ++j) {\n            const seg = path[j];\n\n            if (Common.isSchema(node)) {\n                node = node.clone();                              // joi schemas are not cloned by hoek, we have to take this extra step\n            }\n\n            if (j + 1 < path.length &&\n                typeof node[seg] !== 'string') {\n\n                node = node[seg];\n            }\n            else {\n                const refAnnotations = node[internals.annotations] || { errors: {}, missing: {} };\n                node[internals.annotations] = refAnnotations;\n\n                const cacheKey = seg || error.context.key;\n\n                if (node[seg] !== undefined) {\n                    refAnnotations.errors[cacheKey] = refAnnotations.errors[cacheKey] || [];\n                    refAnnotations.errors[cacheKey].push(pos);\n                }\n                else {\n                    refAnnotations.missing[cacheKey] = pos;\n                }\n\n                break;\n            }\n        }\n    }\n\n    const replacers = {\n        key: /_\\$key\\$_([, \\d]+)_\\$end\\$_\"/g,\n        missing: /\"_\\$miss\\$_([^|]+)\\|(\\d+)_\\$end\\$_\": \"__missing__\"/g,\n        arrayIndex: /\\s*\"_\\$idx\\$_([, \\d]+)_\\$end\\$_\",?\\n(.*)/g,\n        specials: /\"\\[(NaN|Symbol.*|-?Infinity|function.*|\\(.*)]\"/g\n    };\n\n    let message = internals.safeStringify(obj, 2)\n        .replace(replacers.key, ($0, $1) => `\" ${redFgEscape}[${$1}]${endColor}`)\n        .replace(replacers.missing, ($0, $1, $2) => `${redBgEscape}\"${$1}\"${endColor}${redFgEscape} [${$2}]: -- missing --${endColor}`)\n        .replace(replacers.arrayIndex, ($0, $1, $2) => `\\n${$2} ${redFgEscape}[${$1}]${endColor}`)\n        .replace(replacers.specials, ($0, $1) => $1);\n\n    message = `${message}\\n${redFgEscape}`;\n\n    for (let i = 0; i < this.details.length; ++i) {\n        const pos = i + 1;\n        message = `${message}\\n[${pos}] ${this.details[i].message}`;\n    }\n\n    message = message + endColor;\n\n    return message;\n};\n\n\n// Inspired by json-stringify-safe\n\ninternals.safeStringify = function (obj, spaces) {\n\n    return JSON.stringify(obj, internals.serializer(), spaces);\n};\n\n\ninternals.serializer = function () {\n\n    const keys = [];\n    const stack = [];\n\n    const cycleReplacer = (key, value) => {\n\n        if (stack[0] === value) {\n            return '[Circular ~]';\n        }\n\n        return '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']';\n    };\n\n    return function (key, value) {\n\n        if (stack.length > 0) {\n            const thisPos = stack.indexOf(this);\n            if (~thisPos) {\n                stack.length = thisPos + 1;\n                keys.length = thisPos + 1;\n                keys[thisPos] = key;\n            }\n            else {\n                stack.push(this);\n                keys.push(key);\n            }\n\n            if (~stack.indexOf(value)) {\n                value = cycleReplacer.call(this, key, value);\n            }\n        }\n        else {\n            stack.push(value);\n        }\n\n        if (value) {\n            const annotations = value[internals.annotations];\n            if (annotations) {\n                if (Array.isArray(value)) {\n                    const annotated = [];\n\n                    for (let i = 0; i < value.length; ++i) {\n                        if (annotations.errors[i]) {\n                            annotated.push(`_$idx$_${annotations.errors[i].sort().join(', ')}_$end$_`);\n                        }\n\n                        annotated.push(value[i]);\n                    }\n\n                    value = annotated;\n                }\n                else {\n                    for (const errorKey in annotations.errors) {\n                        value[`${errorKey}_$key$_${annotations.errors[errorKey].sort().join(', ')}_$end$_`] = value[errorKey];\n                        value[errorKey] = undefined;\n                    }\n\n                    for (const missingKey in annotations.missing) {\n                        value[`_$miss$_${missingKey}|${annotations.missing[missingKey]}_$end$_`] = '__missing__';\n                    }\n                }\n\n                return value;\n            }\n        }\n\n        if (value === Infinity ||\n            value === -Infinity ||\n            Number.isNaN(value) ||\n            typeof value === 'function' ||\n            typeof value === 'symbol') {\n\n            return '[' + value.toString() + ']';\n        }\n\n        return value;\n    };\n};\n","'use strict';\n\nconst Clone = require('@hapi/hoek/lib/clone');\nconst Reach = require('@hapi/hoek/lib/reach');\n\nconst Common = require('./common');\n\n\nconst internals = {\n    value: Symbol('value')\n};\n\n\nmodule.exports = internals.State = class {\n\n    constructor(path, ancestors, state) {\n\n        this.path = path;\n        this.ancestors = ancestors;                 // [parent, ..., root]\n\n        this.mainstay = state.mainstay;\n        this.schemas = state.schemas;               // [current, ..., root]\n        this.debug = null;\n    }\n\n    localize(path, ancestors = null, schema = null) {\n\n        const state = new internals.State(path, ancestors, this);\n\n        if (schema &&\n            state.schemas) {\n\n            state.schemas = [internals.schemas(schema), ...state.schemas];\n        }\n\n        return state;\n    }\n\n    nest(schema, debug) {\n\n        const state = new internals.State(this.path, this.ancestors, this);\n        state.schemas = state.schemas && [internals.schemas(schema), ...state.schemas];\n        state.debug = debug;\n        return state;\n    }\n\n    shadow(value, reason) {\n\n        this.mainstay.shadow = this.mainstay.shadow || new internals.Shadow();\n        this.mainstay.shadow.set(this.path, value, reason);\n    }\n\n    snapshot() {\n\n        if (this.mainstay.shadow) {\n            this._snapshot = Clone(this.mainstay.shadow.node(this.path));\n        }\n\n        this.mainstay.snapshot();\n    }\n\n    restore() {\n\n        if (this.mainstay.shadow) {\n            this.mainstay.shadow.override(this.path, this._snapshot);\n            this._snapshot = undefined;\n        }\n\n        this.mainstay.restore();\n    }\n\n    commit() {\n\n        if (this.mainstay.shadow) {\n            this.mainstay.shadow.override(this.path, this._snapshot);\n            this._snapshot = undefined;\n        }\n\n        this.mainstay.commit();\n    }\n};\n\n\ninternals.schemas = function (schema) {\n\n    if (Common.isSchema(schema)) {\n        return { schema };\n    }\n\n    return schema;\n};\n\n\ninternals.Shadow = class {\n\n    constructor() {\n\n        this._values = null;\n    }\n\n    set(path, value, reason) {\n\n        if (!path.length) {                                     // No need to store root value\n            return;\n        }\n\n        if (reason === 'strip' &&\n            typeof path[path.length - 1] === 'number') {        // Cannot store stripped array values (due to shift)\n\n            return;\n        }\n\n        this._values = this._values || new Map();\n\n        let node = this._values;\n        for (let i = 0; i < path.length; ++i) {\n            const segment = path[i];\n            let next = node.get(segment);\n            if (!next) {\n                next = new Map();\n                node.set(segment, next);\n            }\n\n            node = next;\n        }\n\n        node[internals.value] = value;\n    }\n\n    get(path) {\n\n        const node = this.node(path);\n        if (node) {\n            return node[internals.value];\n        }\n    }\n\n    node(path) {\n\n        if (!this._values) {\n            return;\n        }\n\n        return Reach(this._values, path, { iterables: true });\n    }\n\n    override(path, node) {\n\n        if (!this._values) {\n            return;\n        }\n\n        const parents = path.slice(0, -1);\n        const own = path[path.length - 1];\n        const parent = Reach(this._values, parents, { iterables: true });\n\n        if (node) {\n            parent.set(own, node);\n            return;\n        }\n\n        if (parent) {\n            parent.delete(own);\n        }\n    }\n};\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\nconst Clone = require('@hapi/hoek/lib/clone');\nconst Reach = require('@hapi/hoek/lib/reach');\n\nconst Common = require('./common');\n\nlet Template;\n\n\nconst internals = {\n    symbol: Symbol('ref'),      // Used to internally identify references (shared with other joi versions)\n    defaults: {\n        adjust: null,\n        in: false,\n        iterables: null,\n        map: null,\n        separator: '.',\n        type: 'value'\n    }\n};\n\n\nexports.create = function (key, options = {}) {\n\n    Assert(typeof key === 'string', 'Invalid reference key:', key);\n    Common.assertOptions(options, ['adjust', 'ancestor', 'in', 'iterables', 'map', 'prefix', 'render', 'separator']);\n    Assert(!options.prefix || typeof options.prefix === 'object', 'options.prefix must be of type object');\n\n    const ref = Object.assign({}, internals.defaults, options);\n    delete ref.prefix;\n\n    const separator = ref.separator;\n    const context = internals.context(key, separator, options.prefix);\n    ref.type = context.type;\n    key = context.key;\n\n    if (ref.type === 'value') {\n        if (context.root) {\n            Assert(!separator || key[0] !== separator, 'Cannot specify relative path with root prefix');\n            ref.ancestor = 'root';\n            if (!key) {\n                key = null;\n            }\n        }\n\n        if (separator &&\n            separator === key) {\n\n            key = null;\n            ref.ancestor = 0;\n        }\n        else {\n            if (ref.ancestor !== undefined) {\n                Assert(!separator || !key || key[0] !== separator, 'Cannot combine prefix with ancestor option');\n            }\n            else {\n                const [ancestor, slice] = internals.ancestor(key, separator);\n                if (slice) {\n                    key = key.slice(slice);\n                    if (key === '') {\n                        key = null;\n                    }\n                }\n\n                ref.ancestor = ancestor;\n            }\n        }\n    }\n\n    ref.path = separator ? (key === null ? [] : key.split(separator)) : [key];\n\n    return new internals.Ref(ref);\n};\n\n\nexports.in = function (key, options = {}) {\n\n    return exports.create(key, { ...options, in: true });\n};\n\n\nexports.isRef = function (ref) {\n\n    return ref ? !!ref[Common.symbols.ref] : false;\n};\n\n\ninternals.Ref = class {\n\n    constructor(options) {\n\n        Assert(typeof options === 'object', 'Invalid reference construction');\n        Common.assertOptions(options, [\n            'adjust', 'ancestor', 'in', 'iterables', 'map', 'path', 'render', 'separator', 'type',  // Copied\n            'depth', 'key', 'root', 'display'                                                       // Overridden\n        ]);\n\n        Assert([false, undefined].includes(options.separator) || typeof options.separator === 'string' && options.separator.length === 1, 'Invalid separator');\n        Assert(!options.adjust || typeof options.adjust === 'function', 'options.adjust must be a function');\n        Assert(!options.map || Array.isArray(options.map), 'options.map must be an array');\n        Assert(!options.map || !options.adjust, 'Cannot set both map and adjust options');\n\n        Object.assign(this, internals.defaults, options);\n\n        Assert(this.type === 'value' || this.ancestor === undefined, 'Non-value references cannot reference ancestors');\n\n        if (Array.isArray(this.map)) {\n            this.map = new Map(this.map);\n        }\n\n        this.depth = this.path.length;\n        this.key = this.path.length ? this.path.join(this.separator) : null;\n        this.root = this.path[0];\n\n        this.updateDisplay();\n    }\n\n    resolve(value, state, prefs, local, options = {}) {\n\n        Assert(!this.in || options.in, 'Invalid in() reference usage');\n\n        if (this.type === 'global') {\n            return this._resolve(prefs.context, state, options);\n        }\n\n        if (this.type === 'local') {\n            return this._resolve(local, state, options);\n        }\n\n        if (!this.ancestor) {\n            return this._resolve(value, state, options);\n        }\n\n        if (this.ancestor === 'root') {\n            return this._resolve(state.ancestors[state.ancestors.length - 1], state, options);\n        }\n\n        Assert(this.ancestor <= state.ancestors.length, 'Invalid reference exceeds the schema root:', this.display);\n        return this._resolve(state.ancestors[this.ancestor - 1], state, options);\n    }\n\n    _resolve(target, state, options) {\n\n        let resolved;\n\n        if (this.type === 'value' &&\n            state.mainstay.shadow &&\n            options.shadow !== false) {\n\n            resolved = state.mainstay.shadow.get(this.absolute(state));\n        }\n\n        if (resolved === undefined) {\n            resolved = Reach(target, this.path, { iterables: this.iterables, functions: true });\n        }\n\n        if (this.adjust) {\n            resolved = this.adjust(resolved);\n        }\n\n        if (this.map) {\n            const mapped = this.map.get(resolved);\n            if (mapped !== undefined) {\n                resolved = mapped;\n            }\n        }\n\n        if (state.mainstay) {\n            state.mainstay.tracer.resolve(state, this, resolved);\n        }\n\n        return resolved;\n    }\n\n    toString() {\n\n        return this.display;\n    }\n\n    absolute(state) {\n\n        return [...state.path.slice(0, -this.ancestor), ...this.path];\n    }\n\n    clone() {\n\n        return new internals.Ref(this);\n    }\n\n    describe() {\n\n        const ref = { path: this.path };\n\n        if (this.type !== 'value') {\n            ref.type = this.type;\n        }\n\n        if (this.separator !== '.') {\n            ref.separator = this.separator;\n        }\n\n        if (this.type === 'value' &&\n            this.ancestor !== 1) {\n\n            ref.ancestor = this.ancestor;\n        }\n\n        if (this.map) {\n            ref.map = [...this.map];\n        }\n\n        for (const key of ['adjust', 'iterables', 'render']) {\n            if (this[key] !== null &&\n                this[key] !== undefined) {\n\n                ref[key] = this[key];\n            }\n        }\n\n        if (this.in !== false) {\n            ref.in = true;\n        }\n\n        return { ref };\n    }\n\n    updateDisplay() {\n\n        const key = this.key !== null ? this.key : '';\n        if (this.type !== 'value') {\n            this.display = `ref:${this.type}:${key}`;\n            return;\n        }\n\n        if (!this.separator) {\n            this.display = `ref:${key}`;\n            return;\n        }\n\n        if (!this.ancestor) {\n            this.display = `ref:${this.separator}${key}`;\n            return;\n        }\n\n        if (this.ancestor === 'root') {\n            this.display = `ref:root:${key}`;\n            return;\n        }\n\n        if (this.ancestor === 1) {\n            this.display = `ref:${key || '..'}`;\n            return;\n        }\n\n        const lead = new Array(this.ancestor + 1).fill(this.separator).join('');\n        this.display = `ref:${lead}${key || ''}`;\n    }\n};\n\n\ninternals.Ref.prototype[Common.symbols.ref] = true;\n\n\nexports.build = function (desc) {\n\n    desc = Object.assign({}, internals.defaults, desc);\n    if (desc.type === 'value' &&\n        desc.ancestor === undefined) {\n\n        desc.ancestor = 1;\n    }\n\n    return new internals.Ref(desc);\n};\n\n\ninternals.context = function (key, separator, prefix = {}) {\n\n    key = key.trim();\n\n    if (prefix) {\n        const globalp = prefix.global === undefined ? '$' : prefix.global;\n        if (globalp !== separator &&\n            key.startsWith(globalp)) {\n\n            return { key: key.slice(globalp.length), type: 'global' };\n        }\n\n        const local = prefix.local === undefined ? '#' : prefix.local;\n        if (local !== separator &&\n            key.startsWith(local)) {\n\n            return { key: key.slice(local.length), type: 'local' };\n        }\n\n        const root = prefix.root === undefined ? '/' : prefix.root;\n        if (root !== separator &&\n            key.startsWith(root)) {\n\n            return { key: key.slice(root.length), type: 'value', root: true };\n        }\n    }\n\n    return { key, type: 'value' };\n};\n\n\ninternals.ancestor = function (key, separator) {\n\n    if (!separator) {\n        return [1, 0];              // 'a_b' -> 1 (parent)\n    }\n\n    if (key[0] !== separator) {     // 'a.b' -> 1 (parent)\n        return [1, 0];\n    }\n\n    if (key[1] !== separator) {     // '.a.b' -> 0 (self)\n        return [0, 1];\n    }\n\n    let i = 2;\n    while (key[i] === separator) {\n        ++i;\n    }\n\n    return [i - 1, i];              // '...a.b.' -> 2 (grandparent)\n};\n\n\nexports.toSibling = 0;\n\nexports.toParent = 1;\n\n\nexports.Manager = class {\n\n    constructor() {\n\n        this.refs = [];                     // 0: [self refs], 1: [parent refs], 2: [grandparent refs], ...\n    }\n\n    register(source, target) {\n\n        if (!source) {\n            return;\n        }\n\n        target = target === undefined ? exports.toParent : target;\n\n        // Array\n\n        if (Array.isArray(source)) {\n            for (const ref of source) {\n                this.register(ref, target);\n            }\n\n            return;\n        }\n\n        // Schema\n\n        if (Common.isSchema(source)) {\n            for (const item of source._refs.refs) {\n                if (item.ancestor - target >= 0) {\n                    this.refs.push({ ancestor: item.ancestor - target, root: item.root });\n                }\n            }\n\n            return;\n        }\n\n        // Reference\n\n        if (exports.isRef(source) &&\n            source.type === 'value' &&\n            source.ancestor - target >= 0) {\n\n            this.refs.push({ ancestor: source.ancestor - target, root: source.root });\n        }\n\n        // Template\n\n        Template = Template || require('./template');\n\n        if (Template.isTemplate(source)) {\n            this.register(source.refs(), target);\n        }\n    }\n\n    get length() {\n\n        return this.refs.length;\n    }\n\n    clone() {\n\n        const copy = new exports.Manager();\n        copy.refs = Clone(this.refs);\n        return copy;\n    }\n\n    reset() {\n\n        this.refs = [];\n    }\n\n    roots() {\n\n        return this.refs.filter((ref) => !ref.ancestor).map((ref) => ref.root);\n    }\n};\n","// HTTP 응답 유틸리티 함수들\r\n\r\n/**\r\n * 성공 응답 생성\r\n * @param {*} data - 응답 데이터\r\n * @param {number} statusCode - HTTP 상태 코드 (기본값: 200)\r\n * @param {Object} headers - 추가 헤더\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction success(data, statusCode = 200, headers = {}) {\r\n  return {\r\n    statusCode,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',\r\n      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',\r\n      ...headers,\r\n    },\r\n    body: JSON.stringify({\r\n      success: true,\r\n      data,\r\n      timestamp: new Date().toISOString(),\r\n    }),\r\n  };\r\n}\r\n\r\n/**\r\n * 에러 응답 생성\r\n * @param {string} message - 에러 메시지\r\n * @param {number} statusCode - HTTP 상태 코드 (기본값: 500)\r\n * @param {string} errorCode - 에러 코드\r\n * @param {Object} headers - 추가 헤더\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction error(message, statusCode = 500, errorCode = 'INTERNAL_ERROR', headers = {}) {\r\n  return {\r\n    statusCode,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',\r\n      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',\r\n      ...headers,\r\n    },\r\n    body: JSON.stringify({\r\n      success: false,\r\n      error: {\r\n        message,\r\n        code: errorCode,\r\n        statusCode,\r\n      },\r\n      timestamp: new Date().toISOString(),\r\n    }),\r\n  };\r\n}\r\n\r\n/**\r\n * 유효성 검사 에러 응답 생성\r\n * @param {string} message - 에러 메시지\r\n * @param {Array} details - 상세 에러 정보\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction validationError(message, details = []) {\r\n  return error(message, 400, 'VALIDATION_ERROR', {}, { details });\r\n}\r\n\r\n/**\r\n * 404 Not Found 응답 생성\r\n * @param {string} resource - 찾을 수 없는 리소스명\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction notFound(resource = 'Resource') {\r\n  return error(`${resource} not found`, 404, 'NOT_FOUND');\r\n}\r\n\r\n/**\r\n * 401 Unauthorized 응답 생성\r\n * @param {string} message - 에러 메시지\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction unauthorized(message = 'Unauthorized') {\r\n  return error(message, 401, 'UNAUTHORIZED');\r\n}\r\n\r\n/**\r\n * 403 Forbidden 응답 생성\r\n * @param {string} message - 에러 메시지\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction forbidden(message = 'Forbidden') {\r\n  return error(message, 403, 'FORBIDDEN');\r\n}\r\n\r\n/**\r\n * 429 Too Many Requests 응답 생성\r\n * @param {string} message - 에러 메시지\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction tooManyRequests(message = 'Too many requests') {\r\n  return error(message, 429, 'TOO_MANY_REQUESTS');\r\n}\r\n\r\nmodule.exports = {\r\n  success,\r\n  error,\r\n  validationError,\r\n  notFound,\r\n  unauthorized,\r\n  forbidden,\r\n  tooManyRequests,\r\n};","module.exports = require(\"util\");","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Any = require('./any');\n\n\nconst internals = {};\n\n\ninternals.Map = class extends Map {\n\n    slice() {\n\n        return new internals.Map(this);\n    }\n};\n\n\nmodule.exports = Any.extend({\n\n    type: 'symbol',\n\n    terms: {\n\n        map: { init: new internals.Map() }\n    },\n\n    coerce: {\n        method(value, { schema, error }) {\n\n            const lookup = schema.$_terms.map.get(value);\n            if (lookup) {\n                value = lookup;\n            }\n\n            if (!schema._flags.only ||\n                typeof value === 'symbol') {\n\n                return { value };\n            }\n\n            return { value, errors: error('symbol.map', { map: schema.$_terms.map }) };\n        }\n    },\n\n    validate(value, { error }) {\n\n        if (typeof value !== 'symbol') {\n            return { value, errors: error('symbol.base') };\n        }\n    },\n\n    rules: {\n        map: {\n            method(iterable) {\n\n                if (iterable &&\n                    !iterable[Symbol.iterator] &&\n                    typeof iterable === 'object') {\n\n                    iterable = Object.entries(iterable);\n                }\n\n                Assert(iterable && iterable[Symbol.iterator], 'Iterable must be an iterable or object');\n\n                const obj = this.clone();\n\n                const symbols = [];\n                for (const entry of iterable) {\n                    Assert(entry && entry[Symbol.iterator], 'Entry must be an iterable');\n                    const [key, value] = entry;\n\n                    Assert(typeof key !== 'object' && typeof key !== 'function' && typeof key !== 'symbol', 'Key must not be of type object, function, or Symbol');\n                    Assert(typeof value === 'symbol', 'Value must be a Symbol');\n\n                    obj.$_terms.map.set(key, value);\n                    symbols.push(value);\n                }\n\n                return obj.valid(...symbols);\n            }\n        }\n    },\n\n    manifest: {\n\n        build(obj, desc) {\n\n            if (desc.map) {\n                obj = obj.map(desc.map);\n            }\n\n            return obj;\n        }\n    },\n\n    messages: {\n        'symbol.base': '{{#label}} must be a symbol',\n        'symbol.map': '{{#label}} must be one of {{#map}}'\n    }\n});\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Any = require('./any');\nconst Common = require('../common');\nconst Template = require('../template');\n\n\nconst internals = {};\n\n\ninternals.isDate = function (value) {\n\n    return value instanceof Date;\n};\n\n\nmodule.exports = Any.extend({\n\n    type: 'date',\n\n    coerce: {\n        from: ['number', 'string'],\n        method(value, { schema }) {\n\n            return { value: internals.parse(value, schema._flags.format) || value };\n        }\n    },\n\n    validate(value, { schema, error, prefs }) {\n\n        if (value instanceof Date &&\n            !isNaN(value.getTime())) {\n\n            return;\n        }\n\n        const format = schema._flags.format;\n\n        if (!prefs.convert ||\n            !format ||\n            typeof value !== 'string') {\n\n            return { value, errors: error('date.base') };\n        }\n\n        return { value, errors: error('date.format', { format }) };\n    },\n\n    rules: {\n\n        compare: {\n            method: false,\n            validate(value, helpers, { date }, { name, operator, args }) {\n\n                const to = date === 'now' ? Date.now() : date.getTime();\n                if (Common.compare(value.getTime(), to, operator)) {\n                    return value;\n                }\n\n                return helpers.error('date.' + name, { limit: args.date, value });\n            },\n            args: [\n                {\n                    name: 'date',\n                    ref: true,\n                    normalize: (date) => {\n\n                        return date === 'now' ? date : internals.parse(date);\n                    },\n                    assert: (date) => date !== null,\n                    message: 'must have a valid date format'\n                }\n            ]\n        },\n\n        format: {\n            method(format) {\n\n                Assert(['iso', 'javascript', 'unix'].includes(format), 'Unknown date format', format);\n\n                return this.$_setFlag('format', format);\n            }\n        },\n\n        greater: {\n            method(date) {\n\n                return this.$_addRule({ name: 'greater', method: 'compare', args: { date }, operator: '>' });\n            }\n        },\n\n        iso: {\n            method() {\n\n                return this.format('iso');\n            }\n        },\n\n        less: {\n            method(date) {\n\n                return this.$_addRule({ name: 'less', method: 'compare', args: { date }, operator: '<' });\n            }\n        },\n\n        max: {\n            method(date) {\n\n                return this.$_addRule({ name: 'max', method: 'compare', args: { date }, operator: '<=' });\n            }\n        },\n\n        min: {\n            method(date) {\n\n                return this.$_addRule({ name: 'min', method: 'compare', args: { date }, operator: '>=' });\n            }\n        },\n\n        timestamp: {\n            method(type = 'javascript') {\n\n                Assert(['javascript', 'unix'].includes(type), '\"type\" must be one of \"javascript, unix\"');\n\n                return this.format(type);\n            }\n        }\n    },\n\n    cast: {\n        number: {\n            from: internals.isDate,\n            to(value, helpers) {\n\n                return value.getTime();\n            }\n        },\n        string: {\n            from: internals.isDate,\n            to(value, { prefs }) {\n\n                return Template.date(value, prefs);\n            }\n        }\n    },\n\n    messages: {\n        'date.base': '{{#label}} must be a valid date',\n        'date.format': '{{#label}} must be in {msg(\"date.format.\" + #format) || #format} format',\n        'date.greater': '{{#label}} must be greater than {{:#limit}}',\n        'date.less': '{{#label}} must be less than {{:#limit}}',\n        'date.max': '{{#label}} must be less than or equal to {{:#limit}}',\n        'date.min': '{{#label}} must be greater than or equal to {{:#limit}}',\n\n        // Messages used in date.format\n\n        'date.format.iso': 'ISO 8601 date',\n        'date.format.javascript': 'timestamp or number of milliseconds',\n        'date.format.unix': 'timestamp or number of seconds'\n    }\n});\n\n\n// Helpers\n\ninternals.parse = function (value, format) {\n\n    if (value instanceof Date) {\n        return value;\n    }\n\n    if (typeof value !== 'string' &&\n        (isNaN(value) || !isFinite(value))) {\n\n        return null;\n    }\n\n    if (/^\\s*$/.test(value)) {\n        return null;\n    }\n\n    // ISO\n\n    if (format === 'iso') {\n        if (!Common.isIsoDate(value)) {\n            return null;\n        }\n\n        return internals.date(value.toString());\n    }\n\n    // Normalize number string\n\n    const original = value;\n    if (typeof value === 'string' &&\n        /^[+-]?\\d+(\\.\\d+)?$/.test(value)) {\n\n        value = parseFloat(value);\n    }\n\n    // Timestamp\n\n    if (format) {\n        if (format === 'javascript') {\n            return internals.date(1 * value);        // Casting to number\n        }\n\n        if (format === 'unix') {\n            return internals.date(1000 * value);\n        }\n\n        if (typeof original === 'string') {\n            return null;\n        }\n    }\n\n    // Plain\n\n    return internals.date(value);\n};\n\n\ninternals.date = function (value) {\n\n    const date = new Date(value);\n    if (!isNaN(date.getTime())) {\n        return date;\n    }\n\n    return null;\n};\n","'use strict';\n\nconst Util = require('util');\n\nconst Domain = require('./domain');\nconst Errors = require('./errors');\n\n\nconst internals = {\n    nonAsciiRx: /[^\\x00-\\x7f]/,\n    encoder: new (Util.TextEncoder || TextEncoder)()                                            // $lab:coverage:ignore$\n};\n\n\nexports.analyze = function (email, options) {\n\n    return internals.email(email, options);\n};\n\n\nexports.isValid = function (email, options) {\n\n    return !internals.email(email, options);\n};\n\n\ninternals.email = function (email, options = {}) {\n\n    if (typeof email !== 'string') {\n        throw new Error('Invalid input: email must be a string');\n    }\n\n    if (!email) {\n        return Errors.code('EMPTY_STRING');\n    }\n\n    // Unicode\n\n    const ascii = !internals.nonAsciiRx.test(email);\n    if (!ascii) {\n        if (options.allowUnicode === false) {                                                   // Defaults to true\n            return Errors.code('FORBIDDEN_UNICODE');\n        }\n\n        email = email.normalize('NFC');\n    }\n\n    // Basic structure\n\n    const parts = email.split('@');\n    if (parts.length !== 2) {\n        return parts.length > 2 ? Errors.code('MULTIPLE_AT_CHAR') : Errors.code('MISSING_AT_CHAR');\n    }\n\n    const [local, domain] = parts;\n\n    if (!local) {\n        return Errors.code('EMPTY_LOCAL');\n    }\n\n    if (!options.ignoreLength) {\n        if (email.length > 254) {                                           // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.3\n            return Errors.code('ADDRESS_TOO_LONG');\n        }\n\n        if (internals.encoder.encode(local).length > 64) {                  // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.1\n            return Errors.code('LOCAL_TOO_LONG');\n        }\n    }\n\n    // Validate parts\n\n    return internals.local(local, ascii) || Domain.analyze(domain, options);\n};\n\n\ninternals.local = function (local, ascii) {\n\n    const segments = local.split('.');\n    for (const segment of segments) {\n        if (!segment.length) {\n            return Errors.code('EMPTY_LOCAL_SEGMENT');\n        }\n\n        if (ascii) {\n            if (!internals.atextRx.test(segment)) {\n                return Errors.code('INVALID_LOCAL_CHARS');\n            }\n\n            continue;\n        }\n\n        for (const char of segment) {\n            if (internals.atextRx.test(char)) {\n                continue;\n            }\n\n            const binary = internals.binary(char);\n            if (!internals.atomRx.test(binary)) {\n                return Errors.code('INVALID_LOCAL_CHARS');\n            }\n        }\n    }\n};\n\n\ninternals.binary = function (char) {\n\n    return Array.from(internals.encoder.encode(char)).map((v) => String.fromCharCode(v)).join('');\n};\n\n\n/*\n    From RFC 5321:\n\n        Mailbox         =   Local-part \"@\" ( Domain / address-literal )\n\n        Local-part      =   Dot-string / Quoted-string\n        Dot-string      =   Atom *(\".\"  Atom)\n        Atom            =   1*atext\n        atext           =   ALPHA / DIGIT / \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \"/\" / \"=\" / \"?\" / \"^\" / \"_\" / \"`\" / \"{\" / \"|\" / \"}\" / \"~\"\n\n        Domain          =   sub-domain *(\".\" sub-domain)\n        sub-domain      =   Let-dig [Ldh-str]\n        Let-dig         =   ALPHA / DIGIT\n        Ldh-str         =   *( ALPHA / DIGIT / \"-\" ) Let-dig\n\n        ALPHA           =   %x41-5A / %x61-7A        ; a-z, A-Z\n        DIGIT           =   %x30-39                  ; 0-9\n\n    From RFC 6531:\n\n        sub-domain      =/  U-label\n        atext           =/  UTF8-non-ascii\n\n        UTF8-non-ascii  =   UTF8-2 / UTF8-3 / UTF8-4\n\n        UTF8-2          =   %xC2-DF UTF8-tail\n        UTF8-3          =   %xE0 %xA0-BF UTF8-tail /\n                            %xE1-EC 2( UTF8-tail ) /\n                            %xED %x80-9F UTF8-tail /\n                            %xEE-EF 2( UTF8-tail )\n        UTF8-4          =   %xF0 %x90-BF 2( UTF8-tail ) /\n                            %xF1-F3 3( UTF8-tail ) /\n                            %xF4 %x80-8F 2( UTF8-tail )\n\n        UTF8-tail       =   %x80-BF\n\n    Note: The following are not supported:\n\n        RFC 5321: address-literal, Quoted-string\n        RFC 5322: obs-*, CFWS\n*/\n\n\ninternals.atextRx = /^[\\w!#\\$%&'\\*\\+\\-/=\\?\\^`\\{\\|\\}~]+$/;               // _ included in \\w\n\n\ninternals.atomRx = new RegExp([\n\n    //  %xC2-DF UTF8-tail\n    '(?:[\\\\xc2-\\\\xdf][\\\\x80-\\\\xbf])',\n\n    //  %xE0 %xA0-BF UTF8-tail              %xE1-EC 2( UTF8-tail )            %xED %x80-9F UTF8-tail              %xEE-EF 2( UTF8-tail )\n    '(?:\\\\xe0[\\\\xa0-\\\\xbf][\\\\x80-\\\\xbf])|(?:[\\\\xe1-\\\\xec][\\\\x80-\\\\xbf]{2})|(?:\\\\xed[\\\\x80-\\\\x9f][\\\\x80-\\\\xbf])|(?:[\\\\xee-\\\\xef][\\\\x80-\\\\xbf]{2})',\n\n    //  %xF0 %x90-BF 2( UTF8-tail )            %xF1-F3 3( UTF8-tail )            %xF4 %x80-8F 2( UTF8-tail )\n    '(?:\\\\xf0[\\\\x90-\\\\xbf][\\\\x80-\\\\xbf]{2})|(?:[\\\\xf1-\\\\xf3][\\\\x80-\\\\xbf]{3})|(?:\\\\xf4[\\\\x80-\\\\x8f][\\\\x80-\\\\xbf]{2})'\n\n].join('|'));\n","'use strict';\n\nconst Assert = require('@hapi/hoek/lib/assert');\n\nconst Uri = require('./uri');\n\n\nconst internals = {};\n\n\nexports.regex = function (options = {}) {\n\n    // CIDR\n\n    Assert(options.cidr === undefined || typeof options.cidr === 'string', 'options.cidr must be a string');\n    const cidr = options.cidr ? options.cidr.toLowerCase() : 'optional';\n    Assert(['required', 'optional', 'forbidden'].includes(cidr), 'options.cidr must be one of required, optional, forbidden');\n\n    // Versions\n\n    Assert(options.version === undefined || typeof options.version === 'string' || Array.isArray(options.version), 'options.version must be a string or an array of string');\n    let versions = options.version || ['ipv4', 'ipv6', 'ipvfuture'];\n    if (!Array.isArray(versions)) {\n        versions = [versions];\n    }\n\n    Assert(versions.length >= 1, 'options.version must have at least 1 version specified');\n\n    for (let i = 0; i < versions.length; ++i) {\n        Assert(typeof versions[i] === 'string', 'options.version must only contain strings');\n        versions[i] = versions[i].toLowerCase();\n        Assert(['ipv4', 'ipv6', 'ipvfuture'].includes(versions[i]), 'options.version contains unknown version ' + versions[i] + ' - must be one of ipv4, ipv6, ipvfuture');\n    }\n\n    versions = Array.from(new Set(versions));\n\n    // Regex\n\n    const parts = versions.map((version) => {\n\n        // Forbidden\n\n        if (cidr === 'forbidden') {\n            return Uri.ip[version];\n        }\n\n        // Required\n\n        const cidrpart = `\\\\/${version === 'ipv4' ? Uri.ip.v4Cidr : Uri.ip.v6Cidr}`;\n\n        if (cidr === 'required') {\n            return `${Uri.ip[version]}${cidrpart}`;\n        }\n\n        // Optional\n\n        return `${Uri.ip[version]}(?:${cidrpart})?`;\n    });\n\n    const raw = `(?:${parts.join('|')})`;\n    const regex = new RegExp(`^${raw}$`);\n    return { cidr, versions, regex, raw };\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6859);\n",""],"names":["environment","require","LOG_LEVELS","ERROR","WARN","INFO","DEBUG","currentLogLevel","isDevelopment","formatLog","level","message","meta","_objectSpread","timestamp","Date","toISOString","stage","log","levelName","logData","console","error","JSON","stringify","warn","errorMeta","name","stack","info","debug","logRequest","event","functionName","function","httpMethod","path","queryStringParameters","headers","logResponse","response","duration","statusCode","module","exports","requiredEnvVars","optionalEnvVars","validateEnvironment","missing","filter","envVar","process","env","length","Error","join","STAGE","region","REGION","nodeEnv","NODE_ENV","dynamodbTableName","DYNAMODB_TABLE_NAME","naver","clientId","NAVER_CLIENT_ID","clientSecret","NAVER_CLIENT_SECRET","hanriver","baseUrl","HANRIVER_BASE_URL","endpoints","waterlevel","HANRIVER_WATERLEVEL_ENDPOINT","realtime","HANRIVER_REALTIME_ENDPOINT","forecast","HANRIVER_FORECAST_ENDPOINT","isTest","isProduction","isOffline","IS_OFFLINE","success","errorResponse","validationError","DynamoDBService","Joi","dynamoDBService","getFloodDataByLocation","context","startTime","now","queryParams","validationResult","validateLocationQuery","details","latitude","longitude","radius","severity","alertType","limit","offset","value","locationData","getFloodPointsNearLocation","err","schema","object","number","min","max","required","default","string","valid","validate","options","allData","getItemsByStatus","nearbyPoints","items","item","distance","calculateDistance","map","id","locationId","status","sources","availableAPIs","address","filteredPoints","point","sort","a","b","paginatedPoints","slice","center","floodPoints","totalCount","searchArea","unit","pagination","total","hasMore","summary","nearbyCount","returnedCount","closestDistance","averageDistance","reduce","sum","severityDistribution","calculateSeverityDistribution","alertTypeDistribution","calculateAlertTypeDistribution","lat1","lon1","lat2","lon2","R","φ1","Math","PI","φ2","Δφ","Δλ","sin","cos","c","atan2","sqrt","points","distribution","low","medium","high","forEach","undefined","AWS","awsConfig","endpoint","accessKeyId","secretAccessKey","config","update","dynamodb","DynamoDB","DocumentClient","s3","S3","lambda","Lambda","constructor","tableName","client","putItem","itemId","params","TableName","Item","ReturnValues","result","put","promise","isUpdate","Attributes","data","previousData","getItem","Key","get","deleteItem","delete","existed","deletedData","getItemsByLocation","IndexName","KeyConditionExpression","ExpressionAttributeValues","sortDescending","ScanIndexForward","Limit","exclusiveStartKey","ExclusiveStartKey","FilterExpression","ExpressionAttributeNames","query","itemCount","Items","LastEvaluatedKey","lastEvaluatedKey","count","Count","scannedCount","ScannedCount","getItemsByAPIType","apiType","fromTime","toTime","batchWriteItems","processedItems","unprocessedItems","batches","i","push","batch","RequestItems","PutRequest","batchWrite","UnprocessedItems","totalItems","batchDeleteItems","ids","deletedItems","DeleteRequest","scanItems","filterExpression","expressionAttributeNames","expressionAttributeValues","scan","conditionalUpdate","updateExpression","conditionExpression","UpdateExpression","expression","values","names","ConditionExpression","updated","code","reason","transactWrite","transactItems","TransactItems","Put","Update","Delete","getTableStatus","describeTable","Table","TableStatus","ItemCount","tableSize","TableSizeBytes","creationDateTime","CreationDateTime","billingMode","BillingModeSummary","BillingMode","indexes","GlobalSecondaryIndexes","index","IndexStatus","body","errorCode","notFound","resource","unauthorized","forbidden","tooManyRequests"],"sourceRoot":""}