{"version":3,"file":"src/utils/websocket.js","mappings":"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","sources":["webpack://flood-info-backend/./src/utils/logger.js","webpack://flood-info-backend/./src/config/environment.js","webpack://flood-info-backend/external commonjs2 \"aws-sdk\"","webpack://flood-info-backend/./src/utils/websocket.js","webpack://flood-info-backend/webpack/bootstrap","webpack://flood-info-backend/webpack/before-startup","webpack://flood-info-backend/webpack/startup","webpack://flood-info-backend/webpack/after-startup"],"sourcesContent":["// 로깅 유틸리티\r\n\r\nconst environment = require('../config/environment');\r\n\r\n/**\r\n * 로그 레벨 정의\r\n */\r\nconst LOG_LEVELS = {\r\n  ERROR: 0,\r\n  WARN: 1,\r\n  INFO: 2,\r\n  DEBUG: 3,\r\n};\r\n\r\n/**\r\n * 현재 로그 레벨 설정\r\n */\r\nconst currentLogLevel = environment.isDevelopment ? LOG_LEVELS.DEBUG : LOG_LEVELS.INFO;\r\n\r\n/**\r\n * 로그 메시지 포맷팅\r\n * @param {string} level - 로그 레벨\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n * @returns {Object} 포맷된 로그 객체\r\n */\r\nfunction formatLog(level, message, meta = {}) {\r\n  return {\r\n    timestamp: new Date().toISOString(),\r\n    level,\r\n    message,\r\n    stage: environment.stage,\r\n    ...meta,\r\n  };\r\n}\r\n\r\n/**\r\n * 로그 출력 함수\r\n * @param {number} level - 로그 레벨 숫자\r\n * @param {string} levelName - 로그 레벨 이름\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction log(level, levelName, message, meta = {}) {\r\n  if (level <= currentLogLevel) {\r\n    const logData = formatLog(levelName, message, meta);\r\n    \r\n    if (level === LOG_LEVELS.ERROR) {\r\n      console.error(JSON.stringify(logData));\r\n    } else if (level === LOG_LEVELS.WARN) {\r\n      console.warn(JSON.stringify(logData));\r\n    } else {\r\n      console.log(JSON.stringify(logData));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 에러 로그\r\n * @param {string} message - 메시지\r\n * @param {Error|Object} error - 에러 객체\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction error(message, error = null, meta = {}) {\r\n  const errorMeta = {\r\n    ...meta,\r\n    error: error ? {\r\n      name: error.name,\r\n      message: error.message,\r\n      stack: error.stack,\r\n    } : null,\r\n  };\r\n  \r\n  log(LOG_LEVELS.ERROR, 'ERROR', message, errorMeta);\r\n}\r\n\r\n/**\r\n * 경고 로그\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction warn(message, meta = {}) {\r\n  log(LOG_LEVELS.WARN, 'WARN', message, meta);\r\n}\r\n\r\n/**\r\n * 정보 로그\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction info(message, meta = {}) {\r\n  log(LOG_LEVELS.INFO, 'INFO', message, meta);\r\n}\r\n\r\n/**\r\n * 디버그 로그\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction debug(message, meta = {}) {\r\n  log(LOG_LEVELS.DEBUG, 'DEBUG', message, meta);\r\n}\r\n\r\n/**\r\n * API 요청 로그\r\n * @param {Object} event - Lambda 이벤트 객체\r\n * @param {string} functionName - 함수명\r\n */\r\nfunction logRequest(event, functionName) {\r\n  info('API Request', {\r\n    function: functionName,\r\n    httpMethod: event.httpMethod,\r\n    path: event.path,\r\n    queryStringParameters: event.queryStringParameters,\r\n    headers: {\r\n      'user-agent': event.headers?.['user-agent'],\r\n      'x-forwarded-for': event.headers?.['x-forwarded-for'],\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * API 응답 로그\r\n * @param {Object} response - Lambda 응답 객체\r\n * @param {string} functionName - 함수명\r\n * @param {number} duration - 실행 시간 (ms)\r\n */\r\nfunction logResponse(response, functionName, duration) {\r\n  info('API Response', {\r\n    function: functionName,\r\n    statusCode: response.statusCode,\r\n    duration: `${duration}ms`,\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  error,\r\n  warn,\r\n  info,\r\n  debug,\r\n  logRequest,\r\n  logResponse,\r\n  LOG_LEVELS,\r\n};","// 환경 변수 설정 및 검증\r\n\r\nconst requiredEnvVars = [\r\n  'STAGE',\r\n  'REGION',\r\n  'DYNAMODB_TABLE_NAME',\r\n];\r\n\r\nconst optionalEnvVars = [\r\n  'NAVER_CLIENT_ID',\r\n  'NAVER_CLIENT_SECRET',\r\n  'HANRIVER_BASE_URL',\r\n  'HANRIVER_WATERLEVEL_ENDPOINT',\r\n  'HANRIVER_REALTIME_ENDPOINT',\r\n  'HANRIVER_FORECAST_ENDPOINT',\r\n];\r\n\r\n// 환경 변수 검증\r\nfunction validateEnvironment() {\r\n  const missing = requiredEnvVars.filter((envVar) => !process.env[envVar]);\r\n  \r\n  if (missing.length > 0) {\r\n    throw new Error(`Missing required environment variables: ${missing.join(', ')}`);\r\n  }\r\n}\r\n\r\n// 환경 변수 객체 생성\r\nconst environment = {\r\n  // 기본 설정\r\n  stage: process.env.STAGE,\r\n  region: process.env.REGION,\r\n  nodeEnv: process.env.NODE_ENV || 'production',\r\n  \r\n  // AWS 설정\r\n  dynamodbTableName: process.env.DYNAMODB_TABLE_NAME,\r\n  \r\n  // 네이버 API 설정\r\n  naver: {\r\n    clientId: process.env.NAVER_CLIENT_ID,\r\n    clientSecret: process.env.NAVER_CLIENT_SECRET,\r\n  },\r\n  \r\n  // 한강홍수통제소 API 설정\r\n  hanriver: {\r\n    baseUrl: process.env.HANRIVER_BASE_URL || 'http://211.188.52.85:9191',\r\n    endpoints: {\r\n      waterlevel: process.env.HANRIVER_WATERLEVEL_ENDPOINT || '/waterlevelinfo/info.json',\r\n      realtime: process.env.HANRIVER_REALTIME_ENDPOINT || '/getWaterLevel1D/list/1D/1018683/20230701/20230930.json',\r\n      forecast: process.env.HANRIVER_FORECAST_ENDPOINT || '/fldfct/list/20230715.json',\r\n    },\r\n  },\r\n  \r\n  // 개발 환경 여부\r\n  isDevelopment: process.env.NODE_ENV === 'development',\r\n  isTest: process.env.NODE_ENV === 'test',\r\n  isProduction: process.env.NODE_ENV === 'production',\r\n  isOffline: process.env.IS_OFFLINE === 'true',\r\n};\r\n\r\n// 환경 변수 검증 실행 (테스트 환경 제외)\r\nif (!environment.isTest) {\r\n  validateEnvironment();\r\n}\r\n\r\nmodule.exports = environment;","module.exports = require(\"aws-sdk\");","// websocket.js\r\n// 클라이언트-서버 실시간 통신 설정 유틸리티\r\n\r\nconst { info, error, debug, warn } = require('./logger');\r\n\r\n/**\r\n * WebSocket 연결 관리 클래스\r\n */\r\nclass WebSocketManager {\r\n  constructor() {\r\n    this.connections = new Map();\r\n    this.rooms = new Map();\r\n    this.messageHandlers = new Map();\r\n    this.connectionStats = {\r\n      totalConnections: 0,\r\n      activeConnections: 0,\r\n      totalMessages: 0,\r\n      totalErrors: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * WebSocket 연결 처리\r\n   * @param {Object} event - API Gateway WebSocket 이벤트\r\n   * @param {Object} context - Lambda 컨텍스트\r\n   * @returns {Promise<Object>} 응답\r\n   */\r\n  async handleConnect(event, context) {\r\n    const connectionId = event.requestContext.connectionId;\r\n    const routeKey = event.requestContext.routeKey;\r\n\r\n    try {\r\n      debug('WebSocket connection attempt', { connectionId, routeKey });\r\n\r\n      // 연결 정보 저장\r\n      const connectionInfo = {\r\n        connectionId,\r\n        connectedAt: Date.now(),\r\n        lastActivity: Date.now(),\r\n        subscriptions: new Set(),\r\n        metadata: this.extractConnectionMetadata(event),\r\n      };\r\n\r\n      this.connections.set(connectionId, connectionInfo);\r\n      this.connectionStats.totalConnections++;\r\n      this.connectionStats.activeConnections++;\r\n\r\n      // 연결 성공 메시지 전송\r\n      await this.sendMessage(connectionId, {\r\n        type: 'connection_established',\r\n        connectionId,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n\r\n      info('WebSocket connected', { \r\n        connectionId, \r\n        totalConnections: this.connectionStats.activeConnections \r\n      });\r\n\r\n      return {\r\n        statusCode: 200,\r\n        body: 'Connected',\r\n      };\r\n    } catch (err) {\r\n      error('WebSocket connection failed', err, { connectionId });\r\n      return {\r\n        statusCode: 500,\r\n        body: 'Connection failed',\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * WebSocket 연결 해제 처리\r\n   * @param {Object} event - API Gateway WebSocket 이벤트\r\n   * @param {Object} context - Lambda 컨텍스트\r\n   * @returns {Promise<Object>} 응답\r\n   */\r\n  async handleDisconnect(event, context) {\r\n    const connectionId = event.requestContext.connectionId;\r\n\r\n    try {\r\n      debug('WebSocket disconnection', { connectionId });\r\n\r\n      const connectionInfo = this.connections.get(connectionId);\r\n      \r\n      if (connectionInfo) {\r\n        // 모든 구독에서 제거\r\n        connectionInfo.subscriptions.forEach(subscription => {\r\n          this.unsubscribeFromRoom(connectionId, subscription);\r\n        });\r\n\r\n        // 연결 정보 제거\r\n        this.connections.delete(connectionId);\r\n        this.connectionStats.activeConnections--;\r\n      }\r\n\r\n      info('WebSocket disconnected', { \r\n        connectionId, \r\n        totalConnections: this.connectionStats.activeConnections \r\n      });\r\n\r\n      return {\r\n        statusCode: 200,\r\n        body: 'Disconnected',\r\n      };\r\n    } catch (err) {\r\n      error('WebSocket disconnection failed', err, { connectionId });\r\n      return {\r\n        statusCode: 500,\r\n        body: 'Disconnection failed',\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * WebSocket 메시지 처리\r\n   * @param {Object} event - API Gateway WebSocket 이벤트\r\n   * @param {Object} context - Lambda 컨텍스트\r\n   * @returns {Promise<Object>} 응답\r\n   */\r\n  async handleMessage(event, context) {\r\n    const connectionId = event.requestContext.connectionId;\r\n    const routeKey = event.requestContext.routeKey;\r\n\r\n    try {\r\n      const message = JSON.parse(event.body || '{}');\r\n      \r\n      debug('WebSocket message received', { \r\n        connectionId, \r\n        routeKey, \r\n        messageType: message.type \r\n      });\r\n\r\n      // 연결 활동 시간 업데이트\r\n      this.updateLastActivity(connectionId);\r\n      this.connectionStats.totalMessages++;\r\n\r\n      // 메시지 타입별 처리\r\n      const response = await this.processMessage(connectionId, message, routeKey);\r\n\r\n      return {\r\n        statusCode: 200,\r\n        body: JSON.stringify(response || { status: 'processed' }),\r\n      };\r\n    } catch (err) {\r\n      error('WebSocket message processing failed', err, { connectionId });\r\n      \r\n      // 오류 메시지 전송\r\n      await this.sendMessage(connectionId, {\r\n        type: 'error',\r\n        message: 'Message processing failed',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n\r\n      this.connectionStats.totalErrors++;\r\n\r\n      return {\r\n        statusCode: 400,\r\n        body: 'Message processing failed',\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 메시지 처리\r\n   * @param {string} connectionId - 연결 ID\r\n   * @param {Object} message - 메시지 객체\r\n   * @param {string} routeKey - 라우트 키\r\n   * @returns {Promise<Object>} 처리 결과\r\n   */\r\n  async processMessage(connectionId, message, routeKey) {\r\n    const { type, data } = message;\r\n\r\n    switch (type) {\r\n      case 'subscribe':\r\n        return this.handleSubscribe(connectionId, data);\r\n        \r\n      case 'unsubscribe':\r\n        return this.handleUnsubscribe(connectionId, data);\r\n        \r\n      case 'ping':\r\n        return this.handlePing(connectionId);\r\n        \r\n      case 'get_flood_data':\r\n        return this.handleGetFloodData(connectionId, data);\r\n        \r\n      case 'proximity_check':\r\n        return this.handleProximityCheck(connectionId, data);\r\n        \r\n      default:\r\n        // 커스텀 메시지 핸들러 확인\r\n        const handler = this.messageHandlers.get(type);\r\n        if (handler) {\r\n          return handler(connectionId, data);\r\n        }\r\n        \r\n        warn('Unknown message type', { type, connectionId });\r\n        return { error: 'Unknown message type' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 구독 처리\r\n   * @param {string} connectionId - 연결 ID\r\n   * @param {Object} data - 구독 데이터\r\n   * @returns {Object} 처리 결과\r\n   */\r\n  handleSubscribe(connectionId, data) {\r\n    const { room, filters = {} } = data;\r\n\r\n    if (!room) {\r\n      return { error: 'Room name is required' };\r\n    }\r\n\r\n    this.subscribeToRoom(connectionId, room, filters);\r\n\r\n    debug('Client subscribed to room', { connectionId, room, filters });\r\n\r\n    return {\r\n      type: 'subscription_confirmed',\r\n      room,\r\n      filters,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 구독 해제 처리\r\n   * @param {string} connectionId - 연결 ID\r\n   * @param {Object} data - 구독 해제 데이터\r\n   * @returns {Object} 처리 결과\r\n   */\r\n  handleUnsubscribe(connectionId, data) {\r\n    const { room } = data;\r\n\r\n    if (!room) {\r\n      return { error: 'Room name is required' };\r\n    }\r\n\r\n    this.unsubscribeFromRoom(connectionId, room);\r\n\r\n    debug('Client unsubscribed from room', { connectionId, room });\r\n\r\n    return {\r\n      type: 'unsubscription_confirmed',\r\n      room,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Ping 처리\r\n   * @param {string} connectionId - 연결 ID\r\n   * @returns {Object} Pong 응답\r\n   */\r\n  handlePing(connectionId) {\r\n    return {\r\n      type: 'pong',\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 홍수 데이터 요청 처리\r\n   * @param {string} connectionId - 연결 ID\r\n   * @param {Object} data - 요청 데이터\r\n   * @returns {Promise<Object>} 홍수 데이터\r\n   */\r\n  async handleGetFloodData(connectionId, data) {\r\n    try {\r\n      // 실제 구현에서는 FloodDataAPI 서비스 사용\r\n      const floodData = await this.getFloodDataFromService(data);\r\n      \r\n      return {\r\n        type: 'flood_data_response',\r\n        data: floodData,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    } catch (err) {\r\n      error('Failed to get flood data', err, { connectionId });\r\n      return {\r\n        type: 'error',\r\n        message: 'Failed to get flood data',\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 근접성 검사 요청 처리\r\n   * @param {string} connectionId - 연결 ID\r\n   * @param {Object} data - 검사 데이터\r\n   * @returns {Promise<Object>} 근접성 검사 결과\r\n   */\r\n  async handleProximityCheck(connectionId, data) {\r\n    try {\r\n      // 실제 구현에서는 ProximityCheckService 사용\r\n      const proximityResult = await this.checkProximityFromService(data);\r\n      \r\n      return {\r\n        type: 'proximity_check_response',\r\n        data: proximityResult,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    } catch (err) {\r\n      error('Failed to check proximity', err, { connectionId });\r\n      return {\r\n        type: 'error',\r\n        message: 'Failed to check proximity',\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 룸 구독\r\n   * @param {string} connectionId - 연결 ID\r\n   * @param {string} room - 룸 이름\r\n   * @param {Object} filters - 필터 조건\r\n   */\r\n  subscribeToRoom(connectionId, room, filters = {}) {\r\n    // 룸이 없으면 생성\r\n    if (!this.rooms.has(room)) {\r\n      this.rooms.set(room, new Map());\r\n    }\r\n\r\n    // 연결을 룸에 추가\r\n    this.rooms.get(room).set(connectionId, {\r\n      connectionId,\r\n      filters,\r\n      subscribedAt: Date.now(),\r\n    });\r\n\r\n    // 연결 정보에 구독 추가\r\n    const connectionInfo = this.connections.get(connectionId);\r\n    if (connectionInfo) {\r\n      connectionInfo.subscriptions.add(room);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 룸 구독 해제\r\n   * @param {string} connectionId - 연결 ID\r\n   * @param {string} room - 룸 이름\r\n   */\r\n  unsubscribeFromRoom(connectionId, room) {\r\n    const roomConnections = this.rooms.get(room);\r\n    if (roomConnections) {\r\n      roomConnections.delete(connectionId);\r\n      \r\n      // 룸이 비어있으면 제거\r\n      if (roomConnections.size === 0) {\r\n        this.rooms.delete(room);\r\n      }\r\n    }\r\n\r\n    // 연결 정보에서 구독 제거\r\n    const connectionInfo = this.connections.get(connectionId);\r\n    if (connectionInfo) {\r\n      connectionInfo.subscriptions.delete(room);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 룸에 메시지 브로드캐스트\r\n   * @param {string} room - 룸 이름\r\n   * @param {Object} message - 메시지\r\n   * @param {Object} options - 브로드캐스트 옵션\r\n   */\r\n  async broadcastToRoom(room, message, options = {}) {\r\n    const roomConnections = this.rooms.get(room);\r\n    if (!roomConnections) {\r\n      debug('Room not found for broadcast', { room });\r\n      return;\r\n    }\r\n\r\n    const { excludeConnection = null, applyFilters = true } = options;\r\n    const broadcastPromises = [];\r\n\r\n    roomConnections.forEach((subscription, connectionId) => {\r\n      if (connectionId === excludeConnection) {\r\n        return;\r\n      }\r\n\r\n      // 필터 적용\r\n      if (applyFilters && !this.messageMatchesFilters(message, subscription.filters)) {\r\n        return;\r\n      }\r\n\r\n      broadcastPromises.push(this.sendMessage(connectionId, message));\r\n    });\r\n\r\n    try {\r\n      await Promise.allSettled(broadcastPromises);\r\n      debug('Message broadcasted to room', { \r\n        room, \r\n        recipientCount: broadcastPromises.length \r\n      });\r\n    } catch (err) {\r\n      error('Broadcast failed', err, { room });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 개별 연결에 메시지 전송\r\n   * @param {string} connectionId - 연결 ID\r\n   * @param {Object} message - 메시지\r\n   * @returns {Promise<boolean>} 전송 성공 여부\r\n   */\r\n  async sendMessage(connectionId, message) {\r\n    try {\r\n      // AWS API Gateway Management API 사용\r\n      const apiGatewayManagementApi = this.getApiGatewayManagementApi();\r\n      \r\n      await apiGatewayManagementApi.postToConnection({\r\n        ConnectionId: connectionId,\r\n        Data: JSON.stringify(message),\r\n      }).promise();\r\n\r\n      debug('Message sent to connection', { connectionId, messageType: message.type });\r\n      return true;\r\n    } catch (err) {\r\n      if (err.statusCode === 410) {\r\n        // 연결이 끊어진 경우\r\n        warn('Connection is stale, removing', { connectionId });\r\n        this.handleStaleConnection(connectionId);\r\n      } else {\r\n        error('Failed to send message', err, { connectionId });\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 메시지가 필터와 일치하는지 확인\r\n   * @param {Object} message - 메시지\r\n   * @param {Object} filters - 필터 조건\r\n   * @returns {boolean} 일치 여부\r\n   */\r\n  messageMatchesFilters(message, filters) {\r\n    if (!filters || Object.keys(filters).length === 0) {\r\n      return true;\r\n    }\r\n\r\n    // 지역 필터\r\n    if (filters.region && message.data?.region !== filters.region) {\r\n      return false;\r\n    }\r\n\r\n    // 심각도 필터\r\n    if (filters.severity && message.data?.severity !== filters.severity) {\r\n      return false;\r\n    }\r\n\r\n    // 경보 유형 필터\r\n    if (filters.alertType && message.data?.alertType !== filters.alertType) {\r\n      return false;\r\n    }\r\n\r\n    // 위치 기반 필터\r\n    if (filters.location && filters.radius) {\r\n      const distance = this.calculateDistance(\r\n        filters.location,\r\n        { lat: message.data?.latitude, lng: message.data?.longitude }\r\n      );\r\n      \r\n      if (distance > filters.radius) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 끊어진 연결 처리\r\n   * @param {string} connectionId - 연결 ID\r\n   */\r\n  handleStaleConnection(connectionId) {\r\n    const connectionInfo = this.connections.get(connectionId);\r\n    \r\n    if (connectionInfo) {\r\n      // 모든 구독에서 제거\r\n      connectionInfo.subscriptions.forEach(room => {\r\n        this.unsubscribeFromRoom(connectionId, room);\r\n      });\r\n\r\n      // 연결 정보 제거\r\n      this.connections.delete(connectionId);\r\n      this.connectionStats.activeConnections--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 연결 활동 시간 업데이트\r\n   * @param {string} connectionId - 연결 ID\r\n   */\r\n  updateLastActivity(connectionId) {\r\n    const connectionInfo = this.connections.get(connectionId);\r\n    if (connectionInfo) {\r\n      connectionInfo.lastActivity = Date.now();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 연결 메타데이터 추출\r\n   * @param {Object} event - WebSocket 이벤트\r\n   * @returns {Object} 메타데이터\r\n   */\r\n  extractConnectionMetadata(event) {\r\n    const headers = event.headers || {};\r\n    const requestContext = event.requestContext || {};\r\n\r\n    return {\r\n      userAgent: headers['User-Agent'],\r\n      origin: headers.Origin,\r\n      sourceIp: requestContext.identity?.sourceIp,\r\n      stage: requestContext.stage,\r\n      requestId: requestContext.requestId,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 커스텀 메시지 핸들러 등록\r\n   * @param {string} messageType - 메시지 타입\r\n   * @param {Function} handler - 핸들러 함수\r\n   */\r\n  registerMessageHandler(messageType, handler) {\r\n    this.messageHandlers.set(messageType, handler);\r\n    debug('Message handler registered', { messageType });\r\n  }\r\n\r\n  /**\r\n   * 연결 통계 조회\r\n   * @returns {Object} 연결 통계\r\n   */\r\n  getConnectionStats() {\r\n    return {\r\n      ...this.connectionStats,\r\n      roomCount: this.rooms.size,\r\n      connectionDetails: Array.from(this.connections.entries()).map(([id, info]) => ({\r\n        connectionId: id,\r\n        connectedAt: info.connectedAt,\r\n        lastActivity: info.lastActivity,\r\n        subscriptions: Array.from(info.subscriptions),\r\n      })),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * API Gateway Management API 인스턴스 가져오기\r\n   * @returns {Object} API Gateway Management API\r\n   */\r\n  getApiGatewayManagementApi() {\r\n    const AWS = require('aws-sdk');\r\n    \r\n    return new AWS.ApiGatewayManagementApi({\r\n      endpoint: process.env.WEBSOCKET_API_ENDPOINT,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 거리 계산\r\n   * @param {Object} pos1 - 첫 번째 위치\r\n   * @param {Object} pos2 - 두 번째 위치\r\n   * @returns {number} 거리 (미터)\r\n   */\r\n  calculateDistance(pos1, pos2) {\r\n    if (!pos1 || !pos2 || !pos1.lat || !pos1.lng || !pos2.lat || !pos2.lng) {\r\n      return Infinity;\r\n    }\r\n\r\n    const R = 6371000; // 지구 반지름 (미터)\r\n    const dLat = (pos2.lat - pos1.lat) * Math.PI / 180;\r\n    const dLng = (pos2.lng - pos1.lng) * Math.PI / 180;\r\n    const a = \r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(pos1.lat * Math.PI / 180) * Math.cos(pos2.lat * Math.PI / 180) *\r\n      Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c;\r\n  }\r\n\r\n  /**\r\n   * 홍수 데이터 서비스에서 데이터 가져오기 (플레이스홀더)\r\n   * @param {Object} params - 요청 파라미터\r\n   * @returns {Promise<Object>} 홍수 데이터\r\n   */\r\n  async getFloodDataFromService(params) {\r\n    // 실제 구현에서는 적절한 서비스 호출\r\n    return {\r\n      data: [],\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 근접성 검사 서비스에서 결과 가져오기 (플레이스홀더)\r\n   * @param {Object} params - 검사 파라미터\r\n   * @returns {Promise<Object>} 근접성 검사 결과\r\n   */\r\n  async checkProximityFromService(params) {\r\n    // 실제 구현에서는 적절한 서비스 호출\r\n    return {\r\n      hasProximityAlert: false,\r\n      alertPoints: [],\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 정리\r\n   */\r\n  cleanup() {\r\n    this.connections.clear();\r\n    this.rooms.clear();\r\n    this.messageHandlers.clear();\r\n    info('WebSocketManager cleaned up');\r\n  }\r\n}\r\n\r\n// 싱글톤 인스턴스 생성\r\nconst webSocketManager = new WebSocketManager();\r\n\r\nmodule.exports = {\r\n  WebSocketManager,\r\n  webSocketManager,\r\n  \r\n  // Lambda 핸들러 함수들\r\n  connectHandler: (event, context) => webSocketManager.handleConnect(event, context),\r\n  disconnectHandler: (event, context) => webSocketManager.handleDisconnect(event, context),\r\n  messageHandler: (event, context) => webSocketManager.handleMessage(event, context),\r\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(9888);\n",""],"names":["environment","require","LOG_LEVELS","ERROR","WARN","INFO","DEBUG","currentLogLevel","isDevelopment","formatLog","level","message","meta","_objectSpread","timestamp","Date","toISOString","stage","log","levelName","logData","console","error","JSON","stringify","warn","errorMeta","name","stack","info","debug","logRequest","event","functionName","function","httpMethod","path","queryStringParameters","headers","logResponse","response","duration","statusCode","module","exports","requiredEnvVars","optionalEnvVars","validateEnvironment","missing","filter","envVar","process","env","length","Error","join","STAGE","region","REGION","nodeEnv","NODE_ENV","dynamodbTableName","DYNAMODB_TABLE_NAME","naver","clientId","NAVER_CLIENT_ID","clientSecret","NAVER_CLIENT_SECRET","hanriver","baseUrl","HANRIVER_BASE_URL","endpoints","waterlevel","HANRIVER_WATERLEVEL_ENDPOINT","realtime","HANRIVER_REALTIME_ENDPOINT","forecast","HANRIVER_FORECAST_ENDPOINT","isTest","isProduction","isOffline","IS_OFFLINE","WebSocketManager","constructor","connections","Map","rooms","messageHandlers","connectionStats","totalConnections","activeConnections","totalMessages","totalErrors","handleConnect","context","connectionId","requestContext","routeKey","connectionInfo","connectedAt","now","lastActivity","subscriptions","Set","metadata","extractConnectionMetadata","set","sendMessage","type","body","err","handleDisconnect","get","forEach","subscription","unsubscribeFromRoom","delete","handleMessage","parse","messageType","updateLastActivity","processMessage","status","data","handleSubscribe","handleUnsubscribe","handlePing","handleGetFloodData","handleProximityCheck","handler","room","filters","subscribeToRoom","floodData","getFloodDataFromService","proximityResult","checkProximityFromService","has","subscribedAt","add","roomConnections","size","broadcastToRoom","options","excludeConnection","applyFilters","broadcastPromises","messageMatchesFilters","push","Promise","allSettled","recipientCount","apiGatewayManagementApi","getApiGatewayManagementApi","postToConnection","ConnectionId","Data","promise","handleStaleConnection","Object","keys","severity","alertType","location","radius","distance","calculateDistance","lat","latitude","lng","longitude","userAgent","origin","Origin","sourceIp","identity","requestId","registerMessageHandler","getConnectionStats","roomCount","connectionDetails","Array","from","entries","map","id","AWS","ApiGatewayManagementApi","endpoint","WEBSOCKET_API_ENDPOINT","pos1","pos2","Infinity","R","dLat","Math","PI","dLng","a","sin","cos","c","atan2","sqrt","params","hasProximityAlert","alertPoints","cleanup","clear","webSocketManager","connectHandler","disconnectHandler","messageHandler"],"sourceRoot":""}