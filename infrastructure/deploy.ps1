# 침수 정보 앱 AWS 인프라 배포 스크립트 (PowerShell)

param(
    [string]$Stage = "dev",
    [string]$Region = "ap-northeast-2"
)

# 색상 함수 정의
function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# 기본 설정
$StackPrefix = "flood-info-app"
$DynamoDBStack = "$StackPrefix-dynamodb-$Stage"
$S3Stack = "$StackPrefix-s3-$Stage"

Write-Info "Starting deployment for stage: $Stage in region: $Region"

# AWS CLI 설치 확인
try {
    aws --version | Out-Null
    Write-Success "AWS CLI verified"
} catch {
    Write-Error "AWS CLI is not installed. Please install AWS CLI first."
    exit 1
}

# AWS 자격 증명 확인
try {
    aws sts get-caller-identity | Out-Null
    Write-Success "AWS credentials verified"
} catch {
    Write-Error "AWS credentials not configured. Please run 'aws configure' first."
    exit 1
}

# DynamoDB 스택 배포
Write-Info "Deploying DynamoDB stack: $DynamoDBStack"
try {
    aws cloudformation deploy `
        --template-file dynamodb-table.yml `
        --stack-name $DynamoDBStack `
        --parameter-overrides Stage=$Stage TableName="flood-info-table" `
        --region $Region `
        --capabilities CAPABILITY_IAM `
        --tags Project=FloodInfoApp Stage=$Stage Component=Database

    if ($LASTEXITCODE -eq 0) {
        Write-Success "DynamoDB stack deployed successfully"
    } else {
        throw "DynamoDB deployment failed"
    }
} catch {
    Write-Error "Failed to deploy DynamoDB stack: $_"
    exit 1
}

# S3 스택 배포
Write-Info "Deploying S3 stack: $S3Stack"
try {
    aws cloudformation deploy `
        --template-file s3-bucket.yml `
        --stack-name $S3Stack `
        --parameter-overrides Stage=$Stage BucketName="flood-info-app" `
        --region $Region `
        --capabilities CAPABILITY_IAM `
        --tags Project=FloodInfoApp Stage=$Stage Component=Frontend

    if ($LASTEXITCODE -eq 0) {
        Write-Success "S3 stack deployed successfully"
    } else {
        throw "S3 deployment failed"
    }
} catch {
    Write-Error "Failed to deploy S3 stack: $_"
    exit 1
}

# 스택 출력 정보 가져오기
Write-Info "Getting stack outputs..."

# DynamoDB 테이블 정보
$FloodTable = aws cloudformation describe-stacks `
    --stack-name $DynamoDBStack `
    --region $Region `
    --query "Stacks[0].Outputs[?OutputKey=='FloodDataTableName'].OutputValue" `
    --output text

$APISourceTable = aws cloudformation describe-stacks `
    --stack-name $DynamoDBStack `
    --region $Region `
    --query "Stacks[0].Outputs[?OutputKey=='APISourceTableName'].OutputValue" `
    --output text

# S3 버킷 정보
$WebsiteBucket = aws cloudformation describe-stacks `
    --stack-name $S3Stack `
    --region $Region `
    --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucketName'].OutputValue" `
    --output text

$WebsiteURL = aws cloudformation describe-stacks `
    --stack-name $S3Stack `
    --region $Region `
    --query "Stacks[0].Outputs[?OutputKey=='WebsiteURL'].OutputValue" `
    --output text

# 결과 출력
Write-Success "Infrastructure deployment completed!"
Write-Host ""
Write-Host "=== Deployment Summary ===" -ForegroundColor Cyan
Write-Host "Stage: $Stage"
Write-Host "Region: $Region"
Write-Host ""
Write-Host "DynamoDB Tables:"
Write-Host "  - Flood Data Table: $FloodTable"
Write-Host "  - API Source Table: $APISourceTable"
Write-Host ""
Write-Host "S3 Buckets:"
Write-Host "  - Website Bucket: $WebsiteBucket"
Write-Host "  - Website URL: $WebsiteURL"
Write-Host ""
Write-Host "Next steps:"
Write-Host "1. Deploy Lambda functions using Serverless Framework"
Write-Host "2. Build and upload frontend to S3 bucket"
Write-Host "3. Configure environment variables"
Write-Host ""

# 환경 변수 파일 생성
$EnvFile = "../lambda-functions/.env.$Stage"
Write-Info "Creating environment file: $EnvFile"

$EnvContent = @"
# AWS Infrastructure Environment Variables
# Generated by deploy.ps1 on $(Get-Date)

STAGE=$Stage
REGION=$Region
DYNAMODB_TABLE_NAME=$FloodTable
API_SOURCE_TABLE_NAME=$APISourceTable
WEBSITE_BUCKET_NAME=$WebsiteBucket
WEBSITE_URL=$WebsiteURL

# Naver API Keys
NAVER_CLIENT_ID=$env:NAVER_CLIENT_ID
NAVER_CLIENT_SECRET=$env:NAVER_CLIENT_SECRET
"@

$EnvContent | Out-File -FilePath $EnvFile -Encoding UTF8

Write-Success "Environment file created: $EnvFile"
Write-Warning "Please update the API keys in $EnvFile"

Write-Host ""
Write-Success "Deployment completed successfully!"