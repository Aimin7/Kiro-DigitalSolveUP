{"version":3,"file":"819.js","mappings":";;;;;;;;;;;;;;;;AAAoC;AACR;AACc;AACnC;AACP,mBAAmB,kDAAU;AAC7B;AACA,WAAW,0CAAI,CAAC,gEAAU,+BAA+B,UAAU;AACnE;;;;;;;;;;;;;ACPuD;AACX;AACrC;AACP;AACA,eAAe,+DAAa;AAC5B,KAAK;AACL;AACA,QAAQ,+DAAa;AACrB,KAAK;AACL;AACA,eAAe,yEAAc;AAC7B,KAAK;AACL;AACA,QAAQ,yEAAc;AACtB,KAAK;AACL;;;;;;;;;;;;;;;ACf4C;AACgB;AAC5D,QAAQ,WAAW,EAAE,wCAAU;AACxB;AACA;AACP;AACA;AACA;AACA,6BAA6B,kFAAmB;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACXO;AACP;AACA,YAAY,8FAA8F;AAC1G,UAAU,6BAA6B;AACvC;AACA,gBAAgB,uCAAuC,QAAQ,mGAAqC;AACpG;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,kEAAkE,WAAW;AAC7E;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;ACxB4D;AACS;AACI;AACvC;AACY;AAC9C;AACA;AACA;AACO,gCAAgC;AACvC;AACA;AACA;AACA;AACA;AACA,kBAAkB,wDAAwB;AAC1C;AACA,SAAS;AACT;AACA,8BAA8B,YAAY;AAC1C;AACA,0BAA0B,sDAAuB;AACjD,YAAY,6BAAY,yBAAyB,mBAAmB;AACpE;AACA;AACA,KAAK;AACL;AACA,QAAQ,oDAAoB;AAC5B;AACA;AACA;;;AC7BgC;AACD","sources":["webpack://flood-info-backend/./node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js","webpack://flood-info-backend/./node_modules/@smithy/shared-ini-file-loader/dist-es/externalDataInterceptor.js","webpack://flood-info-backend/./node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js","webpack://flood-info-backend/./node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js","webpack://flood-info-backend/./node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js","webpack://flood-info-backend/./node_modules/@aws-sdk/credential-provider-web-identity/dist-es/index.js"],"sourcesContent":["import { createHash } from \"crypto\";\nimport { join } from \"path\";\nimport { getHomeDir } from \"./getHomeDir\";\nexport const getSSOTokenFilepath = (id) => {\n    const hasher = createHash(\"sha1\");\n    const cacheName = hasher.update(id).digest(\"hex\");\n    return join(getHomeDir(), \".aws\", \"sso\", \"cache\", `${cacheName}.json`);\n};\n","import { tokenIntercept } from \"./getSSOTokenFromFile\";\nimport { fileIntercept } from \"./slurpFile\";\nexport const externalDataInterceptor = {\n    getFileRecord() {\n        return fileIntercept;\n    },\n    interceptFile(path, contents) {\n        fileIntercept[path] = Promise.resolve(contents);\n    },\n    getTokenRecord() {\n        return tokenIntercept;\n    },\n    interceptToken(id, contents) {\n        tokenIntercept[id] = contents;\n    },\n};\n","import { promises as fsPromises } from \"fs\";\nimport { getSSOTokenFilepath } from \"./getSSOTokenFilepath\";\nconst { readFile } = fsPromises;\nexport const tokenIntercept = {};\nexport const getSSOTokenFromFile = async (id) => {\n    if (tokenIntercept[id]) {\n        return tokenIntercept[id];\n    }\n    const ssoTokenFilepath = getSSOTokenFilepath(id);\n    const ssoTokenText = await readFile(ssoTokenFilepath, \"utf8\");\n    return JSON.parse(ssoTokenText);\n};\n","export const fromWebToken = (init) => async (awsIdentityProperties) => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity - fromWebToken\");\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;\n    let { roleAssumerWithWebIdentity } = init;\n    if (!roleAssumerWithWebIdentity) {\n        const { getDefaultRoleAssumerWithWebIdentity } = await import(\"@aws-sdk/nested-clients/sts\");\n        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({\n            ...init.clientConfig,\n            credentialProviderLogger: init.logger,\n            parentClientConfig: {\n                ...awsIdentityProperties?.callerClientConfig,\n                ...init.parentClientConfig,\n            },\n        }, init.clientPlugins);\n    }\n    return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n    });\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { externalDataInterceptor } from \"@smithy/shared-ini-file-loader\";\nimport { readFileSync } from \"fs\";\nimport { fromWebToken } from \"./fromWebToken\";\nconst ENV_TOKEN_FILE = \"AWS_WEB_IDENTITY_TOKEN_FILE\";\nconst ENV_ROLE_ARN = \"AWS_ROLE_ARN\";\nconst ENV_ROLE_SESSION_NAME = \"AWS_ROLE_SESSION_NAME\";\nexport const fromTokenFile = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity - fromTokenFile\");\n    const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];\n    const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];\n    const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];\n    if (!webIdentityTokenFile || !roleArn) {\n        throw new CredentialsProviderError(\"Web identity configuration not specified\", {\n            logger: init.logger,\n        });\n    }\n    const credentials = await fromWebToken({\n        ...init,\n        webIdentityToken: externalDataInterceptor?.getTokenRecord?.()[webIdentityTokenFile] ??\n            readFileSync(webIdentityTokenFile, { encoding: \"ascii\" }),\n        roleArn,\n        roleSessionName,\n    })();\n    if (webIdentityTokenFile === process.env[ENV_TOKEN_FILE]) {\n        setCredentialFeature(credentials, \"CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN\", \"h\");\n    }\n    return credentials;\n};\n","export * from \"./fromTokenFile\";\nexport * from \"./fromWebToken\";\n"],"names":[],"sourceRoot":""}