{"version":3,"file":"src/handlers/healthHandler.js","mappings":"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","sources":["webpack://flood-info-backend/./src/utils/logger.js","webpack://flood-info-backend/./src/config/environment.js","webpack://flood-info-backend/./src/middleware/errorHandler.js","webpack://flood-info-backend/external commonjs2 \"aws-sdk\"","webpack://flood-info-backend/./src/middleware/security.js","webpack://flood-info-backend/./src/utils/response.js","webpack://flood-info-backend/./src/config/dynamodb.js","webpack://flood-info-backend/webpack/bootstrap","webpack://flood-info-backend/./src/handlers/healthHandler.js"],"sourcesContent":["// 로깅 유틸리티\r\n\r\nconst environment = require('../config/environment');\r\n\r\n/**\r\n * 로그 레벨 정의\r\n */\r\nconst LOG_LEVELS = {\r\n  ERROR: 0,\r\n  WARN: 1,\r\n  INFO: 2,\r\n  DEBUG: 3,\r\n};\r\n\r\n/**\r\n * 현재 로그 레벨 설정\r\n */\r\nconst currentLogLevel = environment.isDevelopment ? LOG_LEVELS.DEBUG : LOG_LEVELS.INFO;\r\n\r\n/**\r\n * 로그 메시지 포맷팅\r\n * @param {string} level - 로그 레벨\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n * @returns {Object} 포맷된 로그 객체\r\n */\r\nfunction formatLog(level, message, meta = {}) {\r\n  return {\r\n    timestamp: new Date().toISOString(),\r\n    level,\r\n    message,\r\n    stage: environment.stage,\r\n    ...meta,\r\n  };\r\n}\r\n\r\n/**\r\n * 로그 출력 함수\r\n * @param {number} level - 로그 레벨 숫자\r\n * @param {string} levelName - 로그 레벨 이름\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction log(level, levelName, message, meta = {}) {\r\n  if (level <= currentLogLevel) {\r\n    const logData = formatLog(levelName, message, meta);\r\n    \r\n    if (level === LOG_LEVELS.ERROR) {\r\n      console.error(JSON.stringify(logData));\r\n    } else if (level === LOG_LEVELS.WARN) {\r\n      console.warn(JSON.stringify(logData));\r\n    } else {\r\n      console.log(JSON.stringify(logData));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 에러 로그\r\n * @param {string} message - 메시지\r\n * @param {Error|Object} error - 에러 객체\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction error(message, error = null, meta = {}) {\r\n  const errorMeta = {\r\n    ...meta,\r\n    error: error ? {\r\n      name: error.name,\r\n      message: error.message,\r\n      stack: error.stack,\r\n    } : null,\r\n  };\r\n  \r\n  log(LOG_LEVELS.ERROR, 'ERROR', message, errorMeta);\r\n}\r\n\r\n/**\r\n * 경고 로그\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction warn(message, meta = {}) {\r\n  log(LOG_LEVELS.WARN, 'WARN', message, meta);\r\n}\r\n\r\n/**\r\n * 정보 로그\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction info(message, meta = {}) {\r\n  log(LOG_LEVELS.INFO, 'INFO', message, meta);\r\n}\r\n\r\n/**\r\n * 디버그 로그\r\n * @param {string} message - 메시지\r\n * @param {Object} meta - 추가 메타데이터\r\n */\r\nfunction debug(message, meta = {}) {\r\n  log(LOG_LEVELS.DEBUG, 'DEBUG', message, meta);\r\n}\r\n\r\n/**\r\n * API 요청 로그\r\n * @param {Object} event - Lambda 이벤트 객체\r\n * @param {string} functionName - 함수명\r\n */\r\nfunction logRequest(event, functionName) {\r\n  info('API Request', {\r\n    function: functionName,\r\n    httpMethod: event.httpMethod,\r\n    path: event.path,\r\n    queryStringParameters: event.queryStringParameters,\r\n    headers: {\r\n      'user-agent': event.headers?.['user-agent'],\r\n      'x-forwarded-for': event.headers?.['x-forwarded-for'],\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * API 응답 로그\r\n * @param {Object} response - Lambda 응답 객체\r\n * @param {string} functionName - 함수명\r\n * @param {number} duration - 실행 시간 (ms)\r\n */\r\nfunction logResponse(response, functionName, duration) {\r\n  info('API Response', {\r\n    function: functionName,\r\n    statusCode: response.statusCode,\r\n    duration: `${duration}ms`,\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  error,\r\n  warn,\r\n  info,\r\n  debug,\r\n  logRequest,\r\n  logResponse,\r\n  LOG_LEVELS,\r\n};","// 환경 변수 설정 및 검증\r\n\r\nconst requiredEnvVars = [\r\n  'STAGE',\r\n  'REGION',\r\n  'DYNAMODB_TABLE_NAME',\r\n];\r\n\r\nconst optionalEnvVars = [\r\n  'NAVER_CLIENT_ID',\r\n  'NAVER_CLIENT_SECRET',\r\n  'HANRIVER_BASE_URL',\r\n  'HANRIVER_WATERLEVEL_ENDPOINT',\r\n  'HANRIVER_REALTIME_ENDPOINT',\r\n  'HANRIVER_FORECAST_ENDPOINT',\r\n];\r\n\r\n// 환경 변수 검증\r\nfunction validateEnvironment() {\r\n  const missing = requiredEnvVars.filter((envVar) => !process.env[envVar]);\r\n  \r\n  if (missing.length > 0) {\r\n    throw new Error(`Missing required environment variables: ${missing.join(', ')}`);\r\n  }\r\n}\r\n\r\n// 환경 변수 객체 생성\r\nconst environment = {\r\n  // 기본 설정\r\n  stage: process.env.STAGE,\r\n  region: process.env.REGION,\r\n  nodeEnv: process.env.NODE_ENV || 'production',\r\n  \r\n  // AWS 설정\r\n  dynamodbTableName: process.env.DYNAMODB_TABLE_NAME,\r\n  \r\n  // 네이버 API 설정\r\n  naver: {\r\n    clientId: process.env.NAVER_CLIENT_ID,\r\n    clientSecret: process.env.NAVER_CLIENT_SECRET,\r\n  },\r\n  \r\n  // 한강홍수통제소 API 설정\r\n  hanriver: {\r\n    baseUrl: process.env.HANRIVER_BASE_URL || 'http://211.188.52.85:9191',\r\n    endpoints: {\r\n      waterlevel: process.env.HANRIVER_WATERLEVEL_ENDPOINT || '/waterlevelinfo/info.json',\r\n      realtime: process.env.HANRIVER_REALTIME_ENDPOINT || '/getWaterLevel1D/list/1D/1018683/20230701/20230930.json',\r\n      forecast: process.env.HANRIVER_FORECAST_ENDPOINT || '/fldfct/list/20230715.json',\r\n    },\r\n  },\r\n  \r\n  // 개발 환경 여부\r\n  isDevelopment: process.env.NODE_ENV === 'development',\r\n  isTest: process.env.NODE_ENV === 'test',\r\n  isProduction: process.env.NODE_ENV === 'production',\r\n  isOffline: process.env.IS_OFFLINE === 'true',\r\n};\r\n\r\n// 환경 변수 검증 실행 (테스트 환경 제외)\r\nif (!environment.isTest) {\r\n  validateEnvironment();\r\n}\r\n\r\nmodule.exports = environment;","// errorHandler.js\r\n// 한강홍수통제소 및 네이버 API 오류 처리 및 로깅 미들웨어\r\n\r\nconst { error, warn, info } = require('../utils/logger');\r\nconst { errorResponse } = require('../utils/response');\r\n\r\n/**\r\n * 오류 처리 미들웨어 클래스\r\n */\r\nclass ErrorHandler {\r\n  constructor() {\r\n    this.errorCounts = new Map();\r\n    this.errorPatterns = new Map();\r\n    this.circuitBreakers = new Map();\r\n  }\r\n\r\n  /**\r\n   * Lambda 함수용 오류 처리 래퍼\r\n   * @param {Function} handler - Lambda 핸들러 함수\r\n   * @returns {Function} 래핑된 핸들러\r\n   */\r\n  wrapLambdaHandler(handler) {\r\n    return async (event, context) => {\r\n      const startTime = Date.now();\r\n      const requestId = context.awsRequestId;\r\n\r\n      try {\r\n        // 요청 로깅\r\n        info('Lambda invocation started', {\r\n          requestId,\r\n          functionName: context.functionName,\r\n          httpMethod: event.httpMethod,\r\n          path: event.path,\r\n          userAgent: event.headers?.['User-Agent'],\r\n          sourceIp: event.requestContext?.identity?.sourceIp,\r\n        });\r\n\r\n        // 핸들러 실행\r\n        const result = await handler(event, context);\r\n\r\n        // 성공 로깅\r\n        info('Lambda invocation completed', {\r\n          requestId,\r\n          statusCode: result.statusCode,\r\n          duration: Date.now() - startTime,\r\n        });\r\n\r\n        return result;\r\n      } catch (err) {\r\n        // 오류 처리 및 로깅\r\n        return this.handleLambdaError(err, event, context, startTime);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Lambda 오류 처리\r\n   * @param {Error} err - 발생한 오류\r\n   * @param {Object} event - Lambda 이벤트\r\n   * @param {Object} context - Lambda 컨텍스트\r\n   * @param {number} startTime - 시작 시간\r\n   * @returns {Object} 오류 응답\r\n   */\r\n  handleLambdaError(err, event, context, startTime) {\r\n    const requestId = context.awsRequestId;\r\n    const duration = Date.now() - startTime;\r\n\r\n    // 오류 분류 및 로깅\r\n    const errorInfo = this.classifyError(err);\r\n    \r\n    error('Lambda invocation failed', err, {\r\n      requestId,\r\n      functionName: context.functionName,\r\n      httpMethod: event.httpMethod,\r\n      path: event.path,\r\n      duration,\r\n      errorType: errorInfo.type,\r\n      errorCode: errorInfo.code,\r\n      isRetryable: errorInfo.retryable,\r\n    });\r\n\r\n    // 오류 통계 업데이트\r\n    this.updateErrorStats(errorInfo.type, requestId);\r\n\r\n    // 서킷 브레이커 확인\r\n    this.checkCircuitBreaker(errorInfo.type);\r\n\r\n    // 클라이언트 응답 생성\r\n    return this.generateErrorResponse(errorInfo, requestId);\r\n  }\r\n\r\n  /**\r\n   * 오류 분류\r\n   * @param {Error} err - 오류 객체\r\n   * @returns {Object} 분류된 오류 정보\r\n   */\r\n  classifyError(err) {\r\n    const errorInfo = {\r\n      type: 'UNKNOWN_ERROR',\r\n      code: 'INTERNAL_ERROR',\r\n      message: err.message || 'An unexpected error occurred',\r\n      statusCode: 500,\r\n      retryable: false,\r\n      clientMessage: 'Internal server error',\r\n    };\r\n\r\n    // 네트워크 오류\r\n    if (err.code === 'ECONNREFUSED' || err.code === 'ENOTFOUND' || err.code === 'ETIMEDOUT') {\r\n      errorInfo.type = 'NETWORK_ERROR';\r\n      errorInfo.code = err.code;\r\n      errorInfo.statusCode = 503;\r\n      errorInfo.retryable = true;\r\n      errorInfo.clientMessage = 'Service temporarily unavailable';\r\n    }\r\n    // HTTP 오류\r\n    else if (err.response) {\r\n      const status = err.response.status;\r\n      errorInfo.type = 'HTTP_ERROR';\r\n      errorInfo.code = `HTTP_${status}`;\r\n      errorInfo.statusCode = status;\r\n      \r\n      if (status >= 500) {\r\n        errorInfo.retryable = true;\r\n        errorInfo.clientMessage = 'External service error';\r\n      } else if (status === 429) {\r\n        errorInfo.type = 'RATE_LIMIT_ERROR';\r\n        errorInfo.retryable = true;\r\n        errorInfo.clientMessage = 'Rate limit exceeded';\r\n      } else if (status >= 400) {\r\n        errorInfo.retryable = false;\r\n        errorInfo.clientMessage = 'Bad request';\r\n      }\r\n    }\r\n    // 한강홍수통제소 API 오류\r\n    else if (err.message.includes('HanRiver') || err.message.includes('한강홍수통제소')) {\r\n      errorInfo.type = 'HANRIVER_API_ERROR';\r\n      errorInfo.code = 'HANRIVER_API_FAILED';\r\n      errorInfo.statusCode = 502;\r\n      errorInfo.retryable = true;\r\n      errorInfo.clientMessage = 'Flood data service temporarily unavailable';\r\n    }\r\n    // 네이버 API 오류\r\n    else if (err.message.includes('Naver') || err.message.includes('네이버')) {\r\n      errorInfo.type = 'NAVER_API_ERROR';\r\n      errorInfo.code = 'NAVER_API_FAILED';\r\n      errorInfo.statusCode = 502;\r\n      errorInfo.retryable = true;\r\n      errorInfo.clientMessage = 'Map service temporarily unavailable';\r\n    }\r\n    // DynamoDB 오류\r\n    else if (err.code && err.code.startsWith('Dynamo')) {\r\n      errorInfo.type = 'DATABASE_ERROR';\r\n      errorInfo.code = err.code;\r\n      errorInfo.statusCode = 503;\r\n      errorInfo.retryable = true;\r\n      errorInfo.clientMessage = 'Database service temporarily unavailable';\r\n    }\r\n    // 검증 오류\r\n    else if (err.name === 'ValidationError' || err.message.includes('validation')) {\r\n      errorInfo.type = 'VALIDATION_ERROR';\r\n      errorInfo.code = 'VALIDATION_FAILED';\r\n      errorInfo.statusCode = 400;\r\n      errorInfo.retryable = false;\r\n      errorInfo.clientMessage = 'Invalid request data';\r\n    }\r\n    // 권한 오류\r\n    else if (err.code === 'AccessDenied' || err.message.includes('permission')) {\r\n      errorInfo.type = 'PERMISSION_ERROR';\r\n      errorInfo.code = 'ACCESS_DENIED';\r\n      errorInfo.statusCode = 403;\r\n      errorInfo.retryable = false;\r\n      errorInfo.clientMessage = 'Access denied';\r\n    }\r\n    // 타임아웃 오류\r\n    else if (err.code === 'TimeoutError' || err.message.includes('timeout')) {\r\n      errorInfo.type = 'TIMEOUT_ERROR';\r\n      errorInfo.code = 'REQUEST_TIMEOUT';\r\n      errorInfo.statusCode = 504;\r\n      errorInfo.retryable = true;\r\n      errorInfo.clientMessage = 'Request timeout';\r\n    }\r\n\r\n    return errorInfo;\r\n  }\r\n\r\n  /**\r\n   * 오류 통계 업데이트\r\n   * @param {string} errorType - 오류 타입\r\n   * @param {string} requestId - 요청 ID\r\n   */\r\n  updateErrorStats(errorType, requestId) {\r\n    const now = Date.now();\r\n    const windowSize = 300000; // 5분 윈도우\r\n\r\n    if (!this.errorCounts.has(errorType)) {\r\n      this.errorCounts.set(errorType, []);\r\n    }\r\n\r\n    const errors = this.errorCounts.get(errorType);\r\n    errors.push({ timestamp: now, requestId });\r\n\r\n    // 오래된 오류 제거 (5분 이상)\r\n    const cutoff = now - windowSize;\r\n    const recentErrors = errors.filter(e => e.timestamp > cutoff);\r\n    this.errorCounts.set(errorType, recentErrors);\r\n\r\n    // 오류 패턴 감지\r\n    this.detectErrorPatterns(errorType, recentErrors);\r\n  }\r\n\r\n  /**\r\n   * 오류 패턴 감지\r\n   * @param {string} errorType - 오류 타입\r\n   * @param {Array} recentErrors - 최근 오류 목록\r\n   */\r\n  detectErrorPatterns(errorType, recentErrors) {\r\n    const errorCount = recentErrors.length;\r\n    const timeWindow = 300000; // 5분\r\n\r\n    // 높은 오류율 감지\r\n    if (errorCount >= 10) {\r\n      warn('High error rate detected', {\r\n        errorType,\r\n        errorCount,\r\n        timeWindow: timeWindow / 1000,\r\n      });\r\n\r\n      this.errorPatterns.set(errorType, {\r\n        pattern: 'HIGH_ERROR_RATE',\r\n        count: errorCount,\r\n        detectedAt: Date.now(),\r\n      });\r\n    }\r\n\r\n    // 급격한 오류 증가 감지\r\n    const lastMinute = recentErrors.filter(e => \r\n      e.timestamp > Date.now() - 60000\r\n    ).length;\r\n\r\n    if (lastMinute >= 5) {\r\n      warn('Error spike detected', {\r\n        errorType,\r\n        errorsInLastMinute: lastMinute,\r\n      });\r\n\r\n      this.errorPatterns.set(errorType, {\r\n        pattern: 'ERROR_SPIKE',\r\n        count: lastMinute,\r\n        detectedAt: Date.now(),\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 서킷 브레이커 확인\r\n   * @param {string} errorType - 오류 타입\r\n   */\r\n  checkCircuitBreaker(errorType) {\r\n    const errors = this.errorCounts.get(errorType) || [];\r\n    const threshold = 20; // 5분간 20개 오류 시 서킷 브레이커 작동\r\n    const timeWindow = 300000; // 5분\r\n\r\n    if (errors.length >= threshold) {\r\n      const circuitBreaker = {\r\n        isOpen: true,\r\n        openedAt: Date.now(),\r\n        errorCount: errors.length,\r\n        timeWindow,\r\n      };\r\n\r\n      this.circuitBreakers.set(errorType, circuitBreaker);\r\n\r\n      error('Circuit breaker opened', {\r\n        errorType,\r\n        errorCount: errors.length,\r\n        threshold,\r\n      });\r\n\r\n      // 30초 후 반개방 상태로 전환\r\n      setTimeout(() => {\r\n        const cb = this.circuitBreakers.get(errorType);\r\n        if (cb && cb.isOpen) {\r\n          cb.isOpen = false;\r\n          cb.isHalfOpen = true;\r\n          info('Circuit breaker half-opened', { errorType });\r\n        }\r\n      }, 30000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 서킷 브레이커 상태 확인\r\n   * @param {string} errorType - 오류 타입\r\n   * @returns {Object|null} 서킷 브레이커 상태\r\n   */\r\n  getCircuitBreakerStatus(errorType) {\r\n    return this.circuitBreakers.get(errorType) || null;\r\n  }\r\n\r\n  /**\r\n   * 오류 응답 생성\r\n   * @param {Object} errorInfo - 오류 정보\r\n   * @param {string} requestId - 요청 ID\r\n   * @returns {Object} HTTP 응답\r\n   */\r\n  generateErrorResponse(errorInfo, requestId) {\r\n    const response = {\r\n      error: {\r\n        code: errorInfo.code,\r\n        message: errorInfo.clientMessage,\r\n        type: errorInfo.type,\r\n        requestId,\r\n        timestamp: new Date().toISOString(),\r\n        retryable: errorInfo.retryable,\r\n      },\r\n    };\r\n\r\n    // 재시도 가능한 오류인 경우 Retry-After 헤더 추가\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      'X-Request-ID': requestId,\r\n    };\r\n\r\n    if (errorInfo.retryable) {\r\n      headers['Retry-After'] = '30'; // 30초 후 재시도\r\n    }\r\n\r\n    return {\r\n      statusCode: errorInfo.statusCode,\r\n      headers,\r\n      body: JSON.stringify(response),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * API별 오류 처리기\r\n   * @param {string} apiType - API 타입 ('hanriver', 'naver')\r\n   * @returns {Function} 오류 처리 함수\r\n   */\r\n  createAPIErrorHandler(apiType) {\r\n    return (err, context = {}) => {\r\n      const enhancedError = new Error(err.message);\r\n      enhancedError.originalError = err;\r\n      enhancedError.apiType = apiType;\r\n      enhancedError.context = context;\r\n\r\n      // API별 특별 처리\r\n      if (apiType === 'hanriver') {\r\n        enhancedError.message = `HanRiver API Error: ${err.message}`;\r\n        \r\n        // 한강홍수통제소 API 특정 오류 코드 처리\r\n        if (err.response?.status === 503) {\r\n          enhancedError.message = 'HanRiver API service temporarily unavailable';\r\n        }\r\n      } else if (apiType === 'naver') {\r\n        enhancedError.message = `Naver API Error: ${err.message}`;\r\n        \r\n        // 네이버 API 특정 오류 코드 처리\r\n        if (err.response?.status === 429) {\r\n          enhancedError.message = 'Naver API rate limit exceeded';\r\n        }\r\n      }\r\n\r\n      throw enhancedError;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 오류 통계 조회\r\n   * @returns {Object} 오류 통계\r\n   */\r\n  getErrorStats() {\r\n    const stats = {\r\n      timestamp: new Date().toISOString(),\r\n      errorTypes: {},\r\n      circuitBreakers: {},\r\n      patterns: {},\r\n    };\r\n\r\n    // 오류 타입별 통계\r\n    this.errorCounts.forEach((errors, errorType) => {\r\n      stats.errorTypes[errorType] = {\r\n        count: errors.length,\r\n        lastError: errors.length > 0 ? errors[errors.length - 1].timestamp : null,\r\n      };\r\n    });\r\n\r\n    // 서킷 브레이커 상태\r\n    this.circuitBreakers.forEach((cb, errorType) => {\r\n      stats.circuitBreakers[errorType] = {\r\n        isOpen: cb.isOpen,\r\n        isHalfOpen: cb.isHalfOpen,\r\n        openedAt: cb.openedAt,\r\n        errorCount: cb.errorCount,\r\n      };\r\n    });\r\n\r\n    // 오류 패턴\r\n    this.errorPatterns.forEach((pattern, errorType) => {\r\n      stats.patterns[errorType] = pattern;\r\n    });\r\n\r\n    return stats;\r\n  }\r\n\r\n  /**\r\n   * 오류 통계 초기화\r\n   */\r\n  resetErrorStats() {\r\n    this.errorCounts.clear();\r\n    this.errorPatterns.clear();\r\n    this.circuitBreakers.clear();\r\n    info('Error statistics reset');\r\n  }\r\n\r\n  /**\r\n   * 헬스 체크\r\n   * @returns {Object} 헬스 체크 결과\r\n   */\r\n  healthCheck() {\r\n    const stats = this.getErrorStats();\r\n    const now = Date.now();\r\n    \r\n    let status = 'healthy';\r\n    const issues = [];\r\n\r\n    // 서킷 브레이커 확인\r\n    Object.entries(stats.circuitBreakers).forEach(([errorType, cb]) => {\r\n      if (cb.isOpen) {\r\n        status = 'unhealthy';\r\n        issues.push(`Circuit breaker open for ${errorType}`);\r\n      }\r\n    });\r\n\r\n    // 높은 오류율 확인\r\n    Object.entries(stats.errorTypes).forEach(([errorType, errorStats]) => {\r\n      if (errorStats.count >= 10) {\r\n        status = status === 'healthy' ? 'warning' : status;\r\n        issues.push(`High error rate for ${errorType}: ${errorStats.count} errors`);\r\n      }\r\n    });\r\n\r\n    return {\r\n      status,\r\n      timestamp: new Date().toISOString(),\r\n      issues,\r\n      stats,\r\n    };\r\n  }\r\n}\r\n\r\n// 싱글톤 인스턴스 생성\r\nconst errorHandler = new ErrorHandler();\r\n\r\nmodule.exports = {\r\n  ErrorHandler,\r\n  errorHandler,\r\n  \r\n  // 편의 함수들\r\n  wrapHandler: (handler) => errorHandler.wrapLambdaHandler(handler),\r\n  createAPIErrorHandler: (apiType) => errorHandler.createAPIErrorHandler(apiType),\r\n  getErrorStats: () => errorHandler.getErrorStats(),\r\n  healthCheck: () => errorHandler.healthCheck(),\r\n};","module.exports = require(\"aws-sdk\");","// security.js\r\n// 크로스 오리진 요청 처리 및 AWS 환경 보안 설정 미들웨어\r\n\r\nconst { info, warn, error } = require('../utils/logger');\r\n\r\n/**\r\n * 보안 미들웨어 클래스\r\n */\r\nclass SecurityMiddleware {\r\n  constructor() {\r\n    this.allowedOrigins = this.getAllowedOrigins();\r\n    this.rateLimitStore = new Map();\r\n    this.ipWhitelist = this.getIPWhitelist();\r\n    this.ipBlacklist = this.getIPBlacklist();\r\n  }\r\n\r\n  /**\r\n   * 허용된 오리진 목록 가져오기\r\n   * @returns {Array} 허용된 오리진 목록\r\n   */\r\n  getAllowedOrigins() {\r\n    const origins = process.env.ALLOWED_ORIGINS || '';\r\n    const defaultOrigins = [\r\n      'http://localhost:3000',\r\n      'http://localhost:5173', // Vite 기본 포트\r\n      'https://localhost:3000',\r\n      'https://localhost:5173',\r\n    ];\r\n\r\n    if (origins) {\r\n      return origins.split(',').map(origin => origin.trim());\r\n    }\r\n\r\n    // 프로덕션 환경에서는 환경 변수 필수\r\n    if (process.env.NODE_ENV === 'production') {\r\n      warn('ALLOWED_ORIGINS not set in production environment');\r\n      return [];\r\n    }\r\n\r\n    return defaultOrigins;\r\n  }\r\n\r\n  /**\r\n   * IP 화이트리스트 가져오기\r\n   * @returns {Array} IP 화이트리스트\r\n   */\r\n  getIPWhitelist() {\r\n    const whitelist = process.env.IP_WHITELIST || '';\r\n    return whitelist ? whitelist.split(',').map(ip => ip.trim()) : [];\r\n  }\r\n\r\n  /**\r\n   * IP 블랙리스트 가져오기\r\n   * @returns {Array} IP 블랙리스트\r\n   */\r\n  getIPBlacklist() {\r\n    const blacklist = process.env.IP_BLACKLIST || '';\r\n    return blacklist ? blacklist.split(',').map(ip => ip.trim()) : [];\r\n  }\r\n\r\n  /**\r\n   * CORS 헤더 생성\r\n   * @param {string} origin - 요청 오리진\r\n   * @param {string} method - HTTP 메서드\r\n   * @returns {Object} CORS 헤더\r\n   */\r\n  generateCORSHeaders(origin, method = 'GET') {\r\n    const isOriginAllowed = this.isOriginAllowed(origin);\r\n    \r\n    const headers = {\r\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With, X-API-Key',\r\n      'Access-Control-Max-Age': '86400', // 24시간\r\n      'Vary': 'Origin',\r\n    };\r\n\r\n    if (isOriginAllowed) {\r\n      headers['Access-Control-Allow-Origin'] = origin;\r\n      headers['Access-Control-Allow-Credentials'] = 'true';\r\n    } else {\r\n      // 오리진이 허용되지 않은 경우 와일드카드 사용 (자격 증명 없이)\r\n      headers['Access-Control-Allow-Origin'] = '*';\r\n      headers['Access-Control-Allow-Credentials'] = 'false';\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 오리진 허용 여부 확인\r\n   * @param {string} origin - 요청 오리진\r\n   * @returns {boolean} 허용 여부\r\n   */\r\n  isOriginAllowed(origin) {\r\n    if (!origin) return false;\r\n    \r\n    // 정확한 매치\r\n    if (this.allowedOrigins.includes(origin)) {\r\n      return true;\r\n    }\r\n\r\n    // 와일드카드 패턴 매치\r\n    return this.allowedOrigins.some(allowedOrigin => {\r\n      if (allowedOrigin.includes('*')) {\r\n        const pattern = allowedOrigin.replace(/\\*/g, '.*');\r\n        const regex = new RegExp(`^${pattern}$`);\r\n        return regex.test(origin);\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 보안 헤더 생성\r\n   * @returns {Object} 보안 헤더\r\n   */\r\n  generateSecurityHeaders() {\r\n    return {\r\n      'X-Content-Type-Options': 'nosniff',\r\n      'X-Frame-Options': 'DENY',\r\n      'X-XSS-Protection': '1; mode=block',\r\n      'Referrer-Policy': 'strict-origin-when-cross-origin',\r\n      'Content-Security-Policy': \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';\",\r\n      'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\r\n      'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n      'Pragma': 'no-cache',\r\n      'Expires': '0',\r\n    };\r\n  }\r\n\r\n  /**\r\n   * IP 주소 검증\r\n   * @param {string} ipAddress - IP 주소\r\n   * @returns {Object} 검증 결과\r\n   */\r\n  validateIPAddress(ipAddress) {\r\n    const result = {\r\n      allowed: true,\r\n      reason: null,\r\n    };\r\n\r\n    // IP 주소가 없는 경우\r\n    if (!ipAddress) {\r\n      result.allowed = false;\r\n      result.reason = 'No IP address provided';\r\n      return result;\r\n    }\r\n\r\n    // 블랙리스트 확인\r\n    if (this.ipBlacklist.length > 0 && this.ipBlacklist.includes(ipAddress)) {\r\n      result.allowed = false;\r\n      result.reason = 'IP address is blacklisted';\r\n      return result;\r\n    }\r\n\r\n    // 화이트리스트 확인 (화이트리스트가 설정된 경우)\r\n    if (this.ipWhitelist.length > 0 && !this.ipWhitelist.includes(ipAddress)) {\r\n      result.allowed = false;\r\n      result.reason = 'IP address not in whitelist';\r\n      return result;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 요청 속도 제한\r\n   * @param {string} identifier - 식별자 (IP 주소 등)\r\n   * @param {Object} limits - 제한 설정\r\n   * @returns {Object} 속도 제한 결과\r\n   */\r\n  checkRateLimit(identifier, limits = {}) {\r\n    const {\r\n      windowMs = 60000, // 1분\r\n      maxRequests = 100,\r\n      skipSuccessfulRequests = false,\r\n    } = limits;\r\n\r\n    const now = Date.now();\r\n    const windowStart = now - windowMs;\r\n\r\n    // 기존 요청 기록 가져오기\r\n    let requests = this.rateLimitStore.get(identifier) || [];\r\n    \r\n    // 윈도우 밖의 요청 제거\r\n    requests = requests.filter(timestamp => timestamp > windowStart);\r\n    \r\n    // 현재 요청 추가\r\n    requests.push(now);\r\n    \r\n    // 업데이트된 요청 기록 저장\r\n    this.rateLimitStore.set(identifier, requests);\r\n\r\n    const result = {\r\n      allowed: requests.length <= maxRequests,\r\n      count: requests.length,\r\n      limit: maxRequests,\r\n      remaining: Math.max(0, maxRequests - requests.length),\r\n      resetTime: windowStart + windowMs,\r\n    };\r\n\r\n    if (!result.allowed) {\r\n      warn('Rate limit exceeded', {\r\n        identifier,\r\n        count: result.count,\r\n        limit: result.limit,\r\n      });\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * API 키 검증\r\n   * @param {string} apiKey - API 키\r\n   * @param {string} requiredScope - 필요한 스코프\r\n   * @returns {Object} 검증 결과\r\n   */\r\n  validateAPIKey(apiKey, requiredScope = null) {\r\n    const result = {\r\n      valid: false,\r\n      scope: null,\r\n      reason: null,\r\n    };\r\n\r\n    // API 키가 없는 경우\r\n    if (!apiKey) {\r\n      result.reason = 'API key is required';\r\n      return result;\r\n    }\r\n\r\n    // 환경 변수에서 유효한 API 키 목록 가져오기\r\n    const validAPIKeys = this.getValidAPIKeys();\r\n    \r\n    const keyInfo = validAPIKeys.find(key => key.key === apiKey);\r\n    \r\n    if (!keyInfo) {\r\n      result.reason = 'Invalid API key';\r\n      return result;\r\n    }\r\n\r\n    // 만료 확인\r\n    if (keyInfo.expiresAt && Date.now() > keyInfo.expiresAt) {\r\n      result.reason = 'API key has expired';\r\n      return result;\r\n    }\r\n\r\n    // 스코프 확인\r\n    if (requiredScope && !keyInfo.scopes.includes(requiredScope)) {\r\n      result.reason = `Insufficient scope. Required: ${requiredScope}`;\r\n      return result;\r\n    }\r\n\r\n    result.valid = true;\r\n    result.scope = keyInfo.scopes;\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 유효한 API 키 목록 가져오기\r\n   * @returns {Array} API 키 목록\r\n   */\r\n  getValidAPIKeys() {\r\n    const apiKeysEnv = process.env.API_KEYS || '';\r\n    \r\n    if (!apiKeysEnv) {\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      return JSON.parse(apiKeysEnv);\r\n    } catch (err) {\r\n      error('Failed to parse API_KEYS environment variable', err);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 요청 검증\r\n   * @param {Object} event - Lambda 이벤트\r\n   * @returns {Object} 검증 결과\r\n   */\r\n  validateRequest(event) {\r\n    const result = {\r\n      valid: true,\r\n      errors: [],\r\n      headers: {},\r\n    };\r\n\r\n    const origin = event.headers?.Origin || event.headers?.origin;\r\n    const userAgent = event.headers?.['User-Agent'] || event.headers?.['user-agent'];\r\n    const sourceIp = event.requestContext?.identity?.sourceIp;\r\n    const method = event.httpMethod;\r\n\r\n    // CORS 헤더 생성\r\n    result.headers = {\r\n      ...result.headers,\r\n      ...this.generateCORSHeaders(origin, method),\r\n      ...this.generateSecurityHeaders(),\r\n    };\r\n\r\n    // OPTIONS 요청은 CORS preflight이므로 추가 검증 생략\r\n    if (method === 'OPTIONS') {\r\n      return result;\r\n    }\r\n\r\n    // IP 주소 검증\r\n    const ipValidation = this.validateIPAddress(sourceIp);\r\n    if (!ipValidation.allowed) {\r\n      result.valid = false;\r\n      result.errors.push(`IP validation failed: ${ipValidation.reason}`);\r\n    }\r\n\r\n    // 속도 제한 확인\r\n    const rateLimitResult = this.checkRateLimit(sourceIp);\r\n    if (!rateLimitResult.allowed) {\r\n      result.valid = false;\r\n      result.errors.push('Rate limit exceeded');\r\n      result.headers['X-RateLimit-Limit'] = rateLimitResult.limit.toString();\r\n      result.headers['X-RateLimit-Remaining'] = rateLimitResult.remaining.toString();\r\n      result.headers['X-RateLimit-Reset'] = Math.ceil(rateLimitResult.resetTime / 1000).toString();\r\n    }\r\n\r\n    // User-Agent 검증 (봇 차단)\r\n    if (this.isSuspiciousUserAgent(userAgent)) {\r\n      result.valid = false;\r\n      result.errors.push('Suspicious user agent detected');\r\n    }\r\n\r\n    // API 키 검증 (필요한 경우)\r\n    const apiKey = event.headers?.['X-API-Key'] || event.headers?.['x-api-key'];\r\n    if (process.env.REQUIRE_API_KEY === 'true') {\r\n      const apiKeyValidation = this.validateAPIKey(apiKey);\r\n      if (!apiKeyValidation.valid) {\r\n        result.valid = false;\r\n        result.errors.push(`API key validation failed: ${apiKeyValidation.reason}`);\r\n      }\r\n    }\r\n\r\n    // 요청 크기 제한\r\n    const contentLength = parseInt(event.headers?.['Content-Length'] || '0');\r\n    const maxBodySize = parseInt(process.env.MAX_BODY_SIZE || '1048576'); // 1MB 기본값\r\n    \r\n    if (contentLength > maxBodySize) {\r\n      result.valid = false;\r\n      result.errors.push(`Request body too large: ${contentLength} bytes (max: ${maxBodySize})`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 의심스러운 User-Agent 확인\r\n   * @param {string} userAgent - User-Agent 문자열\r\n   * @returns {boolean} 의심스러운 여부\r\n   */\r\n  isSuspiciousUserAgent(userAgent) {\r\n    if (!userAgent) return true;\r\n\r\n    const suspiciousPatterns = [\r\n      /bot/i,\r\n      /crawler/i,\r\n      /spider/i,\r\n      /scraper/i,\r\n      /curl/i,\r\n      /wget/i,\r\n      /python/i,\r\n      /java/i,\r\n      /go-http-client/i,\r\n    ];\r\n\r\n    // 허용된 봇들 (검색 엔진 등)\r\n    const allowedBots = [\r\n      /googlebot/i,\r\n      /bingbot/i,\r\n      /slurp/i, // Yahoo\r\n    ];\r\n\r\n    // 허용된 봇인지 먼저 확인\r\n    if (allowedBots.some(pattern => pattern.test(userAgent))) {\r\n      return false;\r\n    }\r\n\r\n    // 의심스러운 패턴 확인\r\n    return suspiciousPatterns.some(pattern => pattern.test(userAgent));\r\n  }\r\n\r\n  /**\r\n   * 보안 응답 생성\r\n   * @param {number} statusCode - HTTP 상태 코드\r\n   * @param {Object} body - 응답 본문\r\n   * @param {Object} additionalHeaders - 추가 헤더\r\n   * @returns {Object} HTTP 응답\r\n   */\r\n  createSecureResponse(statusCode, body, additionalHeaders = {}) {\r\n    const headers = {\r\n      ...this.generateSecurityHeaders(),\r\n      ...additionalHeaders,\r\n    };\r\n\r\n    return {\r\n      statusCode,\r\n      headers,\r\n      body: typeof body === 'string' ? body : JSON.stringify(body),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 보안 위반 로깅\r\n   * @param {string} violationType - 위반 유형\r\n   * @param {Object} details - 상세 정보\r\n   */\r\n  logSecurityViolation(violationType, details) {\r\n    warn('Security violation detected', {\r\n      violationType,\r\n      ...details,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n\r\n    // 심각한 보안 위반의 경우 알림 (실제 구현에서는 SNS 등 사용)\r\n    if (['IP_BLACKLISTED', 'RATE_LIMIT_EXCEEDED', 'INVALID_API_KEY'].includes(violationType)) {\r\n      error('Critical security violation', {\r\n        violationType,\r\n        ...details,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 보안 통계 조회\r\n   * @returns {Object} 보안 통계\r\n   */\r\n  getSecurityStats() {\r\n    const now = Date.now();\r\n    const oneHour = 60 * 60 * 1000;\r\n    \r\n    let totalRequests = 0;\r\n    let rateLimitedIPs = 0;\r\n\r\n    this.rateLimitStore.forEach((requests, ip) => {\r\n      const recentRequests = requests.filter(timestamp => \r\n        now - timestamp < oneHour\r\n      );\r\n      \r\n      totalRequests += recentRequests.length;\r\n      \r\n      if (recentRequests.length > 100) { // 시간당 100개 이상\r\n        rateLimitedIPs++;\r\n      }\r\n    });\r\n\r\n    return {\r\n      timestamp: new Date().toISOString(),\r\n      totalRequests,\r\n      rateLimitedIPs,\r\n      allowedOrigins: this.allowedOrigins.length,\r\n      ipWhitelist: this.ipWhitelist.length,\r\n      ipBlacklist: this.ipBlacklist.length,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 보안 설정 업데이트\r\n   * @param {Object} config - 새로운 설정\r\n   */\r\n  updateSecurityConfig(config) {\r\n    if (config.allowedOrigins) {\r\n      this.allowedOrigins = config.allowedOrigins;\r\n    }\r\n    \r\n    if (config.ipWhitelist) {\r\n      this.ipWhitelist = config.ipWhitelist;\r\n    }\r\n    \r\n    if (config.ipBlacklist) {\r\n      this.ipBlacklist = config.ipBlacklist;\r\n    }\r\n\r\n    info('Security configuration updated', {\r\n      allowedOrigins: this.allowedOrigins.length,\r\n      ipWhitelist: this.ipWhitelist.length,\r\n      ipBlacklist: this.ipBlacklist.length,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 정리 작업 (메모리 누수 방지)\r\n   */\r\n  cleanup() {\r\n    const now = Date.now();\r\n    const oneHour = 60 * 60 * 1000;\r\n\r\n    // 1시간 이상 된 속도 제한 기록 제거\r\n    this.rateLimitStore.forEach((requests, ip) => {\r\n      const recentRequests = requests.filter(timestamp => \r\n        now - timestamp < oneHour\r\n      );\r\n      \r\n      if (recentRequests.length === 0) {\r\n        this.rateLimitStore.delete(ip);\r\n      } else {\r\n        this.rateLimitStore.set(ip, recentRequests);\r\n      }\r\n    });\r\n\r\n    info('Security middleware cleanup completed', {\r\n      remainingIPs: this.rateLimitStore.size,\r\n    });\r\n  }\r\n}\r\n\r\n// 싱글톤 인스턴스 생성\r\nconst securityMiddleware = new SecurityMiddleware();\r\n\r\n// 정기적인 정리 작업 (1시간마다)\r\nsetInterval(() => {\r\n  securityMiddleware.cleanup();\r\n}, 60 * 60 * 1000);\r\n\r\nmodule.exports = {\r\n  SecurityMiddleware,\r\n  securityMiddleware,\r\n  \r\n  // 편의 함수들\r\n  validateRequest: (event) => securityMiddleware.validateRequest(event),\r\n  createSecureResponse: (statusCode, body, headers) => \r\n    securityMiddleware.createSecureResponse(statusCode, body, headers),\r\n  generateCORSHeaders: (origin, method) => \r\n    securityMiddleware.generateCORSHeaders(origin, method),\r\n  getSecurityStats: () => securityMiddleware.getSecurityStats(),\r\n};","// HTTP 응답 유틸리티 함수들\r\n\r\n/**\r\n * 성공 응답 생성\r\n * @param {*} data - 응답 데이터\r\n * @param {number} statusCode - HTTP 상태 코드 (기본값: 200)\r\n * @param {Object} headers - 추가 헤더\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction success(data, statusCode = 200, headers = {}) {\r\n  return {\r\n    statusCode,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',\r\n      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',\r\n      ...headers,\r\n    },\r\n    body: JSON.stringify({\r\n      success: true,\r\n      data,\r\n      timestamp: new Date().toISOString(),\r\n    }),\r\n  };\r\n}\r\n\r\n/**\r\n * 에러 응답 생성\r\n * @param {string} message - 에러 메시지\r\n * @param {number} statusCode - HTTP 상태 코드 (기본값: 500)\r\n * @param {string} errorCode - 에러 코드\r\n * @param {Object} headers - 추가 헤더\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction error(message, statusCode = 500, errorCode = 'INTERNAL_ERROR', headers = {}) {\r\n  return {\r\n    statusCode,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',\r\n      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',\r\n      ...headers,\r\n    },\r\n    body: JSON.stringify({\r\n      success: false,\r\n      error: {\r\n        message,\r\n        code: errorCode,\r\n        statusCode,\r\n      },\r\n      timestamp: new Date().toISOString(),\r\n    }),\r\n  };\r\n}\r\n\r\n/**\r\n * 유효성 검사 에러 응답 생성\r\n * @param {string} message - 에러 메시지\r\n * @param {Array} details - 상세 에러 정보\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction validationError(message, details = []) {\r\n  return error(message, 400, 'VALIDATION_ERROR', {}, { details });\r\n}\r\n\r\n/**\r\n * 404 Not Found 응답 생성\r\n * @param {string} resource - 찾을 수 없는 리소스명\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction notFound(resource = 'Resource') {\r\n  return error(`${resource} not found`, 404, 'NOT_FOUND');\r\n}\r\n\r\n/**\r\n * 401 Unauthorized 응답 생성\r\n * @param {string} message - 에러 메시지\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction unauthorized(message = 'Unauthorized') {\r\n  return error(message, 401, 'UNAUTHORIZED');\r\n}\r\n\r\n/**\r\n * 403 Forbidden 응답 생성\r\n * @param {string} message - 에러 메시지\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction forbidden(message = 'Forbidden') {\r\n  return error(message, 403, 'FORBIDDEN');\r\n}\r\n\r\n/**\r\n * 429 Too Many Requests 응답 생성\r\n * @param {string} message - 에러 메시지\r\n * @returns {Object} Lambda 응답 객체\r\n */\r\nfunction tooManyRequests(message = 'Too many requests') {\r\n  return error(message, 429, 'TOO_MANY_REQUESTS');\r\n}\r\n\r\nmodule.exports = {\r\n  success,\r\n  error,\r\n  validationError,\r\n  notFound,\r\n  unauthorized,\r\n  forbidden,\r\n  tooManyRequests,\r\n};","// dynamodb.js\r\n// DynamoDB 클라이언트 설정 및 테이블 스키마 정의\r\n\r\nconst AWS = require('aws-sdk');\r\nconst { info, error, debug } = require('../utils/logger');\r\n\r\n/**\r\n * DynamoDB 설정 클래스\r\n */\r\nclass DynamoDBConfig {\r\n  constructor() {\r\n    this.dynamodb = null;\r\n    this.documentClient = null;\r\n    this.tableSchemas = new Map();\r\n    this.isInitialized = false;\r\n  }\r\n\r\n  /**\r\n   * DynamoDB 클라이언트 초기화\r\n   * @param {Object} options - 초기화 옵션\r\n   */\r\n  initialize(options = {}) {\r\n    const {\r\n      region = process.env.AWS_REGION || 'ap-northeast-2',\r\n      endpoint = process.env.DYNAMODB_ENDPOINT,\r\n      accessKeyId = process.env.AWS_ACCESS_KEY_ID,\r\n      secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY,\r\n    } = options;\r\n\r\n    const config = {\r\n      region,\r\n      apiVersion: '2012-08-10',\r\n    };\r\n\r\n    // 로컬 개발 환경용 엔드포인트 설정\r\n    if (endpoint) {\r\n      config.endpoint = endpoint;\r\n    }\r\n\r\n    // 자격 증명 설정 (Lambda에서는 IAM 역할 사용)\r\n    if (accessKeyId && secretAccessKey) {\r\n      config.accessKeyId = accessKeyId;\r\n      config.secretAccessKey = secretAccessKey;\r\n    }\r\n\r\n    this.dynamodb = new AWS.DynamoDB(config);\r\n    this.documentClient = new AWS.DynamoDB.DocumentClient(config);\r\n\r\n    this.defineTableSchemas();\r\n    this.isInitialized = true;\r\n\r\n    info('DynamoDB client initialized', { region, endpoint: !!endpoint });\r\n  }\r\n\r\n  /**\r\n   * 테이블 스키마 정의\r\n   */\r\n  defineTableSchemas() {\r\n    // FloodInfo 테이블 스키마\r\n    this.tableSchemas.set('FloodInfo', {\r\n      TableName: process.env.FLOOD_INFO_TABLE || 'FloodInfo',\r\n      KeySchema: [\r\n        {\r\n          AttributeName: 'id',\r\n          KeyType: 'HASH', // Partition key\r\n        },\r\n        {\r\n          AttributeName: 'timestamp',\r\n          KeyType: 'RANGE', // Sort key\r\n        },\r\n      ],\r\n      AttributeDefinitions: [\r\n        {\r\n          AttributeName: 'id',\r\n          AttributeType: 'S',\r\n        },\r\n        {\r\n          AttributeName: 'timestamp',\r\n          AttributeType: 'S',\r\n        },\r\n        {\r\n          AttributeName: 'locationId',\r\n          AttributeType: 'S',\r\n        },\r\n        {\r\n          AttributeName: 'status',\r\n          AttributeType: 'S',\r\n        },\r\n        {\r\n          AttributeName: 'severity',\r\n          AttributeType: 'S',\r\n        },\r\n        {\r\n          AttributeName: 'alertType',\r\n          AttributeType: 'S',\r\n        },\r\n      ],\r\n      GlobalSecondaryIndexes: [\r\n        {\r\n          IndexName: 'LocationIndex',\r\n          KeySchema: [\r\n            {\r\n              AttributeName: 'locationId',\r\n              KeyType: 'HASH',\r\n            },\r\n            {\r\n              AttributeName: 'timestamp',\r\n              KeyType: 'RANGE',\r\n            },\r\n          ],\r\n          Projection: {\r\n            ProjectionType: 'ALL',\r\n          },\r\n          ProvisionedThroughput: {\r\n            ReadCapacityUnits: 5,\r\n            WriteCapacityUnits: 5,\r\n          },\r\n        },\r\n        {\r\n          IndexName: 'StatusIndex',\r\n          KeySchema: [\r\n            {\r\n              AttributeName: 'status',\r\n              KeyType: 'HASH',\r\n            },\r\n            {\r\n              AttributeName: 'timestamp',\r\n              KeyType: 'RANGE',\r\n            },\r\n          ],\r\n          Projection: {\r\n            ProjectionType: 'ALL',\r\n          },\r\n          ProvisionedThroughput: {\r\n            ReadCapacityUnits: 5,\r\n            WriteCapacityUnits: 5,\r\n          },\r\n        },\r\n        {\r\n          IndexName: 'SeverityIndex',\r\n          KeySchema: [\r\n            {\r\n              AttributeName: 'severity',\r\n              KeyType: 'HASH',\r\n            },\r\n            {\r\n              AttributeName: 'timestamp',\r\n              KeyType: 'RANGE',\r\n            },\r\n          ],\r\n          Projection: {\r\n            ProjectionType: 'ALL',\r\n          },\r\n          ProvisionedThroughput: {\r\n            ReadCapacityUnits: 5,\r\n            WriteCapacityUnits: 5,\r\n          },\r\n        },\r\n        {\r\n          IndexName: 'AlertTypeIndex',\r\n          KeySchema: [\r\n            {\r\n              AttributeName: 'alertType',\r\n              KeyType: 'HASH',\r\n            },\r\n            {\r\n              AttributeName: 'timestamp',\r\n              KeyType: 'RANGE',\r\n            },\r\n          ],\r\n          Projection: {\r\n            ProjectionType: 'ALL',\r\n          },\r\n          ProvisionedThroughput: {\r\n            ReadCapacityUnits: 5,\r\n            WriteCapacityUnits: 5,\r\n          },\r\n        },\r\n      ],\r\n      ProvisionedThroughput: {\r\n        ReadCapacityUnits: 10,\r\n        WriteCapacityUnits: 10,\r\n      },\r\n      StreamSpecification: {\r\n        StreamEnabled: true,\r\n        StreamViewType: 'NEW_AND_OLD_IMAGES',\r\n      },\r\n      TimeToLiveSpecification: {\r\n        AttributeName: 'ttl',\r\n        Enabled: true,\r\n      },\r\n    });\r\n\r\n    // APISource 테이블 스키마\r\n    this.tableSchemas.set('APISource', {\r\n      TableName: process.env.API_SOURCE_TABLE || 'APISource',\r\n      KeySchema: [\r\n        {\r\n          AttributeName: 'sourceId',\r\n          KeyType: 'HASH', // Partition key\r\n        },\r\n      ],\r\n      AttributeDefinitions: [\r\n        {\r\n          AttributeName: 'sourceId',\r\n          AttributeType: 'S',\r\n        },\r\n        {\r\n          AttributeName: 'apiType',\r\n          AttributeType: 'S',\r\n        },\r\n        {\r\n          AttributeName: 'status',\r\n          AttributeType: 'S',\r\n        },\r\n      ],\r\n      GlobalSecondaryIndexes: [\r\n        {\r\n          IndexName: 'APITypeIndex',\r\n          KeySchema: [\r\n            {\r\n              AttributeName: 'apiType',\r\n              KeyType: 'HASH',\r\n            },\r\n          ],\r\n          Projection: {\r\n            ProjectionType: 'ALL',\r\n          },\r\n          ProvisionedThroughput: {\r\n            ReadCapacityUnits: 5,\r\n            WriteCapacityUnits: 5,\r\n          },\r\n        },\r\n        {\r\n          IndexName: 'StatusIndex',\r\n          KeySchema: [\r\n            {\r\n              AttributeName: 'status',\r\n              KeyType: 'HASH',\r\n            },\r\n          ],\r\n          Projection: {\r\n            ProjectionType: 'ALL',\r\n          },\r\n          ProvisionedThroughput: {\r\n            ReadCapacityUnits: 5,\r\n            WriteCapacityUnits: 5,\r\n          },\r\n        },\r\n      ],\r\n      ProvisionedThroughput: {\r\n        ReadCapacityUnits: 5,\r\n        WriteCapacityUnits: 5,\r\n      },\r\n    });\r\n\r\n    debug('Table schemas defined', { \r\n      tableCount: this.tableSchemas.size,\r\n      tables: Array.from(this.tableSchemas.keys()),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 테이블 생성\r\n   * @param {string} tableName - 테이블 이름\r\n   * @returns {Promise<boolean>} 생성 성공 여부\r\n   */\r\n  async createTable(tableName) {\r\n    if (!this.isInitialized) {\r\n      throw new Error('DynamoDB client not initialized');\r\n    }\r\n\r\n    const schema = this.tableSchemas.get(tableName);\r\n    if (!schema) {\r\n      throw new Error(`Table schema not found: ${tableName}`);\r\n    }\r\n\r\n    try {\r\n      // 테이블 존재 여부 확인\r\n      const exists = await this.tableExists(schema.TableName);\r\n      if (exists) {\r\n        info('Table already exists', { tableName: schema.TableName });\r\n        return true;\r\n      }\r\n\r\n      // 테이블 생성\r\n      debug('Creating table', { tableName: schema.TableName });\r\n      await this.dynamodb.createTable(schema).promise();\r\n\r\n      // 테이블 활성화 대기\r\n      await this.waitForTableActive(schema.TableName);\r\n\r\n      info('Table created successfully', { tableName: schema.TableName });\r\n      return true;\r\n    } catch (err) {\r\n      error('Failed to create table', err, { tableName: schema.TableName });\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 모든 테이블 생성\r\n   * @returns {Promise<boolean>} 생성 성공 여부\r\n   */\r\n  async createAllTables() {\r\n    const tableNames = Array.from(this.tableSchemas.keys());\r\n    \r\n    try {\r\n      for (const tableName of tableNames) {\r\n        await this.createTable(tableName);\r\n      }\r\n      \r\n      info('All tables created successfully', { tableCount: tableNames.length });\r\n      return true;\r\n    } catch (err) {\r\n      error('Failed to create all tables', err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 테이블 존재 여부 확인\r\n   * @param {string} tableName - 테이블 이름\r\n   * @returns {Promise<boolean>} 존재 여부\r\n   */\r\n  async tableExists(tableName) {\r\n    try {\r\n      await this.dynamodb.describeTable({ TableName: tableName }).promise();\r\n      return true;\r\n    } catch (err) {\r\n      if (err.code === 'ResourceNotFoundException') {\r\n        return false;\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 테이블 활성화 대기\r\n   * @param {string} tableName - 테이블 이름\r\n   * @param {number} maxWaitTime - 최대 대기 시간 (밀리초)\r\n   * @returns {Promise<void>}\r\n   */\r\n  async waitForTableActive(tableName, maxWaitTime = 300000) { // 5분\r\n    const startTime = Date.now();\r\n    \r\n    while (Date.now() - startTime < maxWaitTime) {\r\n      try {\r\n        const result = await this.dynamodb.describeTable({ TableName: tableName }).promise();\r\n        \r\n        if (result.Table.TableStatus === 'ACTIVE') {\r\n          debug('Table is active', { tableName });\r\n          return;\r\n        }\r\n        \r\n        debug('Waiting for table to become active', { \r\n          tableName, \r\n          status: result.Table.TableStatus \r\n        });\r\n        \r\n        // 5초 대기\r\n        await new Promise(resolve => setTimeout(resolve, 5000));\r\n      } catch (err) {\r\n        error('Error checking table status', err, { tableName });\r\n        throw err;\r\n      }\r\n    }\r\n    \r\n    throw new Error(`Table did not become active within ${maxWaitTime}ms: ${tableName}`);\r\n  }\r\n\r\n  /**\r\n   * 테이블 삭제\r\n   * @param {string} tableName - 테이블 이름\r\n   * @returns {Promise<boolean>} 삭제 성공 여부\r\n   */\r\n  async deleteTable(tableName) {\r\n    if (!this.isInitialized) {\r\n      throw new Error('DynamoDB client not initialized');\r\n    }\r\n\r\n    const schema = this.tableSchemas.get(tableName);\r\n    if (!schema) {\r\n      throw new Error(`Table schema not found: ${tableName}`);\r\n    }\r\n\r\n    try {\r\n      const exists = await this.tableExists(schema.TableName);\r\n      if (!exists) {\r\n        info('Table does not exist', { tableName: schema.TableName });\r\n        return true;\r\n      }\r\n\r\n      debug('Deleting table', { tableName: schema.TableName });\r\n      await this.dynamodb.deleteTable({ TableName: schema.TableName }).promise();\r\n\r\n      info('Table deleted successfully', { tableName: schema.TableName });\r\n      return true;\r\n    } catch (err) {\r\n      error('Failed to delete table', err, { tableName: schema.TableName });\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 테이블 스키마 조회\r\n   * @param {string} tableName - 테이블 이름\r\n   * @returns {Object} 테이블 스키마\r\n   */\r\n  getTableSchema(tableName) {\r\n    return this.tableSchemas.get(tableName);\r\n  }\r\n\r\n  /**\r\n   * 테이블 이름 조회\r\n   * @param {string} schemaName - 스키마 이름\r\n   * @returns {string} 실제 테이블 이름\r\n   */\r\n  getTableName(schemaName) {\r\n    const schema = this.tableSchemas.get(schemaName);\r\n    return schema ? schema.TableName : null;\r\n  }\r\n\r\n  /**\r\n   * DocumentClient 조회\r\n   * @returns {AWS.DynamoDB.DocumentClient} DocumentClient 인스턴스\r\n   */\r\n  getDocumentClient() {\r\n    if (!this.isInitialized) {\r\n      throw new Error('DynamoDB client not initialized');\r\n    }\r\n    return this.documentClient;\r\n  }\r\n\r\n  /**\r\n   * DynamoDB 클라이언트 조회\r\n   * @returns {AWS.DynamoDB} DynamoDB 클라이언트 인스턴스\r\n   */\r\n  getDynamoDBClient() {\r\n    if (!this.isInitialized) {\r\n      throw new Error('DynamoDB client not initialized');\r\n    }\r\n    return this.dynamodb;\r\n  }\r\n\r\n  /**\r\n   * 테이블 상태 확인\r\n   * @param {string} tableName - 테이블 이름\r\n   * @returns {Promise<Object>} 테이블 상태 정보\r\n   */\r\n  async getTableStatus(tableName) {\r\n    const schema = this.tableSchemas.get(tableName);\r\n    if (!schema) {\r\n      throw new Error(`Table schema not found: ${tableName}`);\r\n    }\r\n\r\n    try {\r\n      const result = await this.dynamodb.describeTable({ \r\n        TableName: schema.TableName \r\n      }).promise();\r\n\r\n      return {\r\n        tableName: schema.TableName,\r\n        status: result.Table.TableStatus,\r\n        itemCount: result.Table.ItemCount,\r\n        tableSize: result.Table.TableSizeBytes,\r\n        creationDateTime: result.Table.CreationDateTime,\r\n        provisionedThroughput: result.Table.ProvisionedThroughput,\r\n        globalSecondaryIndexes: result.Table.GlobalSecondaryIndexes?.map(gsi => ({\r\n          indexName: gsi.IndexName,\r\n          status: gsi.IndexStatus,\r\n          itemCount: gsi.ItemCount,\r\n          indexSize: gsi.IndexSizeBytes,\r\n        })) || [],\r\n      };\r\n    } catch (err) {\r\n      if (err.code === 'ResourceNotFoundException') {\r\n        return {\r\n          tableName: schema.TableName,\r\n          status: 'NOT_EXISTS',\r\n        };\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 모든 테이블 상태 확인\r\n   * @returns {Promise<Array>} 모든 테이블 상태 정보\r\n   */\r\n  async getAllTableStatus() {\r\n    const tableNames = Array.from(this.tableSchemas.keys());\r\n    const statusPromises = tableNames.map(tableName => \r\n      this.getTableStatus(tableName).catch(err => ({\r\n        tableName,\r\n        status: 'ERROR',\r\n        error: err.message,\r\n      }))\r\n    );\r\n\r\n    return Promise.all(statusPromises);\r\n  }\r\n\r\n  /**\r\n   * TTL 설정\r\n   * @param {string} tableName - 테이블 이름\r\n   * @param {string} attributeName - TTL 속성 이름\r\n   * @returns {Promise<boolean>} 설정 성공 여부\r\n   */\r\n  async enableTTL(tableName, attributeName = 'ttl') {\r\n    const schema = this.tableSchemas.get(tableName);\r\n    if (!schema) {\r\n      throw new Error(`Table schema not found: ${tableName}`);\r\n    }\r\n\r\n    try {\r\n      await this.dynamodb.updateTimeToLive({\r\n        TableName: schema.TableName,\r\n        TimeToLiveSpecification: {\r\n          AttributeName: attributeName,\r\n          Enabled: true,\r\n        },\r\n      }).promise();\r\n\r\n      info('TTL enabled', { tableName: schema.TableName, attributeName });\r\n      return true;\r\n    } catch (err) {\r\n      error('Failed to enable TTL', err, { tableName: schema.TableName });\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 스트림 설정\r\n   * @param {string} tableName - 테이블 이름\r\n   * @param {string} streamViewType - 스트림 뷰 타입\r\n   * @returns {Promise<boolean>} 설정 성공 여부\r\n   */\r\n  async enableStream(tableName, streamViewType = 'NEW_AND_OLD_IMAGES') {\r\n    const schema = this.tableSchemas.get(tableName);\r\n    if (!schema) {\r\n      throw new Error(`Table schema not found: ${tableName}`);\r\n    }\r\n\r\n    try {\r\n      await this.dynamodb.updateTable({\r\n        TableName: schema.TableName,\r\n        StreamSpecification: {\r\n          StreamEnabled: true,\r\n          StreamViewType: streamViewType,\r\n        },\r\n      }).promise();\r\n\r\n      info('Stream enabled', { tableName: schema.TableName, streamViewType });\r\n      return true;\r\n    } catch (err) {\r\n      error('Failed to enable stream', err, { tableName: schema.TableName });\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 헬스 체크\r\n   * @returns {Promise<Object>} 헬스 체크 결과\r\n   */\r\n  async healthCheck() {\r\n    try {\r\n      const tableStatuses = await this.getAllTableStatus();\r\n      \r\n      const healthyTables = tableStatuses.filter(t => t.status === 'ACTIVE').length;\r\n      const totalTables = tableStatuses.length;\r\n      \r\n      const health = {\r\n        status: healthyTables === totalTables ? 'healthy' : 'unhealthy',\r\n        timestamp: new Date().toISOString(),\r\n        tables: {\r\n          total: totalTables,\r\n          healthy: healthyTables,\r\n          unhealthy: totalTables - healthyTables,\r\n        },\r\n        details: tableStatuses,\r\n      };\r\n\r\n      return health;\r\n    } catch (err) {\r\n      error('Health check failed', err);\r\n      return {\r\n        status: 'error',\r\n        timestamp: new Date().toISOString(),\r\n        error: err.message,\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// 싱글톤 인스턴스 생성\r\nconst dynamoDBConfig = new DynamoDBConfig();\r\n\r\n// 환경 변수가 있으면 자동 초기화\r\nif (process.env.AWS_REGION || process.env.DYNAMODB_ENDPOINT) {\r\n  dynamoDBConfig.initialize();\r\n}\r\n\r\nmodule.exports = {\r\n  DynamoDBConfig,\r\n  dynamoDBConfig,\r\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// healthHandler.js\r\n// 헬스 체크 및 시스템 상태 조회 Lambda 함수\r\n\r\nconst { success, error: errorResponse } = require('../utils/response');\r\nconst { info, error, debug } = require('../utils/logger');\r\nconst { dynamoDBConfig } = require('../config/dynamodb');\r\nconst { errorHandler } = require('../middleware/errorHandler');\r\nconst { securityMiddleware } = require('../middleware/security');\r\n\r\n/**\r\n * 기본 헬스 체크\r\n * @param {Object} event - Lambda 이벤트\r\n * @param {Object} context - Lambda 컨텍스트\r\n * @returns {Promise<Object>} HTTP 응답\r\n */\r\nexports.healthCheck = async (event, context) => {\r\n  try {\r\n    debug('Health check requested', {\r\n      requestId: context.awsRequestId,\r\n      userAgent: event.headers?.['User-Agent'],\r\n    });\r\n\r\n    const healthStatus = {\r\n      status: 'healthy',\r\n      timestamp: new Date().toISOString(),\r\n      service: 'flood-info-backend',\r\n      version: process.env.npm_package_version || '1.0.0',\r\n      stage: process.env.STAGE || 'dev',\r\n      region: process.env.REGION || 'ap-northeast-2',\r\n      requestId: context.awsRequestId,\r\n      uptime: process.uptime(),\r\n      memory: {\r\n        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),\r\n        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),\r\n        limit: parseInt(context.memoryLimitInMB),\r\n      },\r\n      lambda: {\r\n        functionName: context.functionName,\r\n        functionVersion: context.functionVersion,\r\n        remainingTime: context.getRemainingTimeInMillis(),\r\n      },\r\n    };\r\n\r\n    info('Health check completed', {\r\n      requestId: context.awsRequestId,\r\n      status: healthStatus.status,\r\n    });\r\n\r\n    return success(healthStatus);\r\n  } catch (err) {\r\n    error('Health check failed', err, {\r\n      requestId: context.awsRequestId,\r\n    });\r\n\r\n    return errorResponse('Health check failed');\r\n  }\r\n};\r\n\r\n/**\r\n * 상세 시스템 상태 조회\r\n * @param {Object} event - Lambda 이벤트\r\n * @param {Object} context - Lambda 컨텍스트\r\n * @returns {Promise<Object>} HTTP 응답\r\n */\r\nexports.getSystemStatus = async (event, context) => {\r\n  try {\r\n    debug('System status requested', {\r\n      requestId: context.awsRequestId,\r\n    });\r\n\r\n    const startTime = Date.now();\r\n\r\n    // 병렬로 각 컴포넌트 상태 확인\r\n    const [\r\n      databaseHealth,\r\n      errorHandlerHealth,\r\n      securityHealth,\r\n      environmentHealth,\r\n    ] = await Promise.allSettled([\r\n      checkDatabaseHealth(),\r\n      checkErrorHandlerHealth(),\r\n      checkSecurityHealth(),\r\n      checkEnvironmentHealth(),\r\n    ]);\r\n\r\n    const systemStatus = {\r\n      status: 'healthy',\r\n      timestamp: new Date().toISOString(),\r\n      service: 'flood-info-backend',\r\n      version: process.env.npm_package_version || '1.0.0',\r\n      stage: process.env.STAGE || 'dev',\r\n      region: process.env.REGION || 'ap-northeast-2',\r\n      requestId: context.awsRequestId,\r\n      checkDuration: Date.now() - startTime,\r\n      components: {\r\n        database: getHealthResult(databaseHealth),\r\n        errorHandler: getHealthResult(errorHandlerHealth),\r\n        security: getHealthResult(securityHealth),\r\n        environment: getHealthResult(environmentHealth),\r\n      },\r\n      system: {\r\n        uptime: process.uptime(),\r\n        memory: {\r\n          used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),\r\n          total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),\r\n          limit: parseInt(context.memoryLimitInMB),\r\n          usage: Math.round((process.memoryUsage().heapUsed / (parseInt(context.memoryLimitInMB) * 1024 * 1024)) * 100),\r\n        },\r\n        lambda: {\r\n          functionName: context.functionName,\r\n          functionVersion: context.functionVersion,\r\n          remainingTime: context.getRemainingTimeInMillis(),\r\n          coldStart: !global.isWarm,\r\n        },\r\n        nodejs: {\r\n          version: process.version,\r\n          platform: process.platform,\r\n          arch: process.arch,\r\n        },\r\n      },\r\n    };\r\n\r\n    // 전체 상태 결정\r\n    const componentStatuses = Object.values(systemStatus.components).map(c => c.status);\r\n    if (componentStatuses.includes('unhealthy')) {\r\n      systemStatus.status = 'unhealthy';\r\n    } else if (componentStatuses.includes('warning')) {\r\n      systemStatus.status = 'warning';\r\n    }\r\n\r\n    // Lambda 웜업 표시\r\n    global.isWarm = true;\r\n\r\n    info('System status check completed', {\r\n      requestId: context.awsRequestId,\r\n      status: systemStatus.status,\r\n      duration: systemStatus.checkDuration,\r\n    });\r\n\r\n    return success(systemStatus);\r\n  } catch (err) {\r\n    error('System status check failed', err, {\r\n      requestId: context.awsRequestId,\r\n    });\r\n\r\n    return errorResponse('System status check failed');\r\n  }\r\n};\r\n\r\n/**\r\n * 데이터베이스 상태 확인\r\n * @returns {Promise<Object>} 데이터베이스 상태\r\n */\r\nasync function checkDatabaseHealth() {\r\n  try {\r\n    // DynamoDB 초기화 확인\r\n    if (!dynamoDBConfig.isInitialized) {\r\n      dynamoDBConfig.initialize();\r\n    }\r\n\r\n    // 테이블 상태 확인\r\n    const tableStatuses = await dynamoDBConfig.getAllTableStatus();\r\n    \r\n    const healthyTables = tableStatuses.filter(t => t.status === 'ACTIVE').length;\r\n    const totalTables = tableStatuses.length;\r\n    \r\n    const health = {\r\n      status: healthyTables === totalTables ? 'healthy' : 'unhealthy',\r\n      tables: {\r\n        total: totalTables,\r\n        healthy: healthyTables,\r\n        unhealthy: totalTables - healthyTables,\r\n      },\r\n      details: tableStatuses.map(t => ({\r\n        name: t.tableName,\r\n        status: t.status,\r\n        itemCount: t.itemCount,\r\n        size: t.tableSize,\r\n      })),\r\n    };\r\n\r\n    return health;\r\n  } catch (err) {\r\n    return {\r\n      status: 'unhealthy',\r\n      error: err.message,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 오류 처리기 상태 확인\r\n * @returns {Object} 오류 처리기 상태\r\n */\r\nfunction checkErrorHandlerHealth() {\r\n  try {\r\n    const health = errorHandler.healthCheck();\r\n    return health;\r\n  } catch (err) {\r\n    return {\r\n      status: 'unhealthy',\r\n      error: err.message,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 보안 미들웨어 상태 확인\r\n * @returns {Object} 보안 상태\r\n */\r\nfunction checkSecurityHealth() {\r\n  try {\r\n    const stats = securityMiddleware.getSecurityStats();\r\n    \r\n    const health = {\r\n      status: 'healthy',\r\n      stats,\r\n      configuration: {\r\n        allowedOrigins: stats.allowedOrigins,\r\n        ipWhitelist: stats.ipWhitelist,\r\n        ipBlacklist: stats.ipBlacklist,\r\n      },\r\n    };\r\n\r\n    // 높은 속도 제한 IP가 많으면 경고\r\n    if (stats.rateLimitedIPs > 10) {\r\n      health.status = 'warning';\r\n      health.warning = 'High number of rate-limited IPs';\r\n    }\r\n\r\n    return health;\r\n  } catch (err) {\r\n    return {\r\n      status: 'unhealthy',\r\n      error: err.message,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 환경 설정 상태 확인\r\n * @returns {Object} 환경 상태\r\n */\r\nfunction checkEnvironmentHealth() {\r\n  const requiredEnvVars = [\r\n    'STAGE',\r\n    'REGION',\r\n    'FLOOD_INFO_TABLE',\r\n    'API_SOURCE_TABLE',\r\n  ];\r\n\r\n  const optionalEnvVars = [\r\n    'NAVER_CLIENT_ID',\r\n    'NAVER_CLIENT_SECRET',\r\n    'HANRIVER_BASE_URL',\r\n    'ALLOWED_ORIGINS',\r\n  ];\r\n\r\n  const health = {\r\n    status: 'healthy',\r\n    environment: {\r\n      stage: process.env.STAGE,\r\n      region: process.env.REGION,\r\n      nodeVersion: process.version,\r\n    },\r\n    configuration: {\r\n      required: {},\r\n      optional: {},\r\n    },\r\n    issues: [],\r\n  };\r\n\r\n  // 필수 환경 변수 확인\r\n  requiredEnvVars.forEach(envVar => {\r\n    const value = process.env[envVar];\r\n    health.configuration.required[envVar] = {\r\n      configured: !!value,\r\n      value: value ? '[CONFIGURED]' : '[MISSING]',\r\n    };\r\n\r\n    if (!value) {\r\n      health.status = 'unhealthy';\r\n      health.issues.push(`Missing required environment variable: ${envVar}`);\r\n    }\r\n  });\r\n\r\n  // 선택적 환경 변수 확인\r\n  optionalEnvVars.forEach(envVar => {\r\n    const value = process.env[envVar];\r\n    health.configuration.optional[envVar] = {\r\n      configured: !!value,\r\n      value: value ? '[CONFIGURED]' : '[NOT_SET]',\r\n    };\r\n\r\n    if (!value) {\r\n      health.issues.push(`Optional environment variable not set: ${envVar}`);\r\n    }\r\n  });\r\n\r\n  // 경고 상태 결정\r\n  if (health.status === 'healthy' && health.issues.length > 0) {\r\n    health.status = 'warning';\r\n  }\r\n\r\n  return health;\r\n}\r\n\r\n/**\r\n * Promise.allSettled 결과를 헬스 체크 결과로 변환\r\n * @param {Object} settledResult - Promise.allSettled 결과\r\n * @returns {Object} 헬스 체크 결과\r\n */\r\nfunction getHealthResult(settledResult) {\r\n  if (settledResult.status === 'fulfilled') {\r\n    return settledResult.value;\r\n  } else {\r\n    return {\r\n      status: 'unhealthy',\r\n      error: settledResult.reason?.message || 'Unknown error',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 외부 API 상태 확인\r\n * @param {Object} event - Lambda 이벤트\r\n * @param {Object} context - Lambda 컨텍스트\r\n * @returns {Promise<Object>} HTTP 응답\r\n */\r\nexports.checkExternalAPIs = async (event, context) => {\r\n  try {\r\n    debug('External API status check requested', {\r\n      requestId: context.awsRequestId,\r\n    });\r\n\r\n    const startTime = Date.now();\r\n\r\n    // 외부 API 상태 확인\r\n    const [hanRiverHealth, naverHealth] = await Promise.allSettled([\r\n      checkHanRiverAPIHealth(),\r\n      checkNaverAPIHealth(),\r\n    ]);\r\n\r\n    const apiStatus = {\r\n      timestamp: new Date().toISOString(),\r\n      requestId: context.awsRequestId,\r\n      checkDuration: Date.now() - startTime,\r\n      apis: {\r\n        hanRiver: getHealthResult(hanRiverHealth),\r\n        naver: getHealthResult(naverHealth),\r\n      },\r\n    };\r\n\r\n    // 전체 상태 결정\r\n    const apiStatuses = Object.values(apiStatus.apis).map(api => api.status);\r\n    apiStatus.overallStatus = apiStatuses.includes('unhealthy') ? 'unhealthy' :\r\n                             apiStatuses.includes('warning') ? 'warning' : 'healthy';\r\n\r\n    info('External API status check completed', {\r\n      requestId: context.awsRequestId,\r\n      overallStatus: apiStatus.overallStatus,\r\n      duration: apiStatus.checkDuration,\r\n    });\r\n\r\n    return success(apiStatus);\r\n  } catch (err) {\r\n    error('External API status check failed', err, {\r\n      requestId: context.awsRequestId,\r\n    });\r\n\r\n    return errorResponse('External API status check failed');\r\n  }\r\n};\r\n\r\n/**\r\n * 한강홍수통제소 API 상태 확인\r\n * @returns {Promise<Object>} API 상태\r\n */\r\nasync function checkHanRiverAPIHealth() {\r\n  try {\r\n    const baseUrl = process.env.HANRIVER_BASE_URL;\r\n    if (!baseUrl) {\r\n      return {\r\n        status: 'warning',\r\n        message: 'Han River API URL not configured',\r\n      };\r\n    }\r\n\r\n    // 간단한 연결 테스트 (실제 구현에서는 HanRiverAPIService 사용)\r\n    const response = await fetch(`${baseUrl}/health`, {\r\n      method: 'GET',\r\n      timeout: 5000,\r\n    });\r\n\r\n    return {\r\n      status: response.ok ? 'healthy' : 'unhealthy',\r\n      responseTime: Date.now() - startTime,\r\n      statusCode: response.status,\r\n    };\r\n  } catch (err) {\r\n    return {\r\n      status: 'unhealthy',\r\n      error: err.message,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 네이버 API 상태 확인\r\n * @returns {Promise<Object>} API 상태\r\n */\r\nasync function checkNaverAPIHealth() {\r\n  try {\r\n    const clientId = process.env.NAVER_CLIENT_ID;\r\n    const clientSecret = process.env.NAVER_CLIENT_SECRET;\r\n\r\n    if (!clientId || !clientSecret) {\r\n      return {\r\n        status: 'warning',\r\n        message: 'Naver API credentials not configured',\r\n      };\r\n    }\r\n\r\n    // 네이버 API는 실제 요청 없이는 상태 확인이 어려우므로 설정 확인만\r\n    return {\r\n      status: 'healthy',\r\n      message: 'Naver API credentials configured',\r\n      configured: true,\r\n    };\r\n  } catch (err) {\r\n    return {\r\n      status: 'unhealthy',\r\n      error: err.message,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 성능 메트릭 조회\r\n * @param {Object} event - Lambda 이벤트\r\n * @param {Object} context - Lambda 컨텍스트\r\n * @returns {Promise<Object>} HTTP 응답\r\n */\r\nexports.getPerformanceMetrics = async (event, context) => {\r\n  try {\r\n    debug('Performance metrics requested', {\r\n      requestId: context.awsRequestId,\r\n    });\r\n\r\n    const metrics = {\r\n      timestamp: new Date().toISOString(),\r\n      requestId: context.awsRequestId,\r\n      lambda: {\r\n        functionName: context.functionName,\r\n        functionVersion: context.functionVersion,\r\n        memoryLimit: parseInt(context.memoryLimitInMB),\r\n        remainingTime: context.getRemainingTimeInMillis(),\r\n        coldStart: !global.isWarm,\r\n      },\r\n      process: {\r\n        uptime: process.uptime(),\r\n        memory: process.memoryUsage(),\r\n        cpu: process.cpuUsage(),\r\n        version: process.version,\r\n        platform: process.platform,\r\n        arch: process.arch,\r\n      },\r\n      errors: errorHandler.getErrorStats(),\r\n      security: securityMiddleware.getSecurityStats(),\r\n    };\r\n\r\n    // 메모리 사용률 계산\r\n    metrics.memoryUsagePercent = Math.round(\r\n      (metrics.process.memory.heapUsed / (metrics.lambda.memoryLimit * 1024 * 1024)) * 100\r\n    );\r\n\r\n    // Lambda 웜업 표시\r\n    global.isWarm = true;\r\n\r\n    info('Performance metrics retrieved', {\r\n      requestId: context.awsRequestId,\r\n      memoryUsage: metrics.memoryUsagePercent,\r\n      uptime: metrics.process.uptime,\r\n    });\r\n\r\n    return success(metrics);\r\n  } catch (err) {\r\n    error('Performance metrics retrieval failed', err, {\r\n      requestId: context.awsRequestId,\r\n    });\r\n\r\n    return errorResponse('Performance metrics retrieval failed');\r\n  }\r\n};"],"names":["environment","require","LOG_LEVELS","ERROR","WARN","INFO","DEBUG","currentLogLevel","isDevelopment","formatLog","level","message","meta","_objectSpread","timestamp","Date","toISOString","stage","log","levelName","logData","console","error","JSON","stringify","warn","errorMeta","name","stack","info","debug","logRequest","event","functionName","function","httpMethod","path","queryStringParameters","headers","logResponse","response","duration","statusCode","module","exports","requiredEnvVars","optionalEnvVars","validateEnvironment","missing","filter","envVar","process","env","length","Error","join","STAGE","region","REGION","nodeEnv","NODE_ENV","dynamodbTableName","DYNAMODB_TABLE_NAME","naver","clientId","NAVER_CLIENT_ID","clientSecret","NAVER_CLIENT_SECRET","hanriver","baseUrl","HANRIVER_BASE_URL","endpoints","waterlevel","HANRIVER_WATERLEVEL_ENDPOINT","realtime","HANRIVER_REALTIME_ENDPOINT","forecast","HANRIVER_FORECAST_ENDPOINT","isTest","isProduction","isOffline","IS_OFFLINE","errorResponse","ErrorHandler","constructor","errorCounts","Map","errorPatterns","circuitBreakers","wrapLambdaHandler","handler","context","startTime","now","requestId","awsRequestId","userAgent","sourceIp","requestContext","identity","result","err","handleLambdaError","errorInfo","classifyError","errorType","type","errorCode","code","isRetryable","retryable","updateErrorStats","checkCircuitBreaker","generateErrorResponse","clientMessage","status","includes","startsWith","windowSize","has","set","errors","get","push","cutoff","recentErrors","e","detectErrorPatterns","errorCount","timeWindow","pattern","count","detectedAt","lastMinute","errorsInLastMinute","threshold","circuitBreaker","isOpen","openedAt","setTimeout","cb","isHalfOpen","getCircuitBreakerStatus","body","createAPIErrorHandler","apiType","enhancedError","originalError","getErrorStats","stats","errorTypes","patterns","forEach","lastError","resetErrorStats","clear","healthCheck","issues","Object","entries","errorStats","errorHandler","wrapHandler","SecurityMiddleware","allowedOrigins","getAllowedOrigins","rateLimitStore","ipWhitelist","getIPWhitelist","ipBlacklist","getIPBlacklist","origins","ALLOWED_ORIGINS","defaultOrigins","split","map","origin","trim","whitelist","IP_WHITELIST","ip","blacklist","IP_BLACKLIST","generateCORSHeaders","method","isOriginAllowed","some","allowedOrigin","replace","regex","RegExp","test","generateSecurityHeaders","validateIPAddress","ipAddress","allowed","reason","checkRateLimit","identifier","limits","windowMs","maxRequests","skipSuccessfulRequests","windowStart","requests","limit","remaining","Math","max","resetTime","validateAPIKey","apiKey","requiredScope","valid","scope","validAPIKeys","getValidAPIKeys","keyInfo","find","key","expiresAt","scopes","apiKeysEnv","API_KEYS","parse","validateRequest","Origin","ipValidation","rateLimitResult","toString","ceil","isSuspiciousUserAgent","REQUIRE_API_KEY","apiKeyValidation","contentLength","parseInt","maxBodySize","MAX_BODY_SIZE","suspiciousPatterns","allowedBots","createSecureResponse","additionalHeaders","logSecurityViolation","violationType","details","getSecurityStats","oneHour","totalRequests","rateLimitedIPs","recentRequests","updateSecurityConfig","config","cleanup","delete","remainingIPs","size","securityMiddleware","setInterval","success","data","validationError","notFound","resource","unauthorized","forbidden","tooManyRequests","AWS","DynamoDBConfig","dynamodb","documentClient","tableSchemas","isInitialized","initialize","options","AWS_REGION","endpoint","DYNAMODB_ENDPOINT","accessKeyId","AWS_ACCESS_KEY_ID","secretAccessKey","AWS_SECRET_ACCESS_KEY","apiVersion","DynamoDB","DocumentClient","defineTableSchemas","TableName","FLOOD_INFO_TABLE","KeySchema","AttributeName","KeyType","AttributeDefinitions","AttributeType","GlobalSecondaryIndexes","IndexName","Projection","ProjectionType","ProvisionedThroughput","ReadCapacityUnits","WriteCapacityUnits","StreamSpecification","StreamEnabled","StreamViewType","TimeToLiveSpecification","Enabled","API_SOURCE_TABLE","tableCount","tables","Array","from","keys","createTable","tableName","schema","exists","tableExists","promise","waitForTableActive","createAllTables","tableNames","describeTable","maxWaitTime","Table","TableStatus","Promise","resolve","deleteTable","getTableSchema","getTableName","schemaName","getDocumentClient","getDynamoDBClient","getTableStatus","itemCount","ItemCount","tableSize","TableSizeBytes","creationDateTime","CreationDateTime","provisionedThroughput","globalSecondaryIndexes","gsi","indexName","IndexStatus","indexSize","IndexSizeBytes","getAllTableStatus","statusPromises","catch","all","enableTTL","attributeName","updateTimeToLive","enableStream","streamViewType","updateTable","tableStatuses","healthyTables","t","totalTables","health","total","healthy","unhealthy","dynamoDBConfig","healthStatus","service","version","npm_package_version","uptime","memory","used","round","memoryUsage","heapUsed","heapTotal","memoryLimitInMB","lambda","functionVersion","remainingTime","getRemainingTimeInMillis","getSystemStatus","databaseHealth","errorHandlerHealth","securityHealth","environmentHealth","allSettled","checkDatabaseHealth","checkErrorHandlerHealth","checkSecurityHealth","checkEnvironmentHealth","systemStatus","checkDuration","components","database","getHealthResult","security","system","usage","coldStart","global","isWarm","nodejs","platform","arch","componentStatuses","values","c","configuration","warning","nodeVersion","required","optional","value","configured","settledResult","checkExternalAPIs","hanRiverHealth","naverHealth","checkHanRiverAPIHealth","checkNaverAPIHealth","apiStatus","apis","hanRiver","apiStatuses","api","overallStatus","fetch","timeout","ok","responseTime","getPerformanceMetrics","metrics","memoryLimit","cpu","cpuUsage","memoryUsagePercent"],"sourceRoot":""}