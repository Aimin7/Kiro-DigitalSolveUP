{"version":3,"file":"109.js","mappings":";;;;;;;;;;;;;;;;AAAoC;AACR;AACc;AACnC;AACP,mBAAmB,kDAAU;AAC7B;AACA,WAAW,0CAAI,CAAC,gEAAU,+BAA+B,UAAU;AACnE;;;;;;;;;;;;;ACPuD;AACX;AACrC;AACP;AACA,eAAe,+DAAa;AAC5B,KAAK;AACL;AACA,QAAQ,+DAAa;AACrB,KAAK;AACL;AACA,eAAe,yEAAc;AAC7B,KAAK;AACL;AACA,QAAQ,yEAAc;AACtB,KAAK;AACL;;;;;;;;;;;;;;;ACf4C;AACgB;AAC5D,QAAQ,WAAW,EAAE,wCAAU;AACxB;AACA;AACP;AACA;AACA;AACA,6BAA6B,kFAAmB;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACX4D;AACrD;AACP;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iCAAiC;AACpE,iCAAiC,uCAAuC;AACxE,sCAAsC,uCAAuC;AAC7E,2BAA2B,WAAW;AACtC;AACA,IAAI,oDAAoB;AACxB;AACA;;;AC7BqE;AACI;AACpC;AACJ;AACiD;AAC3E;AACP;AACA;AACA;AACA;AACA,gCAAgC,4BAAS,CAAC,sDAAuB,6BAA6B,4BAAI;AAClG;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA,uBAAuB,8BAA8B;AACrD;AACA;AACA,0BAA0B,wDAAwB,kBAAkB,QAAQ;AAC5E;AACA;AACA;AACA,sBAAsB,wDAAwB,YAAY,aAAa,wCAAwC,QAAQ;AACvH;AACA;AACA;AACA,kBAAkB,wDAAwB,YAAY,aAAa;AACnE;AACA,SAAS;AACT;AACA;;;ACnCiF;AACT;AACjE,8BAA8B,cAAc,qBAAqB,IAAI;AAC5E;AACA,2BAA2B,0CAAe;AAC1C,WAAW,yBAAyB,CAAC,yCAAc;AACnD;AACA,KAAK;AACL;;;ACR8B","sources":["webpack://flood-info-backend/./node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js","webpack://flood-info-backend/./node_modules/@smithy/shared-ini-file-loader/dist-es/externalDataInterceptor.js","webpack://flood-info-backend/./node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js","webpack://flood-info-backend/./node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js","webpack://flood-info-backend/./node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js","webpack://flood-info-backend/./node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js","webpack://flood-info-backend/./node_modules/@aws-sdk/credential-provider-process/dist-es/index.js"],"sourcesContent":["import { createHash } from \"crypto\";\nimport { join } from \"path\";\nimport { getHomeDir } from \"./getHomeDir\";\nexport const getSSOTokenFilepath = (id) => {\n    const hasher = createHash(\"sha1\");\n    const cacheName = hasher.update(id).digest(\"hex\");\n    return join(getHomeDir(), \".aws\", \"sso\", \"cache\", `${cacheName}.json`);\n};\n","import { tokenIntercept } from \"./getSSOTokenFromFile\";\nimport { fileIntercept } from \"./slurpFile\";\nexport const externalDataInterceptor = {\n    getFileRecord() {\n        return fileIntercept;\n    },\n    interceptFile(path, contents) {\n        fileIntercept[path] = Promise.resolve(contents);\n    },\n    getTokenRecord() {\n        return tokenIntercept;\n    },\n    interceptToken(id, contents) {\n        tokenIntercept[id] = contents;\n    },\n};\n","import { promises as fsPromises } from \"fs\";\nimport { getSSOTokenFilepath } from \"./getSSOTokenFilepath\";\nconst { readFile } = fsPromises;\nexport const tokenIntercept = {};\nexport const getSSOTokenFromFile = async (id) => {\n    if (tokenIntercept[id]) {\n        return tokenIntercept[id];\n    }\n    const ssoTokenFilepath = getSSOTokenFilepath(id);\n    const ssoTokenText = await readFile(ssoTokenFilepath, \"utf8\");\n    return JSON.parse(ssoTokenText);\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const getValidatedProcessCredentials = (profileName, data, profiles) => {\n    if (data.Version !== 1) {\n        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);\n    }\n    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) {\n        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);\n    }\n    if (data.Expiration) {\n        const currentTime = new Date();\n        const expireTime = new Date(data.Expiration);\n        if (expireTime < currentTime) {\n            throw Error(`Profile ${profileName} credential_process returned expired credentials.`);\n        }\n    }\n    let accountId = data.AccountId;\n    if (!accountId && profiles?.[profileName]?.aws_account_id) {\n        accountId = profiles[profileName].aws_account_id;\n    }\n    const credentials = {\n        accessKeyId: data.AccessKeyId,\n        secretAccessKey: data.SecretAccessKey,\n        ...(data.SessionToken && { sessionToken: data.SessionToken }),\n        ...(data.Expiration && { expiration: new Date(data.Expiration) }),\n        ...(data.CredentialScope && { credentialScope: data.CredentialScope }),\n        ...(accountId && { accountId }),\n    };\n    setCredentialFeature(credentials, \"CREDENTIALS_PROCESS\", \"w\");\n    return credentials;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { externalDataInterceptor } from \"@smithy/shared-ini-file-loader\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { getValidatedProcessCredentials } from \"./getValidatedProcessCredentials\";\nexport const resolveProcessCredentials = async (profileName, profiles, logger) => {\n    const profile = profiles[profileName];\n    if (profiles[profileName]) {\n        const credentialProcess = profile[\"credential_process\"];\n        if (credentialProcess !== undefined) {\n            const execPromise = promisify(externalDataInterceptor?.getTokenRecord?.().exec ?? exec);\n            try {\n                const { stdout } = await execPromise(credentialProcess);\n                let data;\n                try {\n                    data = JSON.parse(stdout.trim());\n                }\n                catch {\n                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\n                }\n                return getValidatedProcessCredentials(profileName, data, profiles);\n            }\n            catch (error) {\n                throw new CredentialsProviderError(error.message, { logger });\n            }\n        }\n        else {\n            throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger });\n        }\n    }\n    else {\n        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {\n            logger,\n        });\n    }\n};\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProcessCredentials } from \"./resolveProcessCredentials\";\nexport const fromProcess = (init = {}) => async ({ callerClientConfig } = {}) => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-process - fromProcess\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProcessCredentials(getProfileName({\n        profile: init.profile ?? callerClientConfig?.profile,\n    }), profiles, init.logger);\n};\n","export * from \"./fromProcess\";\n"],"names":[],"sourceRoot":""}